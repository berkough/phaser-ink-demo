{"version":3,"file":"ink-es6.js","sources":["../src/engine/Path.ts","../src/engine/Debug.ts","../src/engine/TypeAssertion.ts","../src/engine/NullException.ts","../src/engine/Object.ts","../src/engine/StringBuilder.ts","../src/engine/InkList.ts","../src/engine/StoryException.ts","../src/engine/TryGetResult.ts","../src/engine/Value.ts","../src/engine/SearchResult.ts","../src/engine/Container.ts","../src/engine/Glue.ts","../src/engine/PushPop.ts","../src/engine/ControlCommand.ts","../src/engine/Pointer.ts","../src/engine/Divert.ts","../src/engine/ChoicePoint.ts","../src/engine/VariableReference.ts","../src/engine/VariableAssignment.ts","../src/engine/Void.ts","../src/engine/NativeFunctionCall.ts","../src/engine/Tag.ts","../src/engine/Choice.ts","../src/engine/ListDefinition.ts","../src/engine/ListDefinitionsOrigin.ts","../src/engine/JsonSerialisation.ts","../src/engine/CallStack.ts","../src/engine/VariablesState.ts","../src/engine/PRNG.ts","../src/engine/StatePatch.ts","../src/engine/SimpleJson.ts","../src/engine/Flow.ts","../src/engine/Error.ts","../src/engine/StoryState.ts","../src/engine/StopWatch.ts","../src/engine/Story.ts"],"sourcesContent":["export class Path {\n  public static parentId = \"^\";\n\n  public _isRelative: boolean;\n  public _components: Path.Component[];\n  public _componentsString: string | null;\n\n  constructor();\n  constructor(componentsString: string);\n  constructor(head: Path.Component, tail: Path);\n  constructor(head: Path.Component[], relative?: boolean);\n  constructor() {\n    this._components = [];\n    this._componentsString = null;\n    this._isRelative = false;\n\n    if (typeof arguments[0] == \"string\") {\n      let componentsString = arguments[0] as string;\n      this.componentsString = componentsString;\n    } else if (\n      arguments[0] instanceof Path.Component &&\n      arguments[1] instanceof Path\n    ) {\n      let head = arguments[0] as Path.Component;\n      let tail = arguments[1] as Path;\n      this._components.push(head);\n      this._components = this._components.concat(tail._components);\n    } else if (arguments[0] instanceof Array) {\n      let head = arguments[0] as Path.Component[];\n      let relative = !!arguments[1] as boolean;\n      this._components = this._components.concat(head);\n      this._isRelative = relative;\n    }\n  }\n  get isRelative() {\n    return this._isRelative;\n  }\n  get componentCount(): number {\n    return this._components.length;\n  }\n  get head(): Path.Component | null {\n    if (this._components.length > 0) {\n      return this._components[0];\n    } else {\n      return null;\n    }\n  }\n  get tail(): Path {\n    if (this._components.length >= 2) {\n      // careful, the original code uses length-1 here. This is because the second argument of\n      // List.GetRange is a number of elements to extract, wherease Array.slice uses an index\n      let tailComps = this._components.slice(1, this._components.length);\n      return new Path(tailComps);\n    } else {\n      return Path.self;\n    }\n  }\n  get length(): number {\n    return this._components.length;\n  }\n  get lastComponent(): Path.Component | null {\n    let lastComponentIdx = this._components.length - 1;\n    if (lastComponentIdx >= 0) {\n      return this._components[lastComponentIdx];\n    } else {\n      return null;\n    }\n  }\n  get containsNamedComponent(): boolean {\n    for (let i = 0, l = this._components.length; i < l; i++) {\n      if (!this._components[i].isIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static get self(): Path {\n    let path = new Path();\n    path._isRelative = true;\n    return path;\n  }\n\n  public GetComponent(index: number): Path.Component {\n    return this._components[index];\n  }\n  public PathByAppendingPath(pathToAppend: Path): Path {\n    let p = new Path();\n\n    let upwardMoves = 0;\n    for (let i = 0; i < pathToAppend._components.length; ++i) {\n      if (pathToAppend._components[i].isParent) {\n        upwardMoves++;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = 0; i < this._components.length - upwardMoves; ++i) {\n      p._components.push(this._components[i]);\n    }\n\n    for (let i = upwardMoves; i < pathToAppend._components.length; ++i) {\n      p._components.push(pathToAppend._components[i]);\n    }\n\n    return p;\n  }\n  get componentsString(): string {\n    if (this._componentsString == null) {\n      this._componentsString = this._components.join(\".\");\n      if (this.isRelative)\n        this._componentsString = \".\" + this._componentsString;\n    }\n\n    return this._componentsString;\n  }\n  set componentsString(value: string) {\n    this._components.length = 0;\n\n    this._componentsString = value;\n\n    if (this._componentsString == null || this._componentsString == \"\") return;\n\n    if (this._componentsString[0] == \".\") {\n      this._isRelative = true;\n      this._componentsString = this._componentsString.substring(1);\n    }\n\n    let componentStrings = this._componentsString.split(\".\");\n    for (let str of componentStrings) {\n      // we need to distinguish between named components that start with a number, eg \"42somewhere\", and indexed components\n      // the normal parseInt won't do for the detection because it's too relaxed.\n      // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n      if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(str)) {\n        this._components.push(new Path.Component(parseInt(str)));\n      } else {\n        this._components.push(new Path.Component(str));\n      }\n    }\n  }\n  public toString(): string {\n    return this.componentsString;\n  }\n  public Equals(otherPath: Path | null): boolean {\n    if (otherPath == null) return false;\n\n    if (otherPath._components.length != this._components.length) return false;\n\n    if (otherPath.isRelative != this.isRelative) return false;\n\n    // the original code uses SequenceEqual here, so we need to iterate over the components manually.\n    for (let i = 0, l = otherPath._components.length; i < l; i++) {\n      // it's not quite clear whether this test should use Equals or a simple == operator,\n      // see https://github.com/y-lohse/inkjs/issues/22\n      if (!otherPath._components[i].Equals(this._components[i])) return false;\n    }\n\n    return true;\n  }\n  public PathByAppendingComponent(c: Path.Component): Path {\n    let p = new Path();\n    p._components.push(...this._components);\n    p._components.push(c);\n    return p;\n  }\n}\n\nexport namespace Path {\n  export class Component {\n    public readonly index: number;\n    public readonly name: string | null;\n\n    constructor(indexOrName: string | number) {\n      this.index = -1;\n      this.name = null;\n      if (typeof indexOrName == \"string\") {\n        this.name = indexOrName;\n      } else {\n        this.index = indexOrName;\n      }\n    }\n    get isIndex(): boolean {\n      return this.index >= 0;\n    }\n    get isParent(): boolean {\n      return this.name == Path.parentId;\n    }\n\n    public static ToParent(): Component {\n      return new Component(Path.parentId);\n    }\n    public toString(): string | null {\n      if (this.isIndex) {\n        return this.index.toString();\n      } else {\n        return this.name;\n      }\n    }\n    public Equals(otherComp: Component): boolean {\n      if (otherComp != null && otherComp.isIndex == this.isIndex) {\n        if (this.isIndex) {\n          return this.index == otherComp.index;\n        } else {\n          return this.name == otherComp.name;\n        }\n      }\n\n      return false;\n    }\n  }\n}\n","export namespace Debug {\n  export function AssertType<T>(\n    variable: any,\n    type: new () => T,\n    message: string\n  ): void | never {\n    Assert(variable instanceof type, message);\n  }\n\n  export function Assert(condition: boolean, message?: string): void | never {\n    if (!condition) {\n      if (typeof message !== \"undefined\") {\n        console.warn(message);\n      }\n\n      if (console.trace) {\n        console.trace();\n      }\n\n      throw new Error(\"\");\n    }\n  }\n}\n","import { INamedContent } from \"./INamedContent\";\n\nexport function asOrNull<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | null {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    return null;\n  }\n}\n\nexport function asOrThrows<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | never {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    throw new Error(`${obj} is not of type ${type}`);\n  }\n}\n\nexport function asNumberOrThrows(obj: any) {\n  if (typeof obj === \"number\") {\n    return obj as number;\n  } else {\n    throw new Error(`${obj} is not a number`);\n  }\n}\n\nexport function asBooleanOrThrows(obj: any) {\n  if (typeof obj === \"boolean\") {\n    return obj as boolean;\n  } else {\n    throw new Error(`${obj} is not a boolean`);\n  }\n}\n\n// So here, in the reference implementation, contentObj is casted to an INamedContent\n// but here we use js-style duck typing: if it implements the same props as the interface,\n// we treat it as valid.\nexport function asINamedContentOrNull(obj: any): INamedContent | null {\n  if (obj.hasValidName && obj.name) {\n    return obj as INamedContent;\n  }\n\n  return null;\n}\n\nexport function nullIfUndefined<T>(obj: T | undefined): T | null {\n  if (typeof obj === \"undefined\") {\n    return null;\n  }\n\n  return obj;\n}\n\nexport function isEquatable(type: any) {\n  return typeof type === \"object\" && typeof type.Equals === \"function\";\n}\n\nfunction unsafeTypeAssertion<T>(\n  obj: any,\n  type: (new () => T) | (Function & { prototype: T })\n) {\n  return obj as T;\n}\n\nexport function filterUndef<T>(element: T | undefined): element is T {\n  return element != undefined;\n}\n","/**\n * In the original C# code, a SystemException would be thrown when passing\n * null to methods expected a valid instance. Javascript has no such\n * concept, but TypeScript will not allow `null` to be passed to methods\n * explicitely requiring a valid type.\n *\n * Whenever TypeScript complain about the possibility of a `null` value,\n * check the offending value and it it's null, throw this exception using\n * `throwNullException(name: string)`.\n */\nexport class NullException extends Error {}\n\n/**\n * Throw a NullException.\n *\n * @param name a short description of the offending value (often its name within the code).\n */\nexport function throwNullException(name: string): never {\n  throw new NullException(`${name} is null or undefined`);\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { Debug } from \"./Debug\";\nimport { asOrNull, asINamedContentOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SearchResult } from \"./SearchResult\";\nimport { DebugMetadata } from \"./DebugMetadata\";\n\nexport class InkObject {\n  public parent: InkObject | null = null;\n\n  get debugMetadata(): DebugMetadata | null {\n    if (this._debugMetadata === null) {\n      if (this.parent) {\n        return this.parent.debugMetadata;\n      }\n    }\n\n    return this._debugMetadata;\n  }\n\n  set debugMetadata(value) {\n    this._debugMetadata = value;\n  }\n\n  get ownDebugMetadata() {\n    return this._debugMetadata;\n  }\n\n  private _debugMetadata: DebugMetadata | null = null;\n\n  public DebugLineNumberOfPath(path: Path) {\n    if (path === null) return null;\n\n    // Try to get a line number from debug metadata\n    let root = this.rootContentContainer;\n    if (root) {\n      let targetContent = root.ContentAtPath(path).obj;\n      if (targetContent) {\n        let dm = targetContent.debugMetadata;\n        if (dm !== null) {\n          return dm.startLineNumber;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  get path() {\n    if (this._path == null) {\n      if (this.parent == null) {\n        this._path = new Path();\n      } else {\n        let comps: Path.Component[] = [];\n\n        let child: InkObject = this;\n        let container = asOrNull(child.parent, Container);\n\n        while (container !== null) {\n          let namedChild = asINamedContentOrNull(child);\n          if (namedChild != null && namedChild.hasValidName) {\n            if (namedChild.name === null)\n              return throwNullException(\"namedChild.name\");\n            comps.unshift(new Path.Component(namedChild.name!));\n          } else {\n            comps.unshift(new Path.Component(container.content.indexOf(child)));\n          }\n\n          child = container;\n          container = asOrNull(container.parent, Container);\n        }\n\n        this._path = new Path(comps);\n      }\n    }\n\n    return this._path;\n  }\n  private _path: Path | null = null;\n\n  public ResolvePath(path: Path | null): SearchResult {\n    if (path === null) return throwNullException(\"path\");\n    if (path.isRelative) {\n      let nearestContainer = asOrNull(this, Container);\n\n      if (nearestContainer === null) {\n        Debug.Assert(\n          this.parent !== null,\n          \"Can't resolve relative path because we don't have a parent\"\n        );\n        nearestContainer = asOrNull(this.parent, Container);\n        Debug.Assert(\n          nearestContainer !== null,\n          \"Expected parent to be a container\"\n        );\n        Debug.Assert(path.GetComponent(0).isParent);\n        path = path.tail;\n      }\n\n      if (nearestContainer === null) {\n        return throwNullException(\"nearestContainer\");\n      }\n      return nearestContainer.ContentAtPath(path);\n    } else {\n      let contentContainer = this.rootContentContainer;\n      if (contentContainer === null) {\n        return throwNullException(\"contentContainer\");\n      }\n      return contentContainer.ContentAtPath(path);\n    }\n  }\n\n  public ConvertPathToRelative(globalPath: Path) {\n    let ownPath = this.path;\n\n    let minPathLength = Math.min(globalPath.length, ownPath.length);\n    let lastSharedPathCompIndex = -1;\n\n    for (let i = 0; i < minPathLength; ++i) {\n      let ownComp = ownPath.GetComponent(i);\n      let otherComp = globalPath.GetComponent(i);\n\n      if (ownComp.Equals(otherComp)) {\n        lastSharedPathCompIndex = i;\n      } else {\n        break;\n      }\n    }\n\n    // No shared path components, so just use global path\n    if (lastSharedPathCompIndex == -1) return globalPath;\n\n    let numUpwardsMoves = ownPath.componentCount - 1 - lastSharedPathCompIndex;\n\n    let newPathComps: Path.Component[] = [];\n\n    for (let up = 0; up < numUpwardsMoves; ++up)\n      newPathComps.push(Path.Component.ToParent());\n\n    for (\n      let down = lastSharedPathCompIndex + 1;\n      down < globalPath.componentCount;\n      ++down\n    )\n      newPathComps.push(globalPath.GetComponent(down));\n\n    let relativePath = new Path(newPathComps, true);\n    return relativePath;\n  }\n\n  public CompactPathString(otherPath: Path) {\n    let globalPathStr = null;\n    let relativePathStr = null;\n\n    if (otherPath.isRelative) {\n      relativePathStr = otherPath.componentsString;\n      globalPathStr = this.path.PathByAppendingPath(otherPath).componentsString;\n    } else {\n      let relativePath = this.ConvertPathToRelative(otherPath);\n      relativePathStr = relativePath.componentsString;\n      globalPathStr = otherPath.componentsString;\n    }\n\n    if (relativePathStr.length < globalPathStr.length) return relativePathStr;\n    else return globalPathStr;\n  }\n\n  get rootContentContainer() {\n    let ancestor: InkObject = this;\n    while (ancestor.parent) {\n      ancestor = ancestor.parent;\n    }\n    return asOrNull(ancestor, Container);\n  }\n\n  public Copy(): InkObject {\n    throw Error(\"Not Implemented: Doesn't support copying\");\n  }\n  // SetChild works slightly diferently in the js implementation.\n  // Since we can't pass an objets property by reference, we instead pass\n  // the object and the property string.\n  // TODO: This method can probably be rewritten with type-safety in mind.\n  public SetChild(obj: any, prop: any, value: any) {\n    if (obj[prop]) obj[prop] = null;\n\n    obj[prop] = value;\n\n    if (obj[prop]) obj[prop].parent = this;\n  }\n\n  public Equals(obj: any) {\n    return obj === this;\n  }\n}\n","export class StringBuilder {\n  private string: string;\n\n  constructor(str?: string) {\n    str = typeof str !== \"undefined\" ? str.toString() : \"\";\n    this.string = str;\n  }\n  get Length(): number {\n    return this.string.length;\n  }\n  public Append(str: string | null) {\n    if (str !== null) {\n      this.string += str;\n    }\n  }\n  public AppendLine(str?: string) {\n    if (typeof str !== \"undefined\") this.Append(str);\n    this.string += \"\\n\";\n  }\n  public AppendFormat(format: string, ...args: any[]) {\n    // taken from http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\n    this.string += format.replace(/{(\\d+)}/g, (match: string, num: number) =>\n      typeof args[num] != \"undefined\" ? args[num] : match\n    );\n  }\n  public toString(): string {\n    return this.string;\n  }\n\n  public Clear() {\n    this.string = \"\";\n  }\n}\n","import { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Story } from \"./Story\";\n\nexport class InkListItem implements IInkListItem {\n  // InkListItem is a struct\n\n  public readonly originName: string | null = null;\n  public readonly itemName: string | null = null;\n\n  constructor(originName: string | null, itemName: string | null);\n  constructor(fullName: string | null);\n  constructor() {\n    if (typeof arguments[1] !== \"undefined\") {\n      let originName = arguments[0] as string | null;\n      let itemName = arguments[1] as string | null;\n\n      this.originName = originName;\n      this.itemName = itemName;\n    } else if (arguments[0]) {\n      let fullName = arguments[0] as string;\n\n      let nameParts = fullName.toString().split(\".\");\n      this.originName = nameParts[0];\n      this.itemName = nameParts[1];\n    }\n  }\n  public static get Null() {\n    return new InkListItem(null, null);\n  }\n  public get isNull() {\n    return this.originName == null && this.itemName == null;\n  }\n  get fullName() {\n    return (\n      (this.originName !== null ? this.originName : \"?\") + \".\" + this.itemName\n    );\n  }\n  public toString(): string {\n    return this.fullName;\n  }\n  public Equals(obj: InkListItem) {\n    if (obj instanceof InkListItem) {\n      let otherItem = obj;\n      return (\n        otherItem.itemName == this.itemName &&\n        otherItem.originName == this.originName\n      );\n    }\n\n    return false;\n  }\n\n  // These methods did not exist in the original C# code. Their purpose is to\n  // make `InkListItem` mimics the value-type semantics of the original\n  // struct. Please refer to the end of this file, for a more in-depth\n  // explanation.\n\n  /**\n   * Returns a shallow clone of the current instance.\n   */\n  public copy() {\n    return new InkListItem(this.originName, this.itemName);\n  }\n  /**\n   * Returns a `SerializedInkListItem` representing the current\n   * instance. The result is intended to be used as a key inside a Map.\n   */\n  public serialized(): SerializedInkListItem {\n    // We are simply using a JSON representation as a value-typed key.\n    return JSON.stringify({\n      originName: this.originName,\n      itemName: this.itemName,\n    });\n  }\n\n  /**\n   * Reconstructs a `InkListItem` from the given SerializedInkListItem.\n   */\n  public static fromSerializedKey(key: SerializedInkListItem): InkListItem {\n    let obj = JSON.parse(key);\n    if (!InkListItem.isLikeInkListItem(obj)) return InkListItem.Null;\n\n    let inkListItem = obj as IInkListItem;\n\n    return new InkListItem(inkListItem.originName, inkListItem.itemName);\n  }\n\n  /**\n   * Determines whether the given item is sufficiently `InkListItem`-like\n   * to be used as a template when reconstructing the InkListItem.\n   */\n  private static isLikeInkListItem(item: any) {\n    if (typeof item !== \"object\") return false;\n    if (!item.hasOwnProperty(\"originName\") || !item.hasOwnProperty(\"itemName\"))\n      return false;\n    if (typeof item.originName !== \"string\" && typeof item.originName !== null)\n      return false;\n    if (typeof item.itemName !== \"string\" && typeof item.itemName !== null)\n      return false;\n\n    return true;\n  }\n}\n\nexport class InkList extends Map<SerializedInkListItem, number> {\n  public origins: ListDefinition[] | null = null;\n  public _originNames: string[] | null = [];\n\n  constructor();\n  constructor(otherList: InkList);\n  constructor(singleOriginListName: string, originStory: Story);\n  constructor(singleElement: KeyValuePair<InkListItem, number>);\n  constructor() {\n    // Trying to be smart here, this emulates the constructor inheritance found\n    // in the original code, but only if otherList is an InkList. IIFE FTW.\n    super(\n      (() => {\n        if (arguments[0] instanceof InkList) {\n          return arguments[0];\n        } else {\n          return [];\n        }\n      })()\n    );\n\n    if (arguments[0] instanceof InkList) {\n      let otherList = arguments[0] as InkList;\n\n      let otherOriginNames = otherList.originNames as string[];\n      if (otherOriginNames !== null)\n        this._originNames = otherOriginNames.slice();\n      if (otherList.origins !== null) {\n        this.origins = otherList.origins.slice();\n      }\n    } else if (typeof arguments[0] === \"string\") {\n      let singleOriginListName = arguments[0] as string;\n      let originStory = arguments[1] as Story;\n      this.SetInitialOriginName(singleOriginListName);\n\n      if (originStory.listDefinitions === null) {\n        return throwNullException(\"originStory.listDefinitions\");\n      }\n      let def = originStory.listDefinitions.TryListGetDefinition(\n        singleOriginListName,\n        null\n      );\n      if (def.exists) {\n        // Throwing now, because if the value is `null` it will\n        // eventually throw down the line.\n        if (def.result === null) {\n          return throwNullException(\"def.result\");\n        }\n        this.origins = [def.result];\n      } else {\n        throw new Error(\n          \"InkList origin could not be found in story when constructing new list: \" +\n            singleOriginListName\n        );\n      }\n    } else if (\n      typeof arguments[0] === \"object\" &&\n      arguments[0].hasOwnProperty(\"Key\") &&\n      arguments[0].hasOwnProperty(\"Value\")\n    ) {\n      let singleElement = arguments[0] as KeyValuePair<InkListItem, number>;\n      this.Add(singleElement.Key, singleElement.Value);\n    }\n  }\n\n  public static FromString(myListItem: string, originStory: Story) {\n    let listValue =\n      originStory.listDefinitions?.FindSingleItemListWithName(myListItem);\n    if (listValue) {\n      if (listValue.value === null) {\n        return throwNullException(\"listValue.value\");\n      }\n      return new InkList(listValue.value);\n    } else {\n      throw new Error(\n        \"Could not find the InkListItem from the string '\" +\n          myListItem +\n          \"' to create an InkList because it doesn't exist in the original list definition in ink.\"\n      );\n    }\n  }\n\n  public AddItem(itemOrItemName: InkListItem | string | null) {\n    if (itemOrItemName instanceof InkListItem) {\n      let item = itemOrItemName;\n\n      if (item.originName == null) {\n        this.AddItem(item.itemName);\n        return;\n      }\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (origin.name == item.originName) {\n          let intVal = origin.TryGetValueForItem(item, 0);\n          if (intVal.exists) {\n            this.Add(item, intVal.result);\n            return;\n          } else {\n            throw new Error(\n              \"Could not add the item \" +\n                item +\n                \" to this list because it doesn't exist in the original list definition in ink.\"\n            );\n          }\n        }\n      }\n\n      throw new Error(\n        \"Failed to add item to list because the item was from a new list definition that wasn't previously known to this list. Only items from previously known lists can be used, so that the int value can be found.\"\n      );\n    } else {\n      let itemName = itemOrItemName as string | null;\n\n      let foundListDef: ListDefinition | null = null;\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (itemName === null) return throwNullException(\"itemName\");\n\n        if (origin.ContainsItemWithName(itemName)) {\n          if (foundListDef != null) {\n            throw new Error(\n              \"Could not add the item \" +\n                itemName +\n                \" to this list because it could come from either \" +\n                origin.name +\n                \" or \" +\n                foundListDef.name\n            );\n          } else {\n            foundListDef = origin;\n          }\n        }\n      }\n\n      if (foundListDef == null)\n        throw new Error(\n          \"Could not add the item \" +\n            itemName +\n            \" to this list because it isn't known to any list definitions previously associated with this list.\"\n        );\n\n      let item = new InkListItem(foundListDef.name, itemName);\n      let itemVal = foundListDef.ValueForItem(item);\n      this.Add(item, itemVal);\n    }\n  }\n  public ContainsItemNamed(itemName: string | null) {\n    for (let [key] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (item.itemName == itemName) return true;\n    }\n\n    return false;\n  }\n  public ContainsKey(key: InkListItem) {\n    return this.has(key.serialized());\n  }\n  public Add(key: InkListItem, value: number) {\n    let serializedKey = key.serialized();\n    if (this.has(serializedKey)) {\n      // Throw an exception to match the C# behavior.\n      throw new Error(`The Map already contains an entry for ${key}`);\n    }\n    this.set(serializedKey, value);\n  }\n  public Remove(key: InkListItem) {\n    return this.delete(key.serialized());\n  }\n  get Count() {\n    return this.size;\n  }\n  get originOfMaxItem(): ListDefinition | null {\n    if (this.origins == null) return null;\n\n    let maxOriginName = this.maxItem.Key.originName;\n    let result = null;\n    this.origins.every((origin) => {\n      if (origin.name == maxOriginName) {\n        result = origin;\n        return false;\n      } else return true;\n    });\n\n    return result;\n  }\n  get originNames(): string[] {\n    if (this.Count > 0) {\n      if (this._originNames == null && this.Count > 0) this._originNames = [];\n      else {\n        if (!this._originNames) this._originNames = [];\n        this._originNames.length = 0;\n      }\n\n      for (let [key] of this) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.originName === null)\n          return throwNullException(\"item.originName\");\n        this._originNames.push(item.originName);\n      }\n    }\n\n    return this._originNames as string[];\n  }\n  public SetInitialOriginName(initialOriginName: string) {\n    this._originNames = [initialOriginName];\n  }\n  public SetInitialOriginNames(initialOriginNames: string[]) {\n    if (initialOriginNames == null) this._originNames = null;\n    else this._originNames = initialOriginNames.slice(); // store a copy\n  }\n  get maxItem() {\n    let max: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (max.Key.isNull || value > max.Value)\n        max = { Key: item, Value: value };\n    }\n\n    return max;\n  }\n  get minItem() {\n    let min: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (min.Key.isNull || value < min.Value) {\n        min = { Key: item, Value: value };\n      }\n    }\n    return min;\n  }\n  get inverse() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          if (!this.ContainsKey(item)) list.Add(item, value);\n        }\n      }\n    }\n    return list;\n  }\n  get all() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          list.set(item.serialized(), value);\n        }\n      }\n    }\n    return list;\n  }\n  public Union(otherList: InkList) {\n    let union = new InkList(this);\n    for (let [key, value] of otherList) {\n      union.set(key, value);\n    }\n    return union;\n  }\n  public Intersect(otherList: InkList) {\n    let intersection = new InkList();\n    for (let [key, value] of this) {\n      if (otherList.has(key)) intersection.set(key, value);\n    }\n\n    return intersection;\n  }\n  public HasIntersection(otherList: InkList): boolean {\n    for (let [key] of this) {\n      if (otherList.has(key)) return true;\n    }\n    return false;\n  }\n  public Without(listToRemove: InkList) {\n    let result = new InkList(this);\n    for (let [key] of listToRemove) {\n      result.delete(key);\n    }\n\n    return result;\n  }\n\n  public Contains(key: string): boolean;\n  public Contains(otherList: InkList): boolean;\n  public Contains(what: string | InkList): boolean {\n    if (typeof what == \"string\") return this.ContainsItemNamed(what);\n    const otherList = what;\n    if (otherList.size == 0 || this.size == 0) return false;\n    for (let [key] of otherList) {\n      if (!this.has(key)) return false;\n    }\n\n    return true;\n  }\n  public GreaterThan(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return this.minItem.Value > otherList.maxItem.Value;\n  }\n  public GreaterThanOrEquals(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return (\n      this.minItem.Value >= otherList.minItem.Value &&\n      this.maxItem.Value >= otherList.maxItem.Value\n    );\n  }\n  public LessThan(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return this.maxItem.Value < otherList.minItem.Value;\n  }\n  public LessThanOrEquals(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return (\n      this.maxItem.Value <= otherList.maxItem.Value &&\n      this.minItem.Value <= otherList.minItem.Value\n    );\n  }\n  public MaxAsList() {\n    if (this.Count > 0) return new InkList(this.maxItem);\n    else return new InkList();\n  }\n  public MinAsList() {\n    if (this.Count > 0) return new InkList(this.minItem);\n    else return new InkList();\n  }\n  public ListWithSubRange(minBound: any, maxBound: any) {\n    if (this.Count == 0) return new InkList();\n\n    let ordered = this.orderedItems;\n\n    let minValue = 0;\n    let maxValue = Number.MAX_SAFE_INTEGER;\n\n    if (Number.isInteger(minBound)) {\n      minValue = minBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        minValue = minBound.minItem.Value;\n    }\n\n    if (Number.isInteger(maxBound)) {\n      maxValue = maxBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        maxValue = maxBound.maxItem.Value;\n    }\n\n    let subList = new InkList();\n    subList.SetInitialOriginNames(this.originNames);\n    for (let item of ordered) {\n      if (item.Value >= minValue && item.Value <= maxValue) {\n        subList.Add(item.Key, item.Value);\n      }\n    }\n\n    return subList;\n  }\n  public Equals(otherInkList: InkList) {\n    if (otherInkList instanceof InkList === false) return false;\n    if (otherInkList.Count != this.Count) return false;\n\n    for (let [key] of this) {\n      if (!otherInkList.has(key)) return false;\n    }\n\n    return true;\n  }\n  // GetHashCode not implemented\n  get orderedItems() {\n    // List<KeyValuePair<InkListItem, int>>\n    let ordered = new Array<KeyValuePair<InkListItem, number>>();\n\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      ordered.push({ Key: item, Value: value });\n    }\n\n    ordered.sort((x, y) => {\n      if (x.Key.originName === null) {\n        return throwNullException(\"x.Key.originName\");\n      }\n      if (y.Key.originName === null) {\n        return throwNullException(\"y.Key.originName\");\n      }\n\n      if (x.Value == y.Value) {\n        return x.Key.originName.localeCompare(y.Key.originName);\n      } else {\n        // TODO: refactor this bit into a numberCompareTo method?\n        if (x.Value < y.Value) return -1;\n        return x.Value > y.Value ? 1 : 0;\n      }\n    });\n\n    return ordered;\n  }\n  public toString() {\n    let ordered = this.orderedItems;\n\n    let sb = new StringBuilder();\n    for (let i = 0; i < ordered.length; i++) {\n      if (i > 0) sb.Append(\", \");\n\n      let item = ordered[i].Key;\n      if (item.itemName === null) return throwNullException(\"item.itemName\");\n      sb.Append(item.itemName);\n    }\n\n    return sb.toString();\n  }\n  // casting a InkList to a Number, for somereason, actually gives a number.\n  // This messes up the type detection when creating a Value from a InkList.\n  // Returning NaN here prevents that.\n  public valueOf() {\n    return NaN;\n  }\n}\n\n/**\n * In the original C# code, `InkListItem` was defined as value type, meaning\n * that two `InkListItem` would be considered equal as long as they held the\n * same values. This doesn't hold true in Javascript, as `InkListItem` is a\n * reference type (Javascript doesn't allow the creation of custom value types).\n *\n * The key equality of Map objects is based on the \"SameValueZero\" algorithm;\n * since `InkListItem` is a value type, two keys will only be considered\n * equal if they are, in fact, the same object. As we are trying to emulate\n * the original behavior as close as possible, this will lead to unforeseen\n * side effects.\n *\n * In order to have a key equality based on value semantics, we'll convert\n * `InkListItem` to a valid string representation and use this representation\n * as a key (strings are value types in Javascript). Rather than using the\n * type `string` directly, we'll alias it to `SerializedInkListItem` and use\n * this type as the key for our Map-based `InkList`.\n *\n * Reducing `InkListItem` to a JSON representation would not be bulletproof\n * in the general case, but for our needs it works well. The major downside of\n * this method is that we will have to to reconstruct the original `InkListItem`\n * every time we'll need to access its properties.\n */\nexport type SerializedInkListItem = string;\n\n/**\n * An interface inherited by `InkListItem`, defining exposed\n * properties. It's mainly used when deserializing a `InkListItem` from its\n * key (`SerializedInkListItem`)\n */\ninterface IInkListItem {\n  readonly originName: string | null;\n  readonly itemName: string | null;\n}\nexport interface KeyValuePair<K, V> {\n  Key: K;\n  Value: V;\n}\n","export class StoryException extends Error {\n  public useEndLineNumber: boolean;\n  public message: string;\n  public name: string;\n\n  constructor(message: string) {\n    super(message);\n    this.useEndLineNumber = false;\n    this.message = message;\n    this.name = \"StoryException\";\n  }\n}\n","/**\n * This interface normalize the `TryGet` behavior found in the original\n * C# project. Any `TryGet` method will return a object conforming to this\n * interface.\n *\n * The original function returns a boolean and has a second parameter called\n * item that is an `out`. Both are needed and we can't just return the item\n * because it'll always be truthy. Instead, we return an object containing\n * whether the result exists (`exists`) and the result itself (`result`).\n *\n * For instance a `TryGet` prototype would look like this:\n```\nTryGetItemWithValue(val: number, item: InkListItem): TryGetResult<InkListItem>{\n```\n *\n * On the other hand, dealing with the result can be done in the following way:\n```\nvar item = item.TryGetItemWithValue(intVal, InkListItem.Null);\nif (item.exists) {\n\tconsole.log(item.result)\n}\n```\n *\n */\nexport interface TryGetResult<T> {\n  result: T;\n  exists: boolean;\n}\n\nexport function tryGetValueFromMap<K, V>(\n  map: Map<K, V> | null,\n  key: K,\n  /* out */ value: V\n): TryGetResult<V> {\n  if (map === null) {\n    return { result: value, exists: false };\n  }\n\n  let val = map.get(key);\n\n  if (typeof val === \"undefined\") {\n    return { result: value, exists: false };\n  } else {\n    return { result: val, exists: true };\n  }\n}\n\nexport function tryParseInt(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseInt(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n\nexport function tryParseFloat(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseFloat(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { StoryException } from \"./StoryException\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { tryParseInt, tryParseFloat } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport abstract class AbstractValue extends InkObject {\n  public abstract get valueType(): ValueType;\n  public abstract get isTruthy(): boolean;\n  public abstract get valueObject(): any;\n\n  public abstract Cast(newType: ValueType): Value<any>;\n\n  public static Create(\n    val: any,\n    preferredNumberType?: ValueType\n  ): Value<any> | null {\n    // This code doesn't exist in upstream and is simply here to enforce\n    // the creation of the proper number value.\n    // If `preferredNumberType` is not provided or if value doesn't match\n    // `preferredNumberType`, this conditional does nothing.\n    if (preferredNumberType) {\n      if (\n        preferredNumberType === (ValueType.Int as ValueType) &&\n        Number.isInteger(Number(val))\n      ) {\n        return new IntValue(Number(val));\n      } else if (\n        preferredNumberType === (ValueType.Float as ValueType) &&\n        !isNaN(val)\n      ) {\n        return new FloatValue(Number(val));\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      return new BoolValue(Boolean(val));\n    }\n\n    // https://github.com/y-lohse/inkjs/issues/425\n    // Changed condition sequence, because Number('') is\n    // parsed to 0, which made setting string to empty\n    // impossible\n    if (typeof val === \"string\") {\n      return new StringValue(String(val));\n    } else if (Number.isInteger(Number(val))) {\n      return new IntValue(Number(val));\n    } else if (!isNaN(val)) {\n      return new FloatValue(Number(val));\n    } else if (val instanceof Path) {\n      return new DivertTargetValue(asOrThrows(val, Path));\n    } else if (val instanceof InkList) {\n      return new ListValue(asOrThrows(val, InkList));\n    }\n\n    return null;\n  }\n  public Copy() {\n    return asOrThrows(AbstractValue.Create(this.valueObject), InkObject);\n  }\n  public BadCastException(targetType: ValueType) {\n    return new StoryException(\n      \"Can't cast \" +\n        this.valueObject +\n        \" from \" +\n        this.valueType +\n        \" to \" +\n        targetType\n    );\n  }\n}\n\nexport abstract class Value<\n  T extends { toString: () => string }\n> extends AbstractValue {\n  public value: T | null;\n\n  constructor(val: T | null) {\n    super();\n    this.value = val;\n  }\n  public get valueObject() {\n    return this.value;\n  }\n  public toString() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.toString();\n  }\n}\n\nexport class BoolValue extends Value<boolean> {\n  constructor(val: boolean) {\n    super(val || false);\n  }\n  public get isTruthy() {\n    return Boolean(this.value);\n  }\n  public get valueType() {\n    return ValueType.Bool;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value ? 1 : 0);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value ? 1.0 : 0.0);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(this.value ? \"true\" : \"false\");\n    }\n\n    throw this.BadCastException(newType);\n  }\n\n  public toString() {\n    return this.value ? \"true\" : \"false\";\n  }\n}\n\nexport class IntValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0);\n  }\n  public get isTruthy() {\n    return this.value != 0;\n  }\n  public get valueType() {\n    return ValueType.Int;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0 ? false : true);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class FloatValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0.0);\n  }\n  public get isTruthy() {\n    return this.value != 0.0;\n  }\n  public get valueType() {\n    return ValueType.Float;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0.0 ? false : true);\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class StringValue extends Value<string> {\n  public _isNewline: boolean;\n  public _isInlineWhitespace: boolean;\n\n  constructor(val: string) {\n    super(val || \"\");\n\n    this._isNewline = this.value == \"\\n\";\n    this._isInlineWhitespace = true;\n\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (this.value.length > 0) {\n      this.value.split(\"\").every((c) => {\n        if (c != \" \" && c != \"\\t\") {\n          this._isInlineWhitespace = false;\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }\n  public get valueType() {\n    return ValueType.String;\n  }\n  public get isTruthy() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.length > 0;\n  }\n  public get isNewline() {\n    return this._isNewline;\n  }\n  public get isInlineWhitespace() {\n    return this._isInlineWhitespace;\n  }\n  public get isNonWhitespace() {\n    return !this.isNewline && !this.isInlineWhitespace;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      let parsedInt = tryParseInt(this.value);\n      if (parsedInt.exists) {\n        return new IntValue(parsedInt.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    if (newType == ValueType.Float) {\n      let parsedFloat = tryParseFloat(this.value);\n      if (parsedFloat.exists) {\n        return new FloatValue(parsedFloat.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class DivertTargetValue extends Value<Path> {\n  constructor(targetPath: Path | null = null) {\n    super(targetPath);\n  }\n  public get valueType() {\n    return ValueType.DivertTarget;\n  }\n  public get targetPath() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set targetPath(value: Path) {\n    this.value = value;\n  }\n  public get isTruthy(): never {\n    throw new Error(\"Shouldn't be checking the truthiness of a divert target\");\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"DivertTargetValue(\" + this.targetPath + \")\";\n  }\n}\n\nexport class VariablePointerValue extends Value<string> {\n  public _contextIndex: number;\n\n  constructor(variableName: string, contextIndex: number = -1) {\n    super(variableName);\n\n    this._contextIndex = contextIndex;\n  }\n\n  public get contextIndex() {\n    return this._contextIndex;\n  }\n  public set contextIndex(value: number) {\n    this._contextIndex = value;\n  }\n  public get variableName() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set variableName(value: string) {\n    this.value = value;\n  }\n  public get valueType() {\n    return ValueType.VariablePointer;\n  }\n\n  public get isTruthy(): never {\n    throw new Error(\n      \"Shouldn't be checking the truthiness of a variable pointer\"\n    );\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"VariablePointerValue(\" + this.variableName + \")\";\n  }\n  public Copy() {\n    return new VariablePointerValue(this.variableName, this.contextIndex);\n  }\n}\n\nexport class ListValue extends Value<InkList> {\n  public get isTruthy() {\n    if (this.value === null) {\n      return throwNullException(\"this.value\");\n    }\n    return this.value.Count > 0;\n  }\n  public get valueType() {\n    return ValueType.List;\n  }\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == ValueType.Int) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new IntValue(0);\n      else return new IntValue(max.Value);\n    } else if (newType == ValueType.Float) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new FloatValue(0.0);\n      else return new FloatValue(max.Value);\n    } else if (newType == ValueType.String) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new StringValue(\"\");\n      else {\n        return new StringValue(max.Key.toString());\n      }\n    }\n\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  constructor();\n  constructor(list: InkList);\n  constructor(listOrSingleItem: InkListItem, singleValue: number);\n  constructor(listOrSingleItem?: InkListItem | InkList, singleValue?: number) {\n    super(null);\n\n    if (!listOrSingleItem && !singleValue) {\n      this.value = new InkList();\n    } else if (listOrSingleItem instanceof InkList) {\n      this.value = new InkList(listOrSingleItem);\n    } else if (\n      listOrSingleItem instanceof InkListItem &&\n      typeof singleValue === \"number\"\n    ) {\n      this.value = new InkList({\n        Key: listOrSingleItem,\n        Value: singleValue,\n      });\n    }\n  }\n  public static RetainListOriginsForAssignment(\n    oldValue: InkObject | null,\n    newValue: InkObject\n  ) {\n    let oldList = asOrNull(oldValue, ListValue);\n    let newList = asOrNull(newValue, ListValue);\n\n    if (newList && newList.value === null)\n      return throwNullException(\"newList.value\");\n    if (oldList && oldList.value === null)\n      return throwNullException(\"oldList.value\");\n\n    // When assigning the empty list, try to retain any initial origin names\n    if (oldList && newList && newList.value!.Count == 0)\n      newList.value!.SetInitialOriginNames(oldList.value!.originNames);\n  }\n}\n\nexport enum ValueType {\n  Bool = -1,\n  Int = 0,\n  Float = 1,\n  List = 2,\n  String = 3,\n  DivertTarget = 4,\n  VariablePointer = 5,\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class SearchResult {\n  public obj: InkObject | null = null;\n  public approximate: boolean = false;\n\n  get correctObj() {\n    return this.approximate ? null : this.obj;\n  }\n\n  get container() {\n    return this.obj instanceof Container ? this.obj : null;\n  }\n\n  public copy() {\n    let searchResult = new SearchResult();\n    searchResult.obj = this.obj;\n    searchResult.approximate = this.approximate;\n\n    return searchResult;\n  }\n}\n","import { StringValue } from \"./Value\";\nimport { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { INamedContent } from \"./INamedContent\";\nimport { InkObject } from \"./Object\";\nimport { SearchResult } from \"./SearchResult\";\nimport { Path } from \"./Path\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { asINamedContentOrNull, asOrNull, asOrThrows } from \"./TypeAssertion\";\n\nexport class Container extends InkObject implements INamedContent {\n  public name: string | null = null;\n\n  public _content: InkObject[] = [];\n  public namedContent: Map<string, INamedContent> = new Map();\n\n  public visitsShouldBeCounted: boolean = false;\n  public turnIndexShouldBeCounted: boolean = false;\n  public countingAtStartOnly: boolean = false;\n\n  public _pathToFirstLeafContent: Path | null = null;\n\n  get hasValidName() {\n    return this.name != null && this.name.length > 0;\n  }\n  get content() {\n    return this._content;\n  }\n  set content(value: InkObject[]) {\n    this.AddContent(value);\n  }\n  get namedOnlyContent() {\n    let namedOnlyContentDict: Map<string, InkObject> | null = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      let inkObject = asOrThrows(value, InkObject);\n      namedOnlyContentDict.set(key, inkObject);\n    }\n\n    for (let c of this.content) {\n      let named = asINamedContentOrNull(c);\n      if (named != null && named.hasValidName) {\n        namedOnlyContentDict.delete(named.name!);\n      }\n    }\n\n    if (namedOnlyContentDict.size == 0) namedOnlyContentDict = null;\n\n    return namedOnlyContentDict;\n  }\n  set namedOnlyContent(value: Map<string, InkObject> | null) {\n    let existingNamedOnly = this.namedOnlyContent;\n    if (existingNamedOnly != null) {\n      for (let [key] of existingNamedOnly) {\n        this.namedContent.delete(key);\n      }\n    }\n\n    if (value == null) return;\n\n    for (let [, val] of value) {\n      let named = asINamedContentOrNull(val);\n      if (named != null) this.AddToNamedContentOnly(named);\n    }\n  }\n  get countFlags(): number {\n    let flags: Container.CountFlags = 0;\n    if (this.visitsShouldBeCounted) flags |= Container.CountFlags.Visits;\n    if (this.turnIndexShouldBeCounted) flags |= Container.CountFlags.Turns;\n    if (this.countingAtStartOnly) flags |= Container.CountFlags.CountStartOnly;\n\n    if (flags == Container.CountFlags.CountStartOnly) {\n      flags = 0;\n    }\n\n    return flags;\n  }\n  set countFlags(value: number) {\n    let flag: Container.CountFlags = value;\n    if ((flag & Container.CountFlags.Visits) > 0)\n      this.visitsShouldBeCounted = true;\n    if ((flag & Container.CountFlags.Turns) > 0)\n      this.turnIndexShouldBeCounted = true;\n    if ((flag & Container.CountFlags.CountStartOnly) > 0)\n      this.countingAtStartOnly = true;\n  }\n  get pathToFirstLeafContent() {\n    if (this._pathToFirstLeafContent == null)\n      this._pathToFirstLeafContent = this.path.PathByAppendingPath(\n        this.internalPathToFirstLeafContent\n      );\n\n    return this._pathToFirstLeafContent;\n  }\n  get internalPathToFirstLeafContent() {\n    let components: Path.Component[] = [];\n    let container: Container = this;\n    while (container instanceof Container) {\n      if (container.content.length > 0) {\n        components.push(new Path.Component(0));\n        container = container.content[0] as Container;\n      }\n    }\n    return new Path(components);\n  }\n\n  public AddContent(contentObjOrList: InkObject | InkObject[]) {\n    if (contentObjOrList instanceof Array) {\n      let contentList = contentObjOrList as InkObject[];\n\n      for (let c of contentList) {\n        this.AddContent(c);\n      }\n    } else {\n      let contentObj = contentObjOrList as InkObject;\n\n      this._content.push(contentObj);\n\n      if (contentObj.parent) {\n        throw new Error(\"content is already in \" + contentObj.parent);\n      }\n\n      contentObj.parent = this;\n\n      this.TryAddNamedContent(contentObj);\n    }\n  }\n  public TryAddNamedContent(contentObj: InkObject) {\n    let namedContentObj = asINamedContentOrNull(contentObj);\n    if (namedContentObj != null && namedContentObj.hasValidName) {\n      this.AddToNamedContentOnly(namedContentObj);\n    }\n  }\n  public AddToNamedContentOnly(namedContentObj: INamedContent) {\n    Debug.AssertType(\n      namedContentObj,\n      InkObject,\n      \"Can only add Runtime.Objects to a Runtime.Container\"\n    );\n    let runtimeObj = asOrThrows(namedContentObj, InkObject);\n    runtimeObj.parent = this;\n\n    if (namedContentObj.name === null)\n      return throwNullException(\"namedContentObj.name\");\n    this.namedContent.set(namedContentObj.name!, namedContentObj);\n  }\n  public ContentAtPath(\n    path: Path,\n    partialPathStart: number = 0,\n    partialPathLength: number = -1\n  ) {\n    if (partialPathLength == -1) partialPathLength = path.length;\n\n    let result = new SearchResult();\n    result.approximate = false;\n\n    let currentContainer: Container | null = this;\n    let currentObj: InkObject = this;\n\n    for (let i = partialPathStart; i < partialPathLength; ++i) {\n      let comp = path.GetComponent(i);\n      if (currentContainer == null) {\n        result.approximate = true;\n        break;\n      }\n\n      let foundObj: InkObject | null =\n        currentContainer.ContentWithPathComponent(comp);\n\n      if (foundObj == null) {\n        result.approximate = true;\n        break;\n      }\n\n      currentObj = foundObj;\n      currentContainer = asOrNull(foundObj, Container);\n    }\n\n    result.obj = currentObj;\n\n    return result;\n  }\n  public InsertContent(contentObj: InkObject, index: number) {\n    this.content.splice(index, 0, contentObj);\n\n    if (contentObj.parent) {\n      throw new Error(\"content is already in \" + contentObj.parent);\n    }\n\n    contentObj.parent = this;\n\n    this.TryAddNamedContent(contentObj);\n  }\n  public AddContentsOfContainer(otherContainer: Container) {\n    this.content.push(...otherContainer.content);\n\n    for (let obj of otherContainer.content) {\n      obj.parent = this;\n      this.TryAddNamedContent(obj);\n    }\n  }\n  public ContentWithPathComponent(component: Path.Component): InkObject | null {\n    if (component.isIndex) {\n      if (component.index >= 0 && component.index < this.content.length) {\n        return this.content[component.index];\n      } else {\n        return null;\n      }\n    } else if (component.isParent) {\n      return this.parent;\n    } else {\n      if (component.name === null) {\n        return throwNullException(\"component.name\");\n      }\n      let foundContent = tryGetValueFromMap(\n        this.namedContent,\n        component.name,\n        null\n      );\n      if (foundContent.exists) {\n        return asOrThrows(foundContent.result, InkObject);\n      } else {\n        return null;\n      }\n    }\n  }\n  public BuildStringOfHierarchy(): string;\n  public BuildStringOfHierarchy(\n    sb: StringBuilder,\n    indentation: number,\n    pointedObj: InkObject | null\n  ): string;\n  public BuildStringOfHierarchy() {\n    let sb: StringBuilder;\n    if (arguments.length == 0) {\n      sb = new StringBuilder();\n      this.BuildStringOfHierarchy(sb, 0, null);\n      return sb.toString();\n    }\n\n    sb = arguments[0] as StringBuilder;\n    let indentation = arguments[1] as number;\n    let pointedObj = arguments[2] as InkObject | null;\n\n    function appendIndentation() {\n      const spacesPerIndent = 4; // Truly const in the original code\n      for (let i = 0; i < spacesPerIndent * indentation; ++i) {\n        sb.Append(\" \");\n      }\n    }\n\n    appendIndentation();\n    sb.Append(\"[\");\n\n    if (this.hasValidName) {\n      sb.AppendFormat(\" ({0})\", this.name);\n    }\n\n    if (this == pointedObj) {\n      sb.Append(\"  <---\");\n    }\n\n    sb.AppendLine();\n\n    indentation++;\n\n    for (let i = 0; i < this.content.length; ++i) {\n      let obj = this.content[i];\n\n      if (obj instanceof Container) {\n        let container = obj as Container;\n\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n      } else {\n        appendIndentation();\n        if (obj instanceof StringValue) {\n          sb.Append('\"');\n          sb.Append(obj.toString().replace(\"\\n\", \"\\\\n\"));\n          sb.Append('\"');\n        } else {\n          sb.Append(obj.toString());\n        }\n      }\n\n      if (i != this.content.length - 1) {\n        sb.Append(\",\");\n      }\n\n      if (!(obj instanceof Container) && obj == pointedObj) {\n        sb.Append(\"  <---\");\n      }\n\n      sb.AppendLine();\n    }\n\n    let onlyNamed: Map<string, INamedContent> = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      if (this.content.indexOf(asOrThrows(value, InkObject)) >= 0) {\n        continue;\n      } else {\n        onlyNamed.set(key, value);\n      }\n    }\n\n    if (onlyNamed.size > 0) {\n      appendIndentation();\n      sb.AppendLine(\"-- named: --\");\n\n      for (let [, value] of onlyNamed) {\n        Debug.AssertType(\n          value,\n          Container,\n          \"Can only print out named Containers\"\n        );\n        let container = value as Container;\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n        sb.AppendLine();\n      }\n    }\n\n    indentation--;\n\n    appendIndentation();\n    sb.Append(\"]\");\n  }\n}\n\nexport namespace Container {\n  export enum CountFlags {\n    Visits = 1,\n    Turns = 2,\n    CountStartOnly = 4,\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class Glue extends InkObject {\n  public toString() {\n    return \"Glue\";\n  }\n}\n","export enum PushPopType {\n  Tunnel = 0,\n  Function = 1,\n  FunctionEvaluationFromGame = 2,\n}\n","import { InkObject } from \"./Object\";\n\nexport class ControlCommand extends InkObject {\n  private _commandType: ControlCommand.CommandType;\n\n  get commandType(): ControlCommand.CommandType {\n    return this._commandType;\n  }\n\n  constructor(\n    commandType: ControlCommand.CommandType = ControlCommand.CommandType.NotSet\n  ) {\n    super();\n    this._commandType = commandType;\n  }\n\n  public Copy() {\n    return new ControlCommand(this.commandType);\n  }\n  public static EvalStart() {\n    return new ControlCommand(ControlCommand.CommandType.EvalStart);\n  }\n  public static EvalOutput() {\n    return new ControlCommand(ControlCommand.CommandType.EvalOutput);\n  }\n  public static EvalEnd() {\n    return new ControlCommand(ControlCommand.CommandType.EvalEnd);\n  }\n  public static Duplicate() {\n    return new ControlCommand(ControlCommand.CommandType.Duplicate);\n  }\n  public static PopEvaluatedValue() {\n    return new ControlCommand(ControlCommand.CommandType.PopEvaluatedValue);\n  }\n  public static PopFunction() {\n    return new ControlCommand(ControlCommand.CommandType.PopFunction);\n  }\n  public static PopTunnel() {\n    return new ControlCommand(ControlCommand.CommandType.PopTunnel);\n  }\n  public static BeginString() {\n    return new ControlCommand(ControlCommand.CommandType.BeginString);\n  }\n  public static EndString() {\n    return new ControlCommand(ControlCommand.CommandType.EndString);\n  }\n  public static NoOp() {\n    return new ControlCommand(ControlCommand.CommandType.NoOp);\n  }\n  public static ChoiceCount() {\n    return new ControlCommand(ControlCommand.CommandType.ChoiceCount);\n  }\n  public static Turns() {\n    return new ControlCommand(ControlCommand.CommandType.Turns);\n  }\n  public static TurnsSince() {\n    return new ControlCommand(ControlCommand.CommandType.TurnsSince);\n  }\n  public static ReadCount() {\n    return new ControlCommand(ControlCommand.CommandType.ReadCount);\n  }\n  public static Random() {\n    return new ControlCommand(ControlCommand.CommandType.Random);\n  }\n  public static SeedRandom() {\n    return new ControlCommand(ControlCommand.CommandType.SeedRandom);\n  }\n  public static VisitIndex() {\n    return new ControlCommand(ControlCommand.CommandType.VisitIndex);\n  }\n  public static SequenceShuffleIndex() {\n    return new ControlCommand(ControlCommand.CommandType.SequenceShuffleIndex);\n  }\n  public static StartThread() {\n    return new ControlCommand(ControlCommand.CommandType.StartThread);\n  }\n  public static Done() {\n    return new ControlCommand(ControlCommand.CommandType.Done);\n  }\n  public static End() {\n    return new ControlCommand(ControlCommand.CommandType.End);\n  }\n  public static ListFromInt() {\n    return new ControlCommand(ControlCommand.CommandType.ListFromInt);\n  }\n  public static ListRange() {\n    return new ControlCommand(ControlCommand.CommandType.ListRange);\n  }\n  public static ListRandom() {\n    return new ControlCommand(ControlCommand.CommandType.ListRandom);\n  }\n  public static BeginTag() {\n    return new ControlCommand(ControlCommand.CommandType.BeginTag);\n  }\n  public static EndTag() {\n    return new ControlCommand(ControlCommand.CommandType.EndTag);\n  }\n  public toString() {\n    return this.commandType.toString();\n  }\n}\n\nexport namespace ControlCommand {\n  export enum CommandType {\n    NotSet = -1,\n    EvalStart, // 0\n    EvalOutput, // 1\n    EvalEnd, // 2\n    Duplicate, // 3\n    PopEvaluatedValue, // 4\n    PopFunction, // 5\n    PopTunnel, // 6\n    BeginString, // 7\n    EndString, // 8\n    NoOp, // 9\n    ChoiceCount, // 10\n    Turns, // 11\n    TurnsSince, // 12\n    ReadCount, // 13\n    Random, // 14\n    SeedRandom, // 15\n    VisitIndex, // 16\n    SequenceShuffleIndex, // 17\n    StartThread, // 18\n    Done, // 19\n    End, // 20\n    ListFromInt, // 21\n    ListRange, // 22\n    ListRandom, // 23\n    BeginTag, // 24\n    EndTag, // 25\n\n    TOTAL_VALUES,\n  }\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\n\nexport class Pointer {\n  public container: Container | null = null;\n  public index: number = -1;\n\n  constructor();\n  constructor(container: Container | null, index: number);\n  constructor() {\n    if (arguments.length === 2) {\n      this.container = arguments[0];\n      this.index = arguments[1];\n    }\n  }\n\n  public Resolve(): InkObject | null {\n    if (this.index < 0) return this.container;\n    if (this.container == null) return null;\n    if (this.container.content.length == 0) return this.container;\n    if (this.index >= this.container.content.length) return null;\n\n    return this.container.content[this.index];\n  }\n\n  get isNull(): boolean {\n    return this.container == null;\n  }\n\n  get path(): Path | null {\n    if (this.isNull) return null;\n\n    if (this.index >= 0)\n      return this.container!.path.PathByAppendingComponent(\n        new Path.Component(this.index)\n      );\n    else return this.container!.path;\n  }\n\n  public toString(): string {\n    if (!this.container) return \"Ink Pointer (null)\";\n\n    return (\n      \"Ink Pointer -> \" +\n      this.container.path.toString() +\n      \" -- index \" +\n      this.index\n    );\n  }\n\n  // This method does not exist in the original C# code, but is here to maintain the\n  // value semantics of Pointer.\n  public copy(): Pointer {\n    return new Pointer(this.container, this.index);\n  }\n\n  public static StartOf(container: Container | null): Pointer {\n    return new Pointer(container, 0);\n  }\n\n  public static get Null(): Pointer {\n    return new Pointer(null, -1);\n  }\n}\n","import { Path } from \"./Path\";\nimport { PushPopType } from \"./PushPop\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { InkObject } from \"./Object\";\nimport { Pointer } from \"./Pointer\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Divert extends InkObject {\n  get targetPath() {\n    if (this._targetPath != null && this._targetPath.isRelative) {\n      let targetObj = this.targetPointer.Resolve();\n      if (targetObj) {\n        this._targetPath = targetObj.path;\n      }\n    }\n\n    return this._targetPath;\n  }\n  set targetPath(value: Path | null) {\n    this._targetPath = value;\n    this._targetPointer = Pointer.Null;\n  }\n\n  public _targetPath: Path | null = null;\n\n  get targetPointer() {\n    if (this._targetPointer.isNull) {\n      let targetObj = this.ResolvePath(this._targetPath).obj;\n\n      if (this._targetPath === null)\n        return throwNullException(\"this._targetPath\");\n      if (this._targetPath.lastComponent === null)\n        return throwNullException(\"this._targetPath.lastComponent\");\n\n      if (this._targetPath.lastComponent.isIndex) {\n        if (targetObj === null) return throwNullException(\"targetObj\");\n        this._targetPointer.container =\n          targetObj.parent instanceof Container ? targetObj.parent : null;\n        this._targetPointer.index = this._targetPath.lastComponent.index;\n      } else {\n        this._targetPointer = Pointer.StartOf(\n          targetObj instanceof Container ? targetObj : null\n        );\n      }\n    }\n\n    return this._targetPointer.copy();\n  }\n\n  public _targetPointer: Pointer = Pointer.Null;\n\n  get targetPathString() {\n    if (this.targetPath == null) return null;\n\n    return this.CompactPathString(this.targetPath);\n  }\n  set targetPathString(value: string | null) {\n    if (value == null) {\n      this.targetPath = null;\n    } else {\n      this.targetPath = new Path(value);\n    }\n  }\n\n  public variableDivertName: string | null = null;\n  get hasVariableTarget() {\n    return this.variableDivertName != null;\n  }\n\n  public pushesToStack: boolean = false;\n  public stackPushType: PushPopType = 0;\n\n  public isExternal: boolean = false;\n  public externalArgs: number = 0;\n\n  public isConditional: boolean = false;\n\n  constructor(stackPushType?: PushPopType) {\n    super();\n    this.pushesToStack = false;\n\n    if (typeof stackPushType !== \"undefined\") {\n      this.pushesToStack = true;\n      this.stackPushType = stackPushType;\n    }\n  }\n\n  public Equals(obj: Divert | null) {\n    let otherDivert = obj;\n    if (otherDivert instanceof Divert) {\n      if (this.hasVariableTarget == otherDivert.hasVariableTarget) {\n        if (this.hasVariableTarget) {\n          return this.variableDivertName == otherDivert.variableDivertName;\n        } else {\n          if (this.targetPath === null)\n            return throwNullException(\"this.targetPath\");\n          return this.targetPath.Equals(otherDivert.targetPath);\n        }\n      }\n    }\n    return false;\n  }\n\n  public toString() {\n    if (this.hasVariableTarget) {\n      return \"Divert(variable: \" + this.variableDivertName + \")\";\n    } else if (this.targetPath == null) {\n      return \"Divert(null)\";\n    } else {\n      let sb = new StringBuilder();\n\n      let targetStr = this.targetPath.toString();\n      // int? targetLineNum = DebugLineNumberOfPath (targetPath);\n      let targetLineNum = null;\n      if (targetLineNum != null) {\n        targetStr = \"line \" + targetLineNum;\n      }\n\n      sb.Append(\"Divert\");\n\n      if (this.isConditional) sb.Append(\"?\");\n\n      if (this.pushesToStack) {\n        if (this.stackPushType == PushPopType.Function) {\n          sb.Append(\" function\");\n        } else {\n          sb.Append(\" tunnel\");\n        }\n      }\n\n      sb.Append(\" -> \");\n      sb.Append(this.targetPathString);\n\n      sb.Append(\" (\");\n      sb.Append(targetStr);\n      sb.Append(\")\");\n\n      return sb.toString();\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ChoicePoint extends InkObject {\n  public _pathOnChoice: Path | null = null;\n  public hasCondition: boolean = false;\n  public hasStartContent: boolean = false;\n  public hasChoiceOnlyContent: boolean = false;\n  public isInvisibleDefault: boolean = false;\n  public onceOnly: boolean = true;\n\n  constructor(onceOnly: boolean = true) {\n    super();\n    this.onceOnly = onceOnly;\n  }\n  get pathOnChoice(): Path | null {\n    if (this._pathOnChoice != null && this._pathOnChoice.isRelative) {\n      let choiceTargetObj = this.choiceTarget;\n      if (choiceTargetObj) {\n        this._pathOnChoice = choiceTargetObj.path;\n      }\n    }\n    return this._pathOnChoice;\n  }\n  set pathOnChoice(value: Path | null) {\n    this._pathOnChoice = value;\n  }\n  get choiceTarget(): Container | null {\n    if (this._pathOnChoice === null)\n      return throwNullException(\"ChoicePoint._pathOnChoice\");\n    return this.ResolvePath(this._pathOnChoice).container;\n  }\n  get pathStringOnChoice(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    return this.CompactPathString(this.pathOnChoice);\n  }\n  set pathStringOnChoice(value: string) {\n    this.pathOnChoice = new Path(value);\n  }\n  get flags(): number {\n    let flags = 0;\n    if (this.hasCondition) flags |= 1;\n    if (this.hasStartContent) flags |= 2;\n    if (this.hasChoiceOnlyContent) flags |= 4;\n    if (this.isInvisibleDefault) flags |= 8;\n    if (this.onceOnly) flags |= 16;\n    return flags;\n  }\n  set flags(value: number) {\n    this.hasCondition = (value & 1) > 0;\n    this.hasStartContent = (value & 2) > 0;\n    this.hasChoiceOnlyContent = (value & 4) > 0;\n    this.isInvisibleDefault = (value & 8) > 0;\n    this.onceOnly = (value & 16) > 0;\n  }\n  public toString(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    // int? targetLineNum = DebugLineNumberOfPath (pathOnChoice);\n    let targetLineNum = null;\n    let targetString = this.pathOnChoice.toString();\n\n    if (targetLineNum != null) {\n      targetString = \" line \" + targetLineNum + \"(\" + targetString + \")\";\n    }\n\n    return \"Choice: -> \" + targetString;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\n\nexport class VariableReference extends InkObject {\n  public name: string | null;\n  public pathForCount: Path | null = null;\n\n  get containerForCount() {\n    if (this.pathForCount === null) return null;\n    return this.ResolvePath(this.pathForCount).container;\n  }\n  get pathStringForCount() {\n    if (this.pathForCount === null) return null;\n\n    return this.CompactPathString(this.pathForCount);\n  }\n  set pathStringForCount(value: string | null) {\n    if (value === null) this.pathForCount = null;\n    else this.pathForCount = new Path(value);\n  }\n\n  constructor(name: string | null = null) {\n    super();\n    this.name = name;\n  }\n\n  public toString() {\n    if (this.name != null) {\n      return \"var(\" + this.name + \")\";\n    } else {\n      let pathStr = this.pathStringForCount;\n      return \"read_count(\" + pathStr + \")\";\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class VariableAssignment extends InkObject {\n  public readonly variableName: string | null;\n  public readonly isNewDeclaration: boolean;\n  public isGlobal: boolean;\n\n  constructor(variableName: string | null, isNewDeclaration: boolean) {\n    super();\n    this.variableName = variableName || null;\n    this.isNewDeclaration = !!isNewDeclaration;\n    this.isGlobal = false;\n  }\n\n  public toString(): string {\n    return \"VarAssign to \" + this.variableName;\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class Void extends InkObject {}\n","import { Value, ValueType, IntValue, ListValue, BoolValue } from \"./Value\";\nimport { StoryException } from \"./StoryException\";\nimport { Void } from \"./Void\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull, asOrThrows, asBooleanOrThrows } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\n\ntype BinaryOp<T> = (left: T, right: T) => any;\ntype UnaryOp<T> = (val: T) => any;\n\nexport class NativeFunctionCall extends InkObject {\n  public static readonly Add: string = \"+\";\n  public static readonly Subtract: string = \"-\";\n  public static readonly Divide: string = \"/\";\n  public static readonly Multiply: string = \"*\";\n  public static readonly Mod: string = \"%\";\n  public static readonly Negate: string = \"_\";\n  public static readonly Equal: string = \"==\";\n  public static readonly Greater: string = \">\";\n  public static readonly Less: string = \"<\";\n  public static readonly GreaterThanOrEquals: string = \">=\";\n  public static readonly LessThanOrEquals: string = \"<=\";\n  public static readonly NotEquals: string = \"!=\";\n  public static readonly Not: string = \"!\";\n  public static readonly And: string = \"&&\";\n  public static readonly Or: string = \"||\";\n  public static readonly Min: string = \"MIN\";\n  public static readonly Max: string = \"MAX\";\n  public static readonly Pow: string = \"POW\";\n  public static readonly Floor: string = \"FLOOR\";\n  public static readonly Ceiling: string = \"CEILING\";\n  public static readonly Int: string = \"INT\";\n  public static readonly Float: string = \"FLOAT\";\n  public static readonly Has: string = \"?\";\n  public static readonly Hasnt: string = \"!?\";\n  public static readonly Intersect: string = \"^\";\n  public static readonly ListMin: string = \"LIST_MIN\";\n  public static readonly ListMax: string = \"LIST_MAX\";\n  public static readonly All: string = \"LIST_ALL\";\n  public static readonly Count: string = \"LIST_COUNT\";\n  public static readonly ValueOfList: string = \"LIST_VALUE\";\n  public static readonly Invert: string = \"LIST_INVERT\";\n\n  public static CallWithName(functionName: string) {\n    return new NativeFunctionCall(functionName);\n  }\n\n  public static CallExistsWithName(functionName: string) {\n    this.GenerateNativeFunctionsIfNecessary();\n    return this._nativeFunctions!.get(functionName);\n  }\n\n  get name() {\n    if (this._name === null)\n      return throwNullException(\"NativeFunctionCall._name\");\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n    if (!this._isPrototype) {\n      if (NativeFunctionCall._nativeFunctions === null)\n        throwNullException(\"NativeFunctionCall._nativeFunctions\");\n      else\n        this._prototype =\n          NativeFunctionCall._nativeFunctions.get(this._name) || null;\n    }\n  }\n  public _name: string | null = null;\n\n  get numberOfParameters() {\n    if (this._prototype) {\n      return this._prototype.numberOfParameters;\n    } else {\n      return this._numberOfParameters;\n    }\n  }\n  set numberOfParameters(value: number) {\n    this._numberOfParameters = value;\n  }\n  public _numberOfParameters: number = 0;\n\n  public Call(parameters: InkObject[]): InkObject | null {\n    if (this._prototype) {\n      return this._prototype.Call(parameters);\n    }\n\n    if (this.numberOfParameters != parameters.length) {\n      throw new Error(\"Unexpected number of parameters\");\n    }\n\n    let hasList = false;\n    for (let p of parameters) {\n      if (p instanceof Void)\n        throw new StoryException(\n          'Attempting to perform operation on a void value. Did you forget to \"return\" a value from a function you called here?'\n        );\n      if (p instanceof ListValue) hasList = true;\n    }\n\n    if (parameters.length == 2 && hasList) {\n      return this.CallBinaryListOperation(parameters);\n    }\n\n    let coercedParams = this.CoerceValuesToSingleType(parameters);\n    let coercedType = coercedParams[0].valueType;\n\n    if (coercedType == ValueType.Int) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.Float) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.String) {\n      return this.CallType<string>(coercedParams);\n    } else if (coercedType == ValueType.DivertTarget) {\n      return this.CallType<Path>(coercedParams);\n    } else if (coercedType == ValueType.List) {\n      return this.CallType<InkList>(coercedParams);\n    }\n\n    return null;\n  }\n\n  public CallType<T>(parametersOfSingleType: Array<Value<T>>) {\n    let param1 = asOrThrows(parametersOfSingleType[0], Value);\n    let valType = param1.valueType;\n\n    let val1 = param1 as Value<T>;\n\n    let paramCount = parametersOfSingleType.length;\n\n    if (paramCount == 2 || paramCount == 1) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let opForTypeObj = this._operationFuncs.get(valType);\n      if (!opForTypeObj) {\n        const key = ValueType[valType];\n        throw new StoryException(\n          \"Cannot perform operation \" + this.name + \" on \" + key\n        );\n      }\n\n      if (paramCount == 2) {\n        let param2 = asOrThrows(parametersOfSingleType[1], Value);\n\n        let val2 = param2 as Value<T>;\n\n        let opForType = opForTypeObj as BinaryOp<T>;\n\n        if (val1.value === null || val2.value === null)\n          return throwNullException(\"NativeFunctionCall.Call BinaryOp values\");\n        let resultVal = opForType(val1.value, val2.value);\n\n        return Value.Create(resultVal);\n      } else {\n        let opForType = opForTypeObj as UnaryOp<T>;\n\n        if (val1.value === null)\n          return throwNullException(\"NativeFunctionCall.Call UnaryOp value\");\n        let resultVal = opForType(val1.value);\n\n        // This code is different from upstream. Since JavaScript treats\n        // integers and floats as the same numbers, it's impossible\n        // to force an number to be either an integer or a float.\n        //\n        // It can be useful to force a specific number type\n        // (especially for divisions), so the result of INT() & FLOAT()\n        // is coerced to the the proper value type.\n        //\n        // Note that we also force all other unary operation to\n        // return the same value type, although this is only\n        // meaningful for numbers. See `Value.Create`.\n        if (this.name === NativeFunctionCall.Int) {\n          return Value.Create(resultVal, ValueType.Int);\n        } else if (this.name === NativeFunctionCall.Float) {\n          return Value.Create(resultVal, ValueType.Float);\n        } else {\n          return Value.Create(resultVal, param1.valueType);\n        }\n      }\n    } else {\n      throw new Error(\n        \"Unexpected number of parameters to NativeFunctionCall: \" +\n          parametersOfSingleType.length\n      );\n    }\n  }\n\n  public CallBinaryListOperation(parameters: InkObject[]) {\n    if (\n      (this.name == \"+\" || this.name == \"-\") &&\n      parameters[0] instanceof ListValue &&\n      parameters[1] instanceof IntValue\n    )\n      return this.CallListIncrementOperation(parameters);\n\n    let v1 = asOrThrows(parameters[0], Value);\n    let v2 = asOrThrows(parameters[1], Value);\n\n    if (\n      (this.name == \"&&\" || this.name == \"||\") &&\n      (v1.valueType != ValueType.List || v2.valueType != ValueType.List)\n    ) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let op = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n      if (op === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallBinaryListOperation op\"\n        );\n      let result = asBooleanOrThrows(\n        op(v1.isTruthy ? 1 : 0, v2.isTruthy ? 1 : 0)\n      );\n      return new BoolValue(result);\n    }\n\n    if (v1.valueType == ValueType.List && v2.valueType == ValueType.List)\n      return this.CallType<InkList>([v1, v2]);\n\n    throw new StoryException(\n      \"Can not call use \" +\n        this.name +\n        \" operation on \" +\n        ValueType[v1.valueType] +\n        \" and \" +\n        ValueType[v2.valueType]\n    );\n  }\n\n  public CallListIncrementOperation(listIntParams: InkObject[]) {\n    let listVal = asOrThrows(listIntParams[0], ListValue);\n    let intVal = asOrThrows(listIntParams[1], IntValue);\n\n    let resultInkList = new InkList();\n\n    if (listVal.value === null)\n      return throwNullException(\n        \"NativeFunctionCall.CallListIncrementOperation listVal.value\"\n      );\n    for (let [listItemKey, listItemValue] of listVal.value) {\n      let listItem = InkListItem.fromSerializedKey(listItemKey);\n\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let intOp = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n\n      if (intVal.value === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation intVal.value\"\n        );\n      let targetInt = intOp(listItemValue, intVal.value);\n\n      let itemOrigin = null;\n      if (listVal.value.origins === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation listVal.value.origins\"\n        );\n      for (let origin of listVal.value.origins) {\n        if (origin.name == listItem.originName) {\n          itemOrigin = origin;\n          break;\n        }\n      }\n      if (itemOrigin != null) {\n        let incrementedItem = itemOrigin.TryGetItemWithValue(\n          targetInt,\n          InkListItem.Null\n        );\n        if (incrementedItem.exists)\n          resultInkList.Add(incrementedItem.result, targetInt);\n      }\n    }\n\n    return new ListValue(resultInkList);\n  }\n\n  public CoerceValuesToSingleType(parametersIn: InkObject[]) {\n    let valType = ValueType.Int;\n\n    let specialCaseList: null | ListValue = null;\n\n    for (let obj of parametersIn) {\n      let val = asOrThrows(obj, Value);\n      if (val.valueType > valType) {\n        valType = val.valueType;\n      }\n\n      if (val.valueType == ValueType.List) {\n        specialCaseList = asOrNull(val, ListValue);\n      }\n    }\n\n    let parametersOut = [];\n\n    if (ValueType[valType] == ValueType[ValueType.List]) {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        if (val.valueType == ValueType.List) {\n          parametersOut.push(val);\n        } else if (val.valueType == ValueType.Int) {\n          let intVal = parseInt(val.valueObject);\n\n          specialCaseList = asOrThrows(specialCaseList, ListValue);\n          if (specialCaseList.value === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType specialCaseList.value\"\n            );\n          let list = specialCaseList.value.originOfMaxItem;\n\n          if (list === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType list\"\n            );\n          let item = list.TryGetItemWithValue(intVal, InkListItem.Null);\n          if (item.exists) {\n            let castedValue = new ListValue(item.result, intVal);\n            parametersOut.push(castedValue);\n          } else\n            throw new StoryException(\n              \"Could not find List item with the value \" +\n                intVal +\n                \" in \" +\n                list.name\n            );\n        } else {\n          const key = ValueType[val.valueType];\n          throw new StoryException(\n            \"Cannot mix Lists and \" + key + \" values in this operation\"\n          );\n        }\n      }\n    } else {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        let castedValue = val.Cast(valType);\n        parametersOut.push(castedValue);\n      }\n    }\n\n    return parametersOut;\n  }\n\n  constructor(name: string);\n  constructor(name: string, numberOfParameters: number);\n  constructor();\n  constructor() {\n    super();\n\n    if (arguments.length === 0) {\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n    } else if (arguments.length === 1) {\n      let name = arguments[0];\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n      this.name = name;\n    } else if (arguments.length === 2) {\n      let name = arguments[0];\n      let numberOfParameters = arguments[1];\n\n      this._isPrototype = true;\n      this.name = name;\n      this.numberOfParameters = numberOfParameters;\n    }\n  }\n\n  public static Identity<T>(t: T): any {\n    return t;\n  }\n\n  public static GenerateNativeFunctionsIfNecessary() {\n    if (this._nativeFunctions == null) {\n      this._nativeFunctions = new Map();\n\n      // Int operations\n      this.AddIntBinaryOp(this.Add, (x, y) => x + y);\n      this.AddIntBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddIntBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddIntBinaryOp(this.Divide, (x, y) => Math.floor(x / y));\n      this.AddIntBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddIntUnaryOp(this.Negate, (x) => -x);\n\n      this.AddIntBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddIntBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddIntBinaryOp(this.Less, (x, y) => x < y);\n      this.AddIntBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddIntBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddIntBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddIntUnaryOp(this.Not, (x) => x == 0);\n\n      this.AddIntBinaryOp(this.And, (x, y) => x != 0 && y != 0);\n      this.AddIntBinaryOp(this.Or, (x, y) => x != 0 || y != 0);\n\n      this.AddIntBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddIntBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddIntBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddIntUnaryOp(this.Floor, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Ceiling, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Int, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Float, (x) => x);\n\n      // Float operations\n      this.AddFloatBinaryOp(this.Add, (x, y) => x + y);\n      this.AddFloatBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddFloatBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddFloatBinaryOp(this.Divide, (x, y) => x / y);\n      this.AddFloatBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddFloatUnaryOp(this.Negate, (x) => -x);\n\n      this.AddFloatBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddFloatBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddFloatBinaryOp(this.Less, (x, y) => x < y);\n      this.AddFloatBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddFloatBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddFloatBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddFloatUnaryOp(this.Not, (x) => x == 0.0);\n\n      this.AddFloatBinaryOp(this.And, (x, y) => x != 0.0 && y != 0.0);\n      this.AddFloatBinaryOp(this.Or, (x, y) => x != 0.0 || y != 0.0);\n\n      this.AddFloatBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddFloatBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddFloatBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddFloatUnaryOp(this.Floor, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Ceiling, (x) => Math.ceil(x));\n      this.AddFloatUnaryOp(this.Int, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Float, NativeFunctionCall.Identity);\n\n      // String operations\n      this.AddStringBinaryOp(this.Add, (x, y) => x + y); // concat\n      this.AddStringBinaryOp(this.Equal, (x, y) => x === y);\n      this.AddStringBinaryOp(this.NotEquals, (x, y) => !(x === y));\n      this.AddStringBinaryOp(this.Has, (x, y) => x.includes(y));\n      this.AddStringBinaryOp(this.Hasnt, (x, y) => !x.includes(y));\n\n      this.AddListBinaryOp(this.Add, (x, y) => x.Union(y));\n      this.AddListBinaryOp(this.Subtract, (x, y) => x.Without(y));\n      this.AddListBinaryOp(this.Has, (x, y) => x.Contains(y));\n      this.AddListBinaryOp(this.Hasnt, (x, y) => !x.Contains(y));\n      this.AddListBinaryOp(this.Intersect, (x, y) => x.Intersect(y));\n\n      this.AddListBinaryOp(this.Equal, (x, y) => x.Equals(y));\n      this.AddListBinaryOp(this.Greater, (x, y) => x.GreaterThan(y));\n      this.AddListBinaryOp(this.Less, (x, y) => x.LessThan(y));\n      this.AddListBinaryOp(this.GreaterThanOrEquals, (x, y) =>\n        x.GreaterThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.LessThanOrEquals, (x, y) =>\n        x.LessThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.NotEquals, (x, y) => !x.Equals(y));\n\n      this.AddListBinaryOp(this.And, (x, y) => x.Count > 0 && y.Count > 0);\n      this.AddListBinaryOp(this.Or, (x, y) => x.Count > 0 || y.Count > 0);\n\n      this.AddListUnaryOp(this.Not, (x) => (x.Count == 0 ? 1 : 0));\n\n      this.AddListUnaryOp(this.Invert, (x) => x.inverse);\n      this.AddListUnaryOp(this.All, (x) => x.all);\n      this.AddListUnaryOp(this.ListMin, (x) => x.MinAsList());\n      this.AddListUnaryOp(this.ListMax, (x) => x.MaxAsList());\n      this.AddListUnaryOp(this.Count, (x) => x.Count);\n      this.AddListUnaryOp(this.ValueOfList, (x) => x.maxItem.Value);\n\n      let divertTargetsEqual = (d1: Path, d2: Path) => d1.Equals(d2);\n      let divertTargetsNotEqual = (d1: Path, d2: Path) => !d1.Equals(d2);\n      this.AddOpToNativeFunc(\n        this.Equal,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsEqual\n      );\n      this.AddOpToNativeFunc(\n        this.NotEquals,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsNotEqual\n      );\n    }\n  }\n\n  public AddOpFuncForType(\n    valType: ValueType,\n    op: UnaryOp<number | InkList> | BinaryOp<number | string | InkList | Path>\n  ): void {\n    if (this._operationFuncs == null) {\n      this._operationFuncs = new Map();\n    }\n\n    this._operationFuncs.set(valType, op);\n  }\n\n  public static AddOpToNativeFunc(\n    name: string,\n    args: number,\n    valType: ValueType,\n    op: UnaryOp<any> | BinaryOp<any>\n  ): void {\n    if (this._nativeFunctions === null)\n      return throwNullException(\"NativeFunctionCall._nativeFunctions\");\n    let nativeFunc = this._nativeFunctions.get(name);\n    if (!nativeFunc) {\n      nativeFunc = new NativeFunctionCall(name, args);\n      this._nativeFunctions.set(name, nativeFunc);\n    }\n\n    nativeFunc.AddOpFuncForType(valType, op);\n  }\n\n  public static AddIntBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Int, op);\n  }\n  public static AddIntUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Int, op);\n  }\n\n  public static AddFloatBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Float, op);\n  }\n  public static AddFloatUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Float, op);\n  }\n\n  public static AddStringBinaryOp(name: string, op: BinaryOp<string>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.String, op);\n  }\n\n  public static AddListBinaryOp(name: string, op: BinaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.List, op);\n  }\n  public static AddListUnaryOp(name: string, op: UnaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.List, op);\n  }\n\n  public toString() {\n    return 'Native \"' + this.name + '\"';\n  }\n\n  public _prototype: NativeFunctionCall | null = null;\n  public _isPrototype: boolean = false;\n  public _operationFuncs: Map<ValueType, BinaryOp<any> | UnaryOp<any>> | null =\n    null;\n  public static _nativeFunctions: Map<string, NativeFunctionCall> | null = null;\n}\n","import { InkObject } from \"./Object\";\n\n// New version of tags is dynamic - it constructs the tags\n// at runtime based on BeginTag and EndTag control commands.\n// Plain text that's in the output stream is turned into tags\n// when you do story.currentTags.\n// The only place this is used is when flattening tags down\n// to string in advance, during dynamic string generation if\n// there's a tag embedded in it. See how ControlCommand.EndString\n// is implemented in Story.cs for more details + comment\nexport class Tag extends InkObject {\n  public readonly text: string;\n\n  constructor(tagText: string) {\n    super();\n    this.text = tagText.toString() || \"\";\n  }\n\n  public toString(): string {\n    return \"# \" + this.text;\n  }\n}\n","import { Path } from \"./Path\";\nimport { CallStack } from \"./CallStack\";\nimport { throwNullException } from \"./NullException\";\nimport { InkObject } from \"./Object\";\n\nexport class Choice extends InkObject {\n  public text: string = \"\";\n  public index: number = 0;\n  public threadAtGeneration: CallStack.Thread | null = null;\n  public sourcePath: string = \"\";\n  public targetPath: Path | null = null;\n  public isInvisibleDefault: boolean = false;\n  public tags: string[] | null = null;\n  public originalThreadIndex: number = 0;\n\n  get pathStringOnChoice(): string {\n    if (this.targetPath === null)\n      return throwNullException(\"Choice.targetPath\");\n    return this.targetPath.toString();\n  }\n  set pathStringOnChoice(value: string) {\n    this.targetPath = new Path(value);\n  }\n}\n","import { InkListItem, SerializedInkListItem } from \"./InkList\";\nimport { TryGetResult } from \"./TryGetResult\";\n\nexport class ListDefinition {\n  public _name: string;\n  public _items: Map<SerializedInkListItem, number> | null;\n  public _itemNameToValues: Map<string, number>;\n\n  constructor(name: string, items: Map<string, number> | null) {\n    this._name = name || \"\";\n    this._items = null;\n    this._itemNameToValues = items || new Map();\n  }\n  get name() {\n    return this._name;\n  }\n  get items() {\n    if (this._items == null) {\n      this._items = new Map();\n      for (let [key, value] of this._itemNameToValues) {\n        let item = new InkListItem(this.name, key);\n        this._items.set(item.serialized(), value);\n      }\n    }\n\n    return this._items;\n  }\n\n  public ValueForItem(item: InkListItem) {\n    if (!item.itemName) return 0;\n\n    let intVal = this._itemNameToValues.get(item.itemName);\n    if (typeof intVal !== \"undefined\") return intVal;\n    else return 0;\n  }\n  public ContainsItem(item: InkListItem) {\n    if (!item.itemName) return false;\n    if (item.originName != this.name) return false;\n\n    return this._itemNameToValues.has(item.itemName);\n  }\n  public ContainsItemWithName(itemName: string) {\n    return this._itemNameToValues.has(itemName);\n  }\n  public TryGetItemWithValue(\n    val: number,\n    /* out */ item: InkListItem\n  ): TryGetResult<InkListItem> {\n    for (let [key, value] of this._itemNameToValues) {\n      if (value == val) {\n        item = new InkListItem(this.name, key);\n        return { result: item, exists: true };\n      }\n    }\n\n    item = InkListItem.Null;\n    return { result: item, exists: false };\n  }\n  public TryGetValueForItem(\n    item: InkListItem,\n    /* out */ intVal: number\n  ): TryGetResult<number> {\n    if (!item.itemName) return { result: 0, exists: false };\n    let value = this._itemNameToValues.get(item.itemName);\n\n    if (!value) return { result: 0, exists: false };\n    return { result: value, exists: true };\n  }\n}\n","import { InkListItem } from \"./InkList\";\nimport { ListValue } from \"./Value\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { TryGetResult } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ListDefinitionsOrigin {\n  protected _lists: Map<string, ListDefinition>;\n  protected _allUnambiguousListValueCache: Map<string, ListValue>;\n\n  constructor(lists: ListDefinition[]) {\n    this._lists = new Map();\n    this._allUnambiguousListValueCache = new Map();\n\n    for (let list of lists) {\n      this._lists.set(list.name, list);\n\n      for (let [key, val] of list.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        let listValue = new ListValue(item, val);\n\n        if (!item.itemName) {\n          throw new Error(\"item.itemName is null or undefined.\");\n        }\n\n        this._allUnambiguousListValueCache.set(item.itemName, listValue);\n        this._allUnambiguousListValueCache.set(item.fullName, listValue);\n      }\n    }\n  }\n  get lists(): ListDefinition[] {\n    let listOfLists: ListDefinition[] = [];\n\n    for (let [, value] of this._lists) {\n      listOfLists.push(value);\n    }\n\n    return listOfLists;\n  }\n  public TryListGetDefinition(\n    name: string | null,\n    /* out */ def: ListDefinition | null\n  ): TryGetResult<ListDefinition | null> {\n    if (name === null) {\n      return { result: def, exists: false };\n    }\n    // initially, this function returns a boolean and the second parameter is an out.\n    let definition = this._lists.get(name);\n    if (!definition) return { result: def, exists: false };\n\n    return { result: definition, exists: true };\n  }\n  public FindSingleItemListWithName(name: string | null) {\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let val = this._allUnambiguousListValueCache.get(name);\n\n    if (typeof val !== \"undefined\") {\n      return val;\n    }\n\n    return null;\n  }\n}\n","import { Container } from \"./Container\";\nimport {\n  Value,\n  IntValue,\n  FloatValue,\n  StringValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n  BoolValue,\n} from \"./Value\";\nimport { Glue } from \"./Glue\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { Divert } from \"./Divert\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { VariableReference } from \"./VariableReference\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { Path } from \"./Path\";\nimport { Choice } from \"./Choice\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { InkListItem, InkList } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class JsonSerialisation {\n  public static JArrayToRuntimeObjList(\n    jArray: any[],\n    skipLast: boolean = false\n  ) {\n    let count = jArray.length;\n    if (skipLast) count--;\n\n    let list: InkObject[] = [];\n\n    for (let i = 0; i < count; i++) {\n      let jTok = jArray[i];\n      let runtimeObj = this.JTokenToRuntimeObject(jTok);\n      if (runtimeObj === null) {\n        return throwNullException(\"runtimeObj\");\n      }\n      list.push(runtimeObj);\n    }\n\n    return list;\n  }\n\n  public static WriteDictionaryRuntimeObjs(\n    writer: SimpleJson.Writer,\n    dictionary: Map<string, InkObject>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dictionary) {\n      writer.WritePropertyStart(key);\n      this.WriteRuntimeObject(writer, value);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteListRuntimeObjs(\n    writer: SimpleJson.Writer,\n    list: InkObject[]\n  ) {\n    writer.WriteArrayStart();\n    for (let value of list) {\n      this.WriteRuntimeObject(writer, value);\n    }\n    writer.WriteArrayEnd();\n  }\n\n  public static WriteIntDictionary(\n    writer: SimpleJson.Writer,\n    dict: Map<string, number>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dict) {\n      writer.WriteIntProperty(key, value);\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteRuntimeObject(\n    writer: SimpleJson.Writer,\n    obj: InkObject\n  ): void {\n    let container = asOrNull(obj, Container);\n    if (container) {\n      this.WriteRuntimeContainer(writer, container);\n      return;\n    }\n\n    let divert = asOrNull(obj, Divert);\n    if (divert) {\n      let divTypeKey = \"->\";\n      if (divert.isExternal) {\n        divTypeKey = \"x()\";\n      } else if (divert.pushesToStack) {\n        if (divert.stackPushType == PushPopType.Function) {\n          divTypeKey = \"f()\";\n        } else if (divert.stackPushType == PushPopType.Tunnel) {\n          divTypeKey = \"->t->\";\n        }\n      }\n\n      let targetStr;\n      if (divert.hasVariableTarget) {\n        targetStr = divert.variableDivertName;\n      } else {\n        targetStr = divert.targetPathString;\n      }\n\n      writer.WriteObjectStart();\n      writer.WriteProperty(divTypeKey, targetStr);\n\n      if (divert.hasVariableTarget) {\n        writer.WriteProperty(\"var\", true);\n      }\n\n      if (divert.isConditional) {\n        writer.WriteProperty(\"c\", true);\n      }\n\n      if (divert.externalArgs > 0) {\n        writer.WriteIntProperty(\"exArgs\", divert.externalArgs);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choicePoint = asOrNull(obj, ChoicePoint);\n    if (choicePoint) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"*\", choicePoint.pathStringOnChoice);\n      writer.WriteIntProperty(\"flg\", choicePoint.flags);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let boolVal = asOrNull(obj, BoolValue);\n    if (boolVal) {\n      writer.WriteBool(boolVal.value);\n      return;\n    }\n\n    let intVal = asOrNull(obj, IntValue);\n    if (intVal) {\n      writer.WriteInt(intVal.value);\n      return;\n    }\n\n    let floatVal = asOrNull(obj, FloatValue);\n    if (floatVal) {\n      writer.WriteFloat(floatVal.value);\n      return;\n    }\n\n    let strVal = asOrNull(obj, StringValue);\n    if (strVal) {\n      if (strVal.isNewline) {\n        writer.Write(\"\\n\", false);\n      } else {\n        writer.WriteStringStart();\n        writer.WriteStringInner(\"^\");\n        writer.WriteStringInner(strVal.value);\n        writer.WriteStringEnd();\n      }\n      return;\n    }\n\n    let listVal = asOrNull(obj, ListValue);\n    if (listVal) {\n      this.WriteInkList(writer, listVal);\n      return;\n    }\n\n    let divTargetVal = asOrNull(obj, DivertTargetValue);\n    if (divTargetVal) {\n      writer.WriteObjectStart();\n      if (divTargetVal.value === null) {\n        return throwNullException(\"divTargetVal.value\");\n      }\n      writer.WriteProperty(\"^->\", divTargetVal.value.componentsString);\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let varPtrVal = asOrNull(obj, VariablePointerValue);\n    if (varPtrVal) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"^var\", varPtrVal.value);\n      writer.WriteIntProperty(\"ci\", varPtrVal.contextIndex);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let glue = asOrNull(obj, Glue);\n    if (glue) {\n      writer.Write(\"<>\");\n      return;\n    }\n\n    let controlCmd = asOrNull(obj, ControlCommand);\n    if (controlCmd) {\n      writer.Write(\n        JsonSerialisation._controlCommandNames[controlCmd.commandType]\n      );\n      return;\n    }\n\n    let nativeFunc = asOrNull(obj, NativeFunctionCall);\n    if (nativeFunc) {\n      let name = nativeFunc.name;\n\n      if (name == \"^\") name = \"L^\";\n\n      writer.Write(name);\n      return;\n    }\n\n    let varRef = asOrNull(obj, VariableReference);\n    if (varRef) {\n      writer.WriteObjectStart();\n      let readCountPath = varRef.pathStringForCount;\n      if (readCountPath != null) {\n        writer.WriteProperty(\"CNT?\", readCountPath);\n      } else {\n        writer.WriteProperty(\"VAR?\", varRef.name);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let varAss = asOrNull(obj, VariableAssignment);\n    if (varAss) {\n      writer.WriteObjectStart();\n\n      let key = varAss.isGlobal ? \"VAR=\" : \"temp=\";\n      writer.WriteProperty(key, varAss.variableName);\n\n      // Reassignment?\n      if (!varAss.isNewDeclaration) writer.WriteProperty(\"re\", true);\n\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let voidObj = asOrNull(obj, Void);\n    if (voidObj) {\n      writer.Write(\"void\");\n      return;\n    }\n\n    let tag = asOrNull(obj, Tag);\n    if (tag) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"#\", tag.text);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choice = asOrNull(obj, Choice);\n    if (choice) {\n      this.WriteChoice(writer, choice);\n      return;\n    }\n\n    throw new Error(\"Failed to convert runtime object to Json token: \" + obj);\n  }\n\n  public static JObjectToDictionaryRuntimeObjs(jObject: Record<string, any>) {\n    let dict: Map<string, InkObject> = new Map();\n\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        let inkObject = this.JTokenToRuntimeObject(jObject[key]);\n        if (inkObject === null) {\n          return throwNullException(\"inkObject\");\n        }\n        dict.set(key, inkObject);\n      }\n    }\n\n    return dict;\n  }\n\n  public static JObjectToIntDictionary(jObject: Record<string, any>) {\n    let dict: Map<string, number> = new Map();\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        dict.set(key, parseInt(jObject[key]));\n      }\n    }\n    return dict;\n  }\n\n  public static JTokenToRuntimeObject(token: any): InkObject | null {\n    if (\n      (typeof token === \"number\" && !isNaN(token)) ||\n      typeof token === \"boolean\"\n    ) {\n      return Value.Create(token);\n    }\n\n    if (typeof token === \"string\") {\n      let str = token.toString();\n\n      // String value\n      let firstChar = str[0];\n      if (firstChar == \"^\") return new StringValue(str.substring(1));\n      else if (firstChar == \"\\n\" && str.length == 1)\n        return new StringValue(\"\\n\");\n\n      // Glue\n      if (str == \"<>\") return new Glue();\n\n      // Control commands (would looking up in a hash set be faster?)\n      for (let i = 0; i < JsonSerialisation._controlCommandNames.length; ++i) {\n        let cmdName = JsonSerialisation._controlCommandNames[i];\n        if (str == cmdName) {\n          return new ControlCommand(i);\n        }\n      }\n\n      // Native functions\n      if (str == \"L^\") str = \"^\";\n      if (NativeFunctionCall.CallExistsWithName(str))\n        return NativeFunctionCall.CallWithName(str);\n\n      // Pop\n      if (str == \"->->\") return ControlCommand.PopTunnel();\n      else if (str == \"~ret\") return ControlCommand.PopFunction();\n\n      // Void\n      if (str == \"void\") return new Void();\n    }\n\n    if (typeof token === \"object\" && !Array.isArray(token)) {\n      let obj = token as Record<string, any>;\n      let propValue;\n\n      // Divert target value to path\n      if (obj[\"^->\"]) {\n        propValue = obj[\"^->\"];\n        return new DivertTargetValue(new Path(propValue.toString()));\n      }\n\n      // VariablePointerValue\n      if (obj[\"^var\"]) {\n        propValue = obj[\"^var\"];\n        let varPtr = new VariablePointerValue(propValue.toString());\n        if (\"ci\" in obj) {\n          propValue = obj[\"ci\"];\n          varPtr.contextIndex = parseInt(propValue);\n        }\n        return varPtr;\n      }\n\n      // Divert\n      let isDivert = false;\n      let pushesToStack = false;\n      let divPushType = PushPopType.Function;\n      let external = false;\n      if ((propValue = obj[\"->\"])) {\n        isDivert = true;\n      } else if ((propValue = obj[\"f()\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Function;\n      } else if ((propValue = obj[\"->t->\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Tunnel;\n      } else if ((propValue = obj[\"x()\"])) {\n        isDivert = true;\n        external = true;\n        pushesToStack = false;\n        divPushType = PushPopType.Function;\n      }\n\n      if (isDivert) {\n        let divert = new Divert();\n        divert.pushesToStack = pushesToStack;\n        divert.stackPushType = divPushType;\n        divert.isExternal = external;\n\n        let target = propValue.toString();\n\n        if ((propValue = obj[\"var\"])) divert.variableDivertName = target;\n        else divert.targetPathString = target;\n\n        divert.isConditional = !!obj[\"c\"];\n\n        if (external) {\n          if ((propValue = obj[\"exArgs\"]))\n            divert.externalArgs = parseInt(propValue);\n        }\n\n        return divert;\n      }\n\n      // Choice\n      if ((propValue = obj[\"*\"])) {\n        let choice = new ChoicePoint();\n        choice.pathStringOnChoice = propValue.toString();\n\n        if ((propValue = obj[\"flg\"])) choice.flags = parseInt(propValue);\n\n        return choice;\n      }\n\n      // Variable reference\n      if ((propValue = obj[\"VAR?\"])) {\n        return new VariableReference(propValue.toString());\n      } else if ((propValue = obj[\"CNT?\"])) {\n        let readCountVarRef = new VariableReference();\n        readCountVarRef.pathStringForCount = propValue.toString();\n        return readCountVarRef;\n      }\n\n      // Variable assignment\n      let isVarAss = false;\n      let isGlobalVar = false;\n      if ((propValue = obj[\"VAR=\"])) {\n        isVarAss = true;\n        isGlobalVar = true;\n      } else if ((propValue = obj[\"temp=\"])) {\n        isVarAss = true;\n        isGlobalVar = false;\n      }\n      if (isVarAss) {\n        let varName = propValue.toString();\n        let isNewDecl = !obj[\"re\"];\n        let varAss = new VariableAssignment(varName, isNewDecl);\n        varAss.isGlobal = isGlobalVar;\n        return varAss;\n      }\n      if (obj[\"#\"] !== undefined) {\n        propValue = obj[\"#\"];\n        return new Tag(propValue.toString());\n      }\n\n      // List value\n      if ((propValue = obj[\"list\"])) {\n        // var listContent = (Dictionary<string, object>)propValue;\n        let listContent = propValue as Record<string, any>;\n        let rawList = new InkList();\n        if ((propValue = obj[\"origins\"])) {\n          // var namesAsObjs = (List<object>)propValue;\n          let namesAsObjs = propValue as string[];\n          // rawList.SetInitialOriginNames(namesAsObjs.Cast<string>().ToList());\n          rawList.SetInitialOriginNames(namesAsObjs);\n        }\n\n        for (let key in listContent) {\n          if (listContent.hasOwnProperty(key)) {\n            let nameToVal = listContent[key];\n            let item = new InkListItem(key);\n            let val = parseInt(nameToVal);\n            rawList.Add(item, val);\n          }\n        }\n\n        return new ListValue(rawList);\n      }\n\n      if (obj[\"originalChoicePath\"] != null) return this.JObjectToChoice(obj);\n    }\n\n    // Array is always a Runtime.Container\n    if (Array.isArray(token)) {\n      return this.JArrayToContainer(token);\n    }\n\n    if (token === null || token === undefined) return null;\n\n    throw new Error(\n      \"Failed to convert token to runtime object: \" +\n        this.toJson(token, [\"parent\"])\n    );\n  }\n\n  public static toJson<T>(\n    me: T,\n    removes?: (keyof T)[],\n    space?: number\n  ): string {\n    return JSON.stringify(\n      me,\n      (k, v) => (removes?.some((r) => r === k) ? undefined : v),\n      space\n    );\n  }\n\n  public static WriteRuntimeContainer(\n    writer: SimpleJson.Writer,\n    container: Container | null,\n    withoutName: boolean = false\n  ) {\n    writer.WriteArrayStart();\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    for (let c of container.content) this.WriteRuntimeObject(writer, c);\n\n    let namedOnlyContent = container.namedOnlyContent;\n    let countFlags = container.countFlags;\n    let hasNameProperty = container.name != null && !withoutName;\n\n    let hasTerminator =\n      namedOnlyContent != null || countFlags > 0 || hasNameProperty;\n    if (hasTerminator) {\n      writer.WriteObjectStart();\n    }\n\n    if (namedOnlyContent != null) {\n      for (let [key, value] of namedOnlyContent) {\n        let name = key;\n        let namedContainer = asOrNull(value, Container);\n        writer.WritePropertyStart(name);\n        this.WriteRuntimeContainer(writer, namedContainer, true);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (countFlags > 0) writer.WriteIntProperty(\"#f\", countFlags);\n\n    if (hasNameProperty) writer.WriteProperty(\"#n\", container.name);\n\n    if (hasTerminator) writer.WriteObjectEnd();\n    else writer.WriteNull();\n\n    writer.WriteArrayEnd();\n  }\n\n  public static JArrayToContainer(jArray: any[]) {\n    let container = new Container();\n    container.content = this.JArrayToRuntimeObjList(jArray, true);\n\n    let terminatingObj = jArray[jArray.length - 1] as Record<string, any>;\n    if (terminatingObj != null) {\n      let namedOnlyContent = new Map();\n\n      for (let key in terminatingObj) {\n        if (key == \"#f\") {\n          container.countFlags = parseInt(terminatingObj[key]);\n        } else if (key == \"#n\") {\n          container.name = terminatingObj[key].toString();\n        } else {\n          let namedContentItem = this.JTokenToRuntimeObject(\n            terminatingObj[key]\n          );\n          // var namedSubContainer = namedContentItem as Container;\n          let namedSubContainer = asOrNull(namedContentItem, Container);\n          if (namedSubContainer) namedSubContainer.name = key;\n          namedOnlyContent.set(key, namedContentItem);\n        }\n      }\n\n      container.namedOnlyContent = namedOnlyContent;\n    }\n\n    return container;\n  }\n\n  public static JObjectToChoice(jObj: Record<string, any>) {\n    let choice = new Choice();\n    choice.text = jObj[\"text\"].toString();\n    choice.index = parseInt(jObj[\"index\"]);\n    choice.sourcePath = jObj[\"originalChoicePath\"].toString();\n    choice.originalThreadIndex = parseInt(jObj[\"originalThreadIndex\"]);\n    choice.pathStringOnChoice = jObj[\"targetPath\"].toString();\n    return choice;\n  }\n\n  public static WriteChoice(writer: SimpleJson.Writer, choice: Choice) {\n    writer.WriteObjectStart();\n    writer.WriteProperty(\"text\", choice.text);\n    writer.WriteIntProperty(\"index\", choice.index);\n    writer.WriteProperty(\"originalChoicePath\", choice.sourcePath);\n    writer.WriteIntProperty(\"originalThreadIndex\", choice.originalThreadIndex);\n    writer.WriteProperty(\"targetPath\", choice.pathStringOnChoice);\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteInkList(writer: SimpleJson.Writer, listVal: ListValue) {\n    let rawList = listVal.value;\n    if (rawList === null) {\n      return throwNullException(\"rawList\");\n    }\n\n    writer.WriteObjectStart();\n    writer.WritePropertyStart(\"list\");\n    writer.WriteObjectStart();\n\n    for (let [key, val] of rawList) {\n      let item = InkListItem.fromSerializedKey(key);\n      let itemVal = val;\n\n      if (item.itemName === null) {\n        return throwNullException(\"item.itemName\");\n      }\n\n      writer.WritePropertyNameStart();\n      writer.WritePropertyNameInner(item.originName ? item.originName : \"?\");\n      writer.WritePropertyNameInner(\".\");\n      writer.WritePropertyNameInner(item.itemName);\n      writer.WritePropertyNameEnd();\n\n      writer.Write(itemVal);\n\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    writer.WritePropertyEnd();\n\n    if (\n      rawList.Count == 0 &&\n      rawList.originNames != null &&\n      rawList.originNames.length > 0\n    ) {\n      writer.WritePropertyStart(\"origins\");\n      writer.WriteArrayStart();\n      for (let name of rawList.originNames) writer.Write(name);\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n  }\n\n  public static ListDefinitionsToJToken(origin: ListDefinitionsOrigin) {\n    let result: Record<string, any> = {};\n\n    for (let def of origin.lists) {\n      let listDefJson: Record<string, any> = {};\n\n      for (let [key, val] of def.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.itemName === null) {\n          return throwNullException(\"item.itemName\");\n        }\n        listDefJson[item.itemName] = val;\n      }\n\n      result[def.name] = listDefJson;\n    }\n\n    return result;\n  }\n\n  public static JTokenToListDefinitions(obj: Record<string, any>) {\n    // var defsObj = (Dictionary<string, object>)obj;\n    let defsObj = obj;\n\n    let allDefs: ListDefinition[] = [];\n\n    for (let key in defsObj) {\n      if (defsObj.hasOwnProperty(key)) {\n        let name = key.toString();\n        // var listDefJson = (Dictionary<string, object>)kv.Value;\n        let listDefJson = defsObj[key] as Record<string, any>;\n\n        // Cast (string, object) to (string, int) for items\n        let items: Map<string, number> = new Map();\n\n        for (let nameValueKey in listDefJson) {\n          if (defsObj.hasOwnProperty(key)) {\n            let nameValue = listDefJson[nameValueKey];\n            items.set(nameValueKey, parseInt(nameValue));\n          }\n        }\n\n        let def = new ListDefinition(name, items);\n        allDefs.push(def);\n      }\n    }\n\n    return new ListDefinitionsOrigin(allDefs);\n  }\n\n  private static _controlCommandNames = (() => {\n    let _controlCommandNames: string[] = [];\n\n    _controlCommandNames[ControlCommand.CommandType.EvalStart] = \"ev\";\n    _controlCommandNames[ControlCommand.CommandType.EvalOutput] = \"out\";\n    _controlCommandNames[ControlCommand.CommandType.EvalEnd] = \"/ev\";\n    _controlCommandNames[ControlCommand.CommandType.Duplicate] = \"du\";\n    _controlCommandNames[ControlCommand.CommandType.PopEvaluatedValue] = \"pop\";\n    _controlCommandNames[ControlCommand.CommandType.PopFunction] = \"~ret\";\n    _controlCommandNames[ControlCommand.CommandType.PopTunnel] = \"->->\";\n    _controlCommandNames[ControlCommand.CommandType.BeginString] = \"str\";\n    _controlCommandNames[ControlCommand.CommandType.EndString] = \"/str\";\n    _controlCommandNames[ControlCommand.CommandType.NoOp] = \"nop\";\n    _controlCommandNames[ControlCommand.CommandType.ChoiceCount] = \"choiceCnt\";\n    _controlCommandNames[ControlCommand.CommandType.Turns] = \"turn\";\n    _controlCommandNames[ControlCommand.CommandType.TurnsSince] = \"turns\";\n    _controlCommandNames[ControlCommand.CommandType.ReadCount] = \"readc\";\n    _controlCommandNames[ControlCommand.CommandType.Random] = \"rnd\";\n    _controlCommandNames[ControlCommand.CommandType.SeedRandom] = \"srnd\";\n    _controlCommandNames[ControlCommand.CommandType.VisitIndex] = \"visit\";\n    _controlCommandNames[ControlCommand.CommandType.SequenceShuffleIndex] =\n      \"seq\";\n    _controlCommandNames[ControlCommand.CommandType.StartThread] = \"thread\";\n    _controlCommandNames[ControlCommand.CommandType.Done] = \"done\";\n    _controlCommandNames[ControlCommand.CommandType.End] = \"end\";\n    _controlCommandNames[ControlCommand.CommandType.ListFromInt] = \"listInt\";\n    _controlCommandNames[ControlCommand.CommandType.ListRange] = \"range\";\n    _controlCommandNames[ControlCommand.CommandType.ListRandom] = \"lrnd\";\n    _controlCommandNames[ControlCommand.CommandType.BeginTag] = \"#\";\n    _controlCommandNames[ControlCommand.CommandType.EndTag] = \"/#\";\n\n    for (let i = 0; i < ControlCommand.CommandType.TOTAL_VALUES; ++i) {\n      if (_controlCommandNames[i] == null)\n        throw new Error(\"Control command not accounted for in serialisation\");\n    }\n\n    return _controlCommandNames;\n  })();\n}\n","import { PushPopType } from \"./PushPop\";\nimport { Path } from \"./Path\";\nimport { Story } from \"./Story\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { ListValue } from \"./Value\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { Pointer } from \"./Pointer\";\nimport { InkObject } from \"./Object\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class CallStack {\n  get elements() {\n    return this.callStack;\n  }\n\n  get depth() {\n    return this.elements.length;\n  }\n\n  get currentElement() {\n    let thread = this._threads[this._threads.length - 1];\n    let cs = thread.callstack;\n    return cs[cs.length - 1];\n  }\n\n  get currentElementIndex() {\n    return this.callStack.length - 1;\n  }\n\n  get currentThread(): CallStack.Thread {\n    return this._threads[this._threads.length - 1];\n  }\n  set currentThread(value: CallStack.Thread) {\n    Debug.Assert(\n      this._threads.length == 1,\n      \"Shouldn't be directly setting the current thread when we have a stack of them\"\n    );\n\n    this._threads.length = 0;\n    this._threads.push(value);\n  }\n\n  get canPop() {\n    return this.callStack.length > 1;\n  }\n\n  constructor(storyContext: Story);\n  constructor(toCopy: CallStack);\n  constructor() {\n    if (arguments[0] instanceof Story) {\n      let storyContext = arguments[0] as Story;\n\n      this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n      this.Reset();\n    } else {\n      let toCopy = arguments[0] as CallStack;\n\n      this._threads = [];\n      for (let otherThread of toCopy._threads) {\n        this._threads.push(otherThread.Copy());\n      }\n      this._threadCounter = toCopy._threadCounter;\n      this._startOfRoot = toCopy._startOfRoot.copy();\n    }\n  }\n\n  public Reset() {\n    this._threads = [];\n    this._threads.push(new CallStack.Thread());\n\n    this._threads[0].callstack.push(\n      new CallStack.Element(PushPopType.Tunnel, this._startOfRoot)\n    );\n  }\n\n  public SetJsonToken(jObject: Record<string, any>, storyContext: Story) {\n    this._threads.length = 0;\n\n    // TODO: (List<object>) jObject [\"threads\"];\n    let jThreads: any[] = jObject[\"threads\"];\n\n    for (let jThreadTok of jThreads) {\n      // TODO: var jThreadObj = (Dictionary<string, object>)jThreadTok;\n      let jThreadObj = jThreadTok;\n      let thread = new CallStack.Thread(jThreadObj, storyContext);\n      this._threads.push(thread);\n    }\n\n    // TODO: (int)jObject [\"threadCounter\"];\n    this._threadCounter = parseInt(jObject[\"threadCounter\"]);\n    this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n  }\n  public WriteJson(w: SimpleJson.Writer) {\n    w.WriteObject((writer) => {\n      writer.WritePropertyStart(\"threads\");\n      writer.WriteArrayStart();\n\n      for (let thread of this._threads) {\n        thread.WriteJson(writer);\n      }\n\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WritePropertyStart(\"threadCounter\");\n      writer.WriteInt(this._threadCounter);\n      writer.WritePropertyEnd();\n    });\n  }\n\n  public PushThread() {\n    let newThread = this.currentThread.Copy();\n    this._threadCounter++;\n    newThread.threadIndex = this._threadCounter;\n    this._threads.push(newThread);\n  }\n\n  public ForkThread() {\n    let forkedThread = this.currentThread.Copy();\n    this._threadCounter++;\n    forkedThread.threadIndex = this._threadCounter;\n    return forkedThread;\n  }\n\n  public PopThread() {\n    if (this.canPopThread) {\n      this._threads.splice(this._threads.indexOf(this.currentThread), 1); // should be equivalent to a pop()\n    } else {\n      throw new Error(\"Can't pop thread\");\n    }\n  }\n\n  get canPopThread() {\n    return this._threads.length > 1 && !this.elementIsEvaluateFromGame;\n  }\n\n  get elementIsEvaluateFromGame() {\n    return this.currentElement.type == PushPopType.FunctionEvaluationFromGame;\n  }\n\n  public Push(\n    type: PushPopType,\n    externalEvaluationStackHeight: number = 0,\n    outputStreamLengthWithPushed: number = 0\n  ) {\n    let element = new CallStack.Element(\n      type,\n      this.currentElement.currentPointer,\n      false\n    );\n\n    element.evaluationStackHeightWhenPushed = externalEvaluationStackHeight;\n    element.functionStartInOutputStream = outputStreamLengthWithPushed;\n\n    this.callStack.push(element);\n  }\n\n  public CanPop(type: PushPopType | null = null) {\n    if (!this.canPop) return false;\n\n    if (type == null) return true;\n\n    return this.currentElement.type == type;\n  }\n\n  public Pop(type: PushPopType | null = null) {\n    if (this.CanPop(type)) {\n      this.callStack.pop();\n      return;\n    } else {\n      throw new Error(\"Mismatched push/pop in Callstack\");\n    }\n  }\n\n  public GetTemporaryVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    let varValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (varValue.exists) {\n      return varValue.result;\n    } else {\n      return null;\n    }\n  }\n\n  public SetTemporaryVariable(\n    name: string,\n    value: any,\n    declareNew: boolean,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    if (!declareNew && !contextElement.temporaryVariables.get(name)) {\n      throw new Error(\"Could not find temporary variable to set: \" + name);\n    }\n\n    let oldValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (oldValue.exists)\n      ListValue.RetainListOriginsForAssignment(oldValue.result, value);\n\n    contextElement.temporaryVariables.set(name, value);\n  }\n\n  public ContextForVariableNamed(name: string) {\n    if (this.currentElement.temporaryVariables.get(name)) {\n      return this.currentElementIndex + 1;\n    } else {\n      return 0;\n    }\n  }\n\n  public ThreadWithIndex(index: number) {\n    let filtered = this._threads.filter((t) => {\n      if (t.threadIndex == index) return t;\n    });\n\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n\n  get callStack() {\n    return this.currentThread.callstack;\n  }\n\n  get callStackTrace() {\n    let sb = new StringBuilder();\n\n    for (let t = 0; t < this._threads.length; t++) {\n      let thread = this._threads[t];\n      let isCurrent = t == this._threads.length - 1;\n      sb.AppendFormat(\n        \"=== THREAD {0}/{1} {2}===\\n\",\n        t + 1,\n        this._threads.length,\n        isCurrent ? \"(current) \" : \"\"\n      );\n\n      for (let i = 0; i < thread.callstack.length; i++) {\n        if (thread.callstack[i].type == PushPopType.Function)\n          sb.Append(\"  [FUNCTION] \");\n        else sb.Append(\"  [TUNNEL] \");\n\n        let pointer = thread.callstack[i].currentPointer;\n        if (!pointer.isNull) {\n          sb.Append(\"<SOMEWHERE IN \");\n          if (pointer.container === null) {\n            return throwNullException(\"pointer.container\");\n          }\n          sb.Append(pointer.container.path.toString());\n          sb.AppendLine(\">\");\n        }\n      }\n    }\n\n    return sb.toString();\n  }\n\n  public _threads!: CallStack.Thread[]; // Banged because it's initialized in Reset().\n  public _threadCounter: number = 0;\n  public _startOfRoot: Pointer = Pointer.Null;\n}\n\nexport namespace CallStack {\n  export class Element {\n    public currentPointer: Pointer;\n    public inExpressionEvaluation: boolean;\n    public temporaryVariables: Map<string, InkObject>;\n    public type: PushPopType;\n\n    public evaluationStackHeightWhenPushed: number = 0;\n    public functionStartInOutputStream: number = 0;\n\n    constructor(\n      type: PushPopType,\n      pointer: Pointer,\n      inExpressionEvaluation: boolean = false\n    ) {\n      this.currentPointer = pointer.copy();\n      this.inExpressionEvaluation = inExpressionEvaluation;\n      this.temporaryVariables = new Map();\n      this.type = type;\n    }\n\n    public Copy() {\n      let copy = new Element(\n        this.type,\n        this.currentPointer,\n        this.inExpressionEvaluation\n      );\n      copy.temporaryVariables = new Map(this.temporaryVariables);\n      copy.evaluationStackHeightWhenPushed =\n        this.evaluationStackHeightWhenPushed;\n      copy.functionStartInOutputStream = this.functionStartInOutputStream;\n      return copy;\n    }\n  }\n\n  export class Thread {\n    public callstack: Element[];\n    public threadIndex: number = 0;\n    public previousPointer: Pointer = Pointer.Null;\n\n    constructor();\n    constructor(jThreadObj: any, storyContext: Story);\n    constructor() {\n      this.callstack = [];\n\n      if (arguments[0] && arguments[1]) {\n        let jThreadObj = arguments[0];\n        let storyContext = arguments[1];\n\n        // TODO: (int) jThreadObj['threadIndex'] can raise;\n        this.threadIndex = parseInt(jThreadObj[\"threadIndex\"]);\n\n        let jThreadCallstack = jThreadObj[\"callstack\"];\n\n        for (let jElTok of jThreadCallstack) {\n          let jElementObj = jElTok;\n\n          // TODO: (int) jElementObj['type'] can raise;\n          let pushPopType: PushPopType = parseInt(jElementObj[\"type\"]);\n\n          let pointer = Pointer.Null;\n\n          let currentContainerPathStr: string;\n          // TODO: jElementObj.TryGetValue (\"cPath\", out currentContainerPathStrToken);\n          let currentContainerPathStrToken = jElementObj[\"cPath\"];\n          if (typeof currentContainerPathStrToken !== \"undefined\") {\n            currentContainerPathStr = currentContainerPathStrToken.toString();\n\n            let threadPointerResult = storyContext.ContentAtPath(\n              new Path(currentContainerPathStr)\n            );\n            pointer.container = threadPointerResult.container;\n            pointer.index = parseInt(jElementObj[\"idx\"]);\n\n            if (threadPointerResult.obj == null)\n              throw new Error(\n                \"When loading state, internal story location couldn't be found: \" +\n                  currentContainerPathStr +\n                  \". Has the story changed since this save data was created?\"\n              );\n            else if (threadPointerResult.approximate) {\n              if (pointer.container === null) {\n                return throwNullException(\"pointer.container\");\n              }\n              storyContext.Warning(\n                \"When loading state, exact internal story location couldn't be found: '\" +\n                  currentContainerPathStr +\n                  \"', so it was approximated to '\" +\n                  pointer.container.path.toString() +\n                  \"' to recover. Has the story changed since this save data was created?\"\n              );\n            }\n          }\n\n          let inExpressionEvaluation = !!jElementObj[\"exp\"];\n\n          let el = new Element(pushPopType, pointer, inExpressionEvaluation);\n\n          let temps = jElementObj[\"temp\"];\n          if (typeof temps !== \"undefined\") {\n            el.temporaryVariables =\n              JsonSerialisation.JObjectToDictionaryRuntimeObjs(temps);\n          } else {\n            el.temporaryVariables.clear();\n          }\n\n          this.callstack.push(el);\n        }\n\n        let prevContentObjPath = jThreadObj[\"previousContentObject\"];\n        if (typeof prevContentObjPath !== \"undefined\") {\n          let prevPath = new Path(prevContentObjPath.toString());\n          this.previousPointer = storyContext.PointerAtPath(prevPath);\n        }\n      }\n    }\n\n    public Copy() {\n      let copy = new Thread();\n      copy.threadIndex = this.threadIndex;\n      for (let e of this.callstack) {\n        copy.callstack.push(e.Copy());\n      }\n      copy.previousPointer = this.previousPointer.copy();\n      return copy;\n    }\n\n    public WriteJson(writer: SimpleJson.Writer) {\n      writer.WriteObjectStart();\n\n      writer.WritePropertyStart(\"callstack\");\n      writer.WriteArrayStart();\n      for (let el of this.callstack) {\n        writer.WriteObjectStart();\n        if (!el.currentPointer.isNull) {\n          if (el.currentPointer.container === null) {\n            return throwNullException(\"el.currentPointer.container\");\n          }\n          writer.WriteProperty(\n            \"cPath\",\n            el.currentPointer.container.path.componentsString\n          );\n          writer.WriteIntProperty(\"idx\", el.currentPointer.index);\n        }\n\n        writer.WriteProperty(\"exp\", el.inExpressionEvaluation);\n        writer.WriteIntProperty(\"type\", el.type);\n\n        if (el.temporaryVariables.size > 0) {\n          writer.WritePropertyStart(\"temp\");\n          JsonSerialisation.WriteDictionaryRuntimeObjs(\n            writer,\n            el.temporaryVariables\n          );\n          writer.WritePropertyEnd();\n        }\n\n        writer.WriteObjectEnd();\n      }\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WriteIntProperty(\"threadIndex\", this.threadIndex);\n\n      if (!this.previousPointer.isNull) {\n        let resolvedPointer = this.previousPointer.Resolve();\n        if (resolvedPointer === null) {\n          return throwNullException(\"this.previousPointer.Resolve()\");\n        }\n        writer.WriteProperty(\n          \"previousContentObject\",\n          resolvedPointer.path.toString()\n        );\n      }\n\n      writer.WriteObjectEnd();\n    }\n  }\n}\n","import {\n  AbstractValue,\n  Value,\n  VariablePointerValue,\n  ListValue,\n  IntValue,\n  FloatValue,\n  BoolValue,\n} from \"./Value\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { InkObject } from \"./Object\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { StoryException } from \"./StoryException\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { asOrThrows, asOrNull, isEquatable } from \"./TypeAssertion\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { CallStack } from \"./CallStack\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { InkList } from \"./Story\";\nimport { Path } from \"./Path\";\n\n// Fake class wrapper around VariableState to have correct typing\n// when using the Proxy syntax in typescript\nfunction VariablesStateAccessor<T>(): new () => Pick<T, keyof T> {\n  return class {} as any;\n}\n\ntype VariableStateValue = boolean | string | number | InkList | Path | null;\n\nexport class VariablesState extends VariablesStateAccessor<\n  Record<string, any>\n>() {\n  // The way variableChangedEvent is a bit different than the reference implementation.\n  // Originally it uses the C# += operator to add delegates, but in js we need to maintain\n  // an actual collection of delegates (ie. callbacks) to register a new one, there is a\n  // special ObserveVariableChange method below.\n  public variableChangedEventCallbacks: Array<\n    (variableName: string, newValue: InkObject) => void\n  > = [];\n  public variableChangedEvent(variableName: string, newValue: InkObject): void {\n    for (let callback of this.variableChangedEventCallbacks) {\n      callback(variableName, newValue);\n    }\n  }\n\n  public patch: StatePatch | null = null;\n\n  get batchObservingVariableChanges() {\n    return this._batchObservingVariableChanges;\n  }\n  set batchObservingVariableChanges(value: boolean) {\n    this._batchObservingVariableChanges = value;\n    if (value) {\n      this._changedVariablesForBatchObs = new Set();\n    } else {\n      if (this._changedVariablesForBatchObs != null) {\n        for (let variableName of this._changedVariablesForBatchObs) {\n          let currentValue = this._globalVariables.get(variableName);\n          if (!currentValue) {\n            throwNullException(\"currentValue\");\n          } else {\n            this.variableChangedEvent(variableName, currentValue);\n          }\n        }\n\n        this._changedVariablesForBatchObs = null;\n      }\n    }\n  }\n\n  get callStack() {\n    return this._callStack;\n  }\n  set callStack(callStack) {\n    this._callStack = callStack;\n  }\n\n  private _batchObservingVariableChanges: boolean = false;\n\n  // the original code uses a magic getter and setter for global variables,\n  // allowing things like variableState['varname]. This is not quite possible\n  // in js without a Proxy, so it is replaced with this $ function.\n  public $(variableName: string): VariableStateValue;\n  public $(variableName: string, value: VariableStateValue): void;\n  public $(variableName: string, value?: any) {\n    if (typeof value === \"undefined\") {\n      let varContents = null;\n\n      if (this.patch !== null) {\n        varContents = this.patch.TryGetGlobal(variableName, null);\n        if (varContents.exists)\n          return (varContents.result as AbstractValue).valueObject;\n      }\n\n      varContents = this._globalVariables.get(variableName);\n\n      if (typeof varContents === \"undefined\") {\n        varContents = this._defaultGlobalVariables.get(variableName);\n      }\n\n      if (typeof varContents !== \"undefined\")\n        return (varContents as AbstractValue).valueObject;\n      else return null;\n    } else {\n      if (typeof this._defaultGlobalVariables.get(variableName) === \"undefined\")\n        throw new StoryException(\n          \"Cannot assign to a variable (\" +\n            variableName +\n            \") that hasn't been declared in the story\"\n        );\n\n      let val = Value.Create(value);\n      if (val == null) {\n        if (value == null) {\n          throw new Error(\"Cannot pass null to VariableState\");\n        } else {\n          throw new Error(\n            \"Invalid value passed to VariableState: \" + value.toString()\n          );\n        }\n      }\n\n      this.SetGlobal(variableName, val);\n    }\n  }\n\n  constructor(\n    callStack: CallStack,\n    listDefsOrigin: ListDefinitionsOrigin | null\n  ) {\n    super();\n    this._globalVariables = new Map();\n    this._callStack = callStack;\n    this._listDefsOrigin = listDefsOrigin;\n\n    // if es6 proxies are available, use them.\n    try {\n      // the proxy is used to allow direct manipulation of global variables.\n      // It first tries to access the objects own property, and if none is\n      // found it delegates the call to the $ method, defined below\n      let p = new Proxy(this, {\n        get(target: any, name) {\n          return name in target ? target[name] : target.$(name);\n        },\n        set(target: any, name, value) {\n          if (name in target) target[name] = value;\n          else target.$(name, value);\n          return true; // returning a falsy value make the trap fail\n        },\n      });\n\n      return p;\n    } catch (e) {\n      // the proxy object is not available in this context. we should warn the\n      // dev but writing to the console feels a bit intrusive.\n      // console.log(\"ES6 Proxy not available - direct manipulation of global variables can't work, use $() instead.\");\n    }\n  }\n\n  public ApplyPatch() {\n    if (this.patch === null) {\n      return throwNullException(\"this.patch\");\n    }\n\n    for (let [namedVarKey, namedVarValue] of this.patch.globals) {\n      this._globalVariables.set(namedVarKey, namedVarValue);\n    }\n\n    if (this._changedVariablesForBatchObs !== null) {\n      for (let name of this.patch.changedVariables) {\n        this._changedVariablesForBatchObs.add(name);\n      }\n    }\n\n    this.patch = null;\n  }\n\n  public SetJsonToken(jToken: Record<string, any>) {\n    this._globalVariables.clear();\n\n    for (let [varValKey, varValValue] of this._defaultGlobalVariables) {\n      let loadedToken = jToken[varValKey];\n      if (typeof loadedToken !== \"undefined\") {\n        let tokenInkObject =\n          JsonSerialisation.JTokenToRuntimeObject(loadedToken);\n        if (tokenInkObject === null) {\n          return throwNullException(\"tokenInkObject\");\n        }\n        this._globalVariables.set(varValKey, tokenInkObject);\n      } else {\n        this._globalVariables.set(varValKey, varValValue);\n      }\n    }\n  }\n\n  public static dontSaveDefaultValues: boolean = true;\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n    for (let [keyValKey, keyValValue] of this._globalVariables) {\n      let name = keyValKey;\n      let val = keyValValue;\n\n      if (VariablesState.dontSaveDefaultValues) {\n        if (this._defaultGlobalVariables.has(name)) {\n          let defaultVal = this._defaultGlobalVariables.get(name)!;\n          if (this.RuntimeObjectsEqual(val, defaultVal)) continue;\n        }\n      }\n\n      writer.WritePropertyStart(name);\n      JsonSerialisation.WriteRuntimeObject(writer, val);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public RuntimeObjectsEqual(\n    obj1: InkObject | null,\n    obj2: InkObject | null\n  ): boolean {\n    if (obj1 === null) {\n      return throwNullException(\"obj1\");\n    }\n    if (obj2 === null) {\n      return throwNullException(\"obj2\");\n    }\n\n    if (obj1.constructor !== obj2.constructor) return false;\n\n    let boolVal = asOrNull(obj1, BoolValue);\n    if (boolVal !== null) {\n      return boolVal.value === asOrThrows(obj2, BoolValue).value;\n    }\n\n    let intVal = asOrNull(obj1, IntValue);\n    if (intVal !== null) {\n      return intVal.value === asOrThrows(obj2, IntValue).value;\n    }\n\n    let floatVal = asOrNull(obj1, FloatValue);\n    if (floatVal !== null) {\n      return floatVal.value === asOrThrows(obj2, FloatValue).value;\n    }\n\n    let val1 = asOrNull(obj1, Value);\n    let val2 = asOrNull(obj2, Value);\n    if (val1 !== null && val2 !== null) {\n      if (isEquatable(val1.valueObject) && isEquatable(val2.valueObject)) {\n        return val1.valueObject.Equals(val2.valueObject);\n      } else {\n        return val1.valueObject === val2.valueObject;\n      }\n    }\n\n    throw new Error(\n      \"FastRoughDefinitelyEquals: Unsupported runtime object type: \" +\n        obj1.constructor.name\n    );\n  }\n\n  public GetVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ): InkObject | null {\n    let varValue = this.GetRawVariableWithName(name, contextIndex);\n\n    // var varPointer = varValue as VariablePointerValue;\n    let varPointer = asOrNull(varValue, VariablePointerValue);\n    if (varPointer !== null) {\n      varValue = this.ValueAtVariablePointer(varPointer);\n    }\n\n    return varValue;\n  }\n\n  public TryGetDefaultVariableValue(name: string | null): InkObject | null {\n    let val = tryGetValueFromMap(this._defaultGlobalVariables, name, null);\n    return val.exists ? val.result : null;\n  }\n\n  public GlobalVariableExistsWithName(name: string) {\n    return (\n      this._globalVariables.has(name) ||\n      (this._defaultGlobalVariables !== null &&\n        this._defaultGlobalVariables.has(name))\n    );\n  }\n\n  public GetRawVariableWithName(name: string | null, contextIndex: number) {\n    let varValue: InkObject | null = null;\n\n    if (contextIndex == 0 || contextIndex == -1) {\n      let variableValue = null;\n      if (this.patch !== null) {\n        variableValue = this.patch.TryGetGlobal(name, null);\n        if (variableValue.exists) return variableValue.result!;\n      }\n\n      // this is a conditional assignment\n      variableValue = tryGetValueFromMap(this._globalVariables, name, null);\n      if (variableValue.exists) return variableValue.result;\n\n      if (this._defaultGlobalVariables !== null) {\n        variableValue = tryGetValueFromMap(\n          this._defaultGlobalVariables,\n          name,\n          null\n        );\n        if (variableValue.exists) return variableValue.result;\n      }\n\n      if (this._listDefsOrigin === null)\n        return throwNullException(\"VariablesState._listDefsOrigin\");\n      let listItemValue = this._listDefsOrigin.FindSingleItemListWithName(name);\n      if (listItemValue) return listItemValue;\n    }\n\n    varValue = this._callStack.GetTemporaryVariableWithName(name, contextIndex);\n\n    return varValue;\n  }\n\n  public ValueAtVariablePointer(pointer: VariablePointerValue) {\n    return this.GetVariableWithName(pointer.variableName, pointer.contextIndex);\n  }\n\n  public Assign(varAss: VariableAssignment, value: InkObject) {\n    let name = varAss.variableName;\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let contextIndex = -1;\n\n    let setGlobal = false;\n    if (varAss.isNewDeclaration) {\n      setGlobal = varAss.isGlobal;\n    } else {\n      setGlobal = this.GlobalVariableExistsWithName(name);\n    }\n\n    if (varAss.isNewDeclaration) {\n      // var varPointer = value as VariablePointerValue;\n      let varPointer = asOrNull(value, VariablePointerValue);\n      if (varPointer !== null) {\n        let fullyResolvedVariablePointer =\n          this.ResolveVariablePointer(varPointer);\n        value = fullyResolvedVariablePointer;\n      }\n    } else {\n      let existingPointer = null;\n      do {\n        // existingPointer = GetRawVariableWithName (name, contextIndex) as VariablePointerValue;\n        existingPointer = asOrNull(\n          this.GetRawVariableWithName(name, contextIndex),\n          VariablePointerValue\n        );\n        if (existingPointer != null) {\n          name = existingPointer.variableName;\n          contextIndex = existingPointer.contextIndex;\n          setGlobal = contextIndex == 0;\n        }\n      } while (existingPointer != null);\n    }\n\n    if (setGlobal) {\n      this.SetGlobal(name, value);\n    } else {\n      this._callStack.SetTemporaryVariable(\n        name,\n        value,\n        varAss.isNewDeclaration,\n        contextIndex\n      );\n    }\n  }\n\n  public SnapshotDefaultGlobals() {\n    this._defaultGlobalVariables = new Map(this._globalVariables);\n  }\n\n  public RetainListOriginsForAssignment(\n    oldValue: InkObject,\n    newValue: InkObject\n  ) {\n    let oldList = asOrThrows(oldValue, ListValue);\n    let newList = asOrThrows(newValue, ListValue);\n\n    if (oldList.value && newList.value && newList.value.Count == 0) {\n      newList.value.SetInitialOriginNames(oldList.value.originNames);\n    }\n  }\n\n  public SetGlobal(variableName: string | null, value: InkObject) {\n    let oldValue = null;\n\n    if (this.patch === null) {\n      oldValue = tryGetValueFromMap(this._globalVariables, variableName, null);\n    }\n\n    if (this.patch !== null) {\n      oldValue = this.patch.TryGetGlobal(variableName, null);\n      if (!oldValue.exists) {\n        oldValue = tryGetValueFromMap(\n          this._globalVariables,\n          variableName,\n          null\n        );\n      }\n    }\n\n    ListValue.RetainListOriginsForAssignment(oldValue!.result!, value);\n\n    if (variableName === null) {\n      return throwNullException(\"variableName\");\n    }\n\n    if (this.patch !== null) {\n      this.patch.SetGlobal(variableName, value);\n    } else {\n      this._globalVariables.set(variableName, value);\n    }\n\n    // TODO: Not sure !== is equivalent to !value.Equals(oldValue)\n    if (\n      this.variableChangedEvent !== null &&\n      oldValue !== null &&\n      value !== oldValue.result\n    ) {\n      if (this.batchObservingVariableChanges) {\n        if (this._changedVariablesForBatchObs === null) {\n          return throwNullException(\"this._changedVariablesForBatchObs\");\n        }\n\n        if (this.patch !== null) {\n          this.patch.AddChangedVariable(variableName);\n        } else if (this._changedVariablesForBatchObs !== null) {\n          this._changedVariablesForBatchObs.add(variableName);\n        }\n      } else {\n        this.variableChangedEvent(variableName, value);\n      }\n    }\n  }\n\n  public ResolveVariablePointer(varPointer: VariablePointerValue) {\n    let contextIndex = varPointer.contextIndex;\n\n    if (contextIndex == -1)\n      contextIndex = this.GetContextIndexOfVariableNamed(\n        varPointer.variableName\n      );\n\n    let valueOfVariablePointedTo = this.GetRawVariableWithName(\n      varPointer.variableName,\n      contextIndex\n    );\n\n    // var doubleRedirectionPointer = valueOfVariablePointedTo as VariablePointerValue;\n    let doubleRedirectionPointer = asOrNull(\n      valueOfVariablePointedTo,\n      VariablePointerValue\n    );\n    if (doubleRedirectionPointer != null) {\n      return doubleRedirectionPointer;\n    } else {\n      return new VariablePointerValue(varPointer.variableName, contextIndex);\n    }\n  }\n\n  public GetContextIndexOfVariableNamed(varName: string) {\n    if (this.GlobalVariableExistsWithName(varName)) return 0;\n\n    return this._callStack.currentElementIndex;\n  }\n\n  /**\n   * This function is specific to the js version of ink. It allows to register a\n   * callback that will be called when a variable changes. The original code uses\n   * `state.variableChangedEvent += callback` instead.\n   *\n   * @param {function} callback\n   */\n  public ObserveVariableChange(\n    callback: (variableName: string, newValue: InkObject) => void\n  ) {\n    this.variableChangedEventCallbacks.push(callback);\n  }\n\n  private _globalVariables: Map<string, InkObject>;\n  private _defaultGlobalVariables: Map<string, InkObject> = new Map();\n\n  private _callStack: CallStack;\n  private _changedVariablesForBatchObs: Set<string> | null = new Set();\n  private _listDefsOrigin: ListDefinitionsOrigin | null;\n}\n","// Taken from https://gist.github.com/blixt/f17b47c62508be59987b\n// Ink uses a seedable PRNG of which there is none in native javascript.\nexport class PRNG {\n  private seed: number;\n\n  constructor(seed: number) {\n    this.seed = seed % 2147483647;\n    if (this.seed <= 0) this.seed += 2147483646;\n  }\n  public next(): number {\n    return (this.seed = (this.seed * 48271) % 2147483647);\n  }\n  public nextFloat(): number {\n    return (this.next() - 1) / 2147483646;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class StatePatch {\n  get globals() {\n    return this._globals;\n  }\n  get changedVariables() {\n    return this._changedVariables;\n  }\n  get visitCounts() {\n    return this._visitCounts;\n  }\n  get turnIndices() {\n    return this._turnIndices;\n  }\n\n  constructor();\n  constructor(toCopy: StatePatch | null);\n  constructor() {\n    if (arguments.length === 1 && arguments[0] !== null) {\n      let toCopy = arguments[0] as StatePatch;\n      this._globals = new Map(toCopy._globals);\n      this._changedVariables = new Set(toCopy._changedVariables);\n      this._visitCounts = new Map(toCopy._visitCounts);\n      this._turnIndices = new Map(toCopy._turnIndices);\n    } else {\n      this._globals = new Map();\n      this._changedVariables = new Set();\n      this._visitCounts = new Map();\n      this._turnIndices = new Map();\n    }\n  }\n\n  public TryGetGlobal(name: string | null, /* out */ value: InkObject | null) {\n    if (name !== null && this._globals.has(name)) {\n      return { result: this._globals.get(name), exists: true };\n    }\n\n    return { result: value, exists: false };\n  }\n\n  public SetGlobal(name: string, value: InkObject) {\n    this._globals.set(name, value);\n  }\n\n  public AddChangedVariable(name: string) {\n    return this._changedVariables.add(name);\n  }\n\n  public TryGetVisitCount(container: Container, /* out */ count: number) {\n    if (this._visitCounts.has(container)) {\n      return { result: this._visitCounts.get(container), exists: true };\n    }\n\n    return { result: count, exists: false };\n  }\n\n  public SetVisitCount(container: Container, count: number) {\n    this._visitCounts.set(container, count);\n  }\n\n  public SetTurnIndex(container: Container, index: number) {\n    this._turnIndices.set(container, index);\n  }\n\n  public TryGetTurnIndex(container: Container, /* out */ index: number) {\n    if (this._turnIndices.has(container)) {\n      return { result: this._turnIndices.get(container), exists: true };\n    }\n\n    return { result: index, exists: false };\n  }\n\n  private _globals: Map<string, InkObject>;\n  private _changedVariables: Set<string> = new Set();\n  private _visitCounts: Map<Container, number> = new Map();\n  private _turnIndices: Map<Container, number> = new Map();\n}\n","export class SimpleJson {\n  public static TextToDictionary(text: string) {\n    return new SimpleJson.Reader(text).ToDictionary();\n  }\n\n  public static TextToArray(text: string) {\n    return new SimpleJson.Reader(text).ToArray();\n  }\n}\n\nexport namespace SimpleJson {\n  export class Reader {\n    constructor(text: string) {\n      this._rootObject = JSON.parse(text);\n    }\n\n    public ToDictionary() {\n      return this._rootObject as Record<string, any>;\n    }\n\n    public ToArray() {\n      return this._rootObject as any[];\n    }\n\n    private _rootObject: any[] | Record<string, any>;\n  }\n\n  // In C#, this class writes json tokens directly to a StringWriter or\n  // another stream. Here, a temporary hierarchy is created in the form\n  // of a javascript object, which is serialised in the `toString` method.\n  // See individual methods and properties for more information.\n  export class Writer {\n    public WriteObject(inner: (w: Writer) => void) {\n      this.WriteObjectStart();\n      inner(this);\n      this.WriteObjectEnd();\n    }\n\n    // Add a new object.\n    public WriteObjectStart() {\n      this.StartNewObject(true);\n\n      let newObject: Record<string, any> = {};\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This object is created as the value of a property,\n        // inside an other object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This object is created as the child of an array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This object is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Object)\n      );\n    }\n\n    public WriteObjectEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Write a property name / value pair to the current object.\n    public WriteProperty(\n      name: any,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      innerOrContent: ((w: Writer) => void) | string | boolean | null\n    ) {\n      this.WritePropertyStart(name);\n      if (arguments[1] instanceof Function) {\n        let inner = arguments[1];\n        inner(this);\n      } else {\n        let content: string | boolean | null = arguments[1];\n        this.Write(content);\n      }\n      this.WritePropertyEnd();\n    }\n\n    // Int and Float are separate calls, since there both are\n    // numbers in JavaScript, but need to be handled differently.\n\n    public WriteIntProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteInt(content);\n      this.WritePropertyEnd();\n    }\n\n    public WriteFloatProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteFloat(content);\n      this.WritePropertyEnd();\n    }\n\n    // Prepare a new property name, which will be use to add the\n    // new object when calling _addToCurrentObject() from a Write\n    // method.\n    public WritePropertyStart(name: any) {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._propertyNameStack.push(name);\n\n      this.IncrementChildCount();\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n    }\n\n    public WritePropertyEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Property);\n      this.Assert(this.childCount === 1);\n      this._stateStack.pop();\n    }\n\n    // Prepare a new property name, except this time, the property name\n    // will be created by concatenating all the strings passed to\n    // WritePropertyNameInner.\n    public WritePropertyNameStart() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this.IncrementChildCount();\n\n      this._currentPropertyName = \"\";\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.PropertyName)\n      );\n    }\n\n    public WritePropertyNameEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._propertyNameStack.push(this._currentPropertyName!);\n      this._currentPropertyName = null;\n      this._stateStack.pop();\n    }\n\n    public WritePropertyNameInner(str: string) {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._currentPropertyName += str;\n    }\n\n    // Add a new array.\n    public WriteArrayStart() {\n      this.StartNewObject(true);\n\n      let newObject: any[] = [];\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This array is created as the value of a property,\n        // inside an object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This array is created as the child of another array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This array is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Array)\n      );\n    }\n\n    public WriteArrayEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Array);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Add the value to the appropriate collection (array / object), given the current\n    // context.\n    public Write(\n      value: number | string | boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      escape: boolean = true\n    ) {\n      if (value === null) {\n        console.error(\"Warning: trying to write a null value\");\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteBool(value: boolean | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteInt(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n\n      // Math.floor is used as a precaution:\n      //     1. to ensure that the value is written as an integer\n      //        (without a fractional part -> 1 instead of 1.0), even\n      //        though it should be the default behaviour of\n      //        JSON.serialize;\n      //     2. to ensure that if a floating number is passed\n      //        accidentally, it's converted to an integer.\n      //\n      // This guarantees savegame compatibility with the reference\n      // implementation.\n      this._addToCurrentObject(Math.floor(value));\n    }\n\n    // Since JSON doesn't support NaN and Infinity, these values\n    // are converted here.\n    public WriteFloat(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      if (value == Number.POSITIVE_INFINITY) {\n        this._addToCurrentObject(3.4e38);\n      } else if (value == Number.NEGATIVE_INFINITY) {\n        this._addToCurrentObject(-3.4e38);\n      } else if (isNaN(value)) {\n        this._addToCurrentObject(0.0);\n      } else {\n        this._addToCurrentObject(value);\n      }\n    }\n\n    public WriteNull() {\n      this.StartNewObject(false);\n      this._addToCurrentObject(null);\n    }\n\n    // Prepare a string before adding it to the current collection in\n    // WriteStringEnd(). The string will be a concatenation of all the\n    // strings passed to WriteStringInner.\n    public WriteStringStart() {\n      this.StartNewObject(false);\n      this._currentString = \"\";\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.String)\n      );\n    }\n\n    public WriteStringEnd() {\n      this.Assert(this.state == SimpleJson.Writer.State.String);\n      this._stateStack.pop();\n      this._addToCurrentObject(this._currentString);\n      this._currentString = null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public WriteStringInner(str: string | null, escape: boolean = true) {\n      this.Assert(this.state === SimpleJson.Writer.State.String);\n\n      if (str === null) {\n        console.error(\"Warning: trying to write a null string\");\n        return;\n      }\n\n      this._currentString += str;\n    }\n\n    // Serialise the root object into a JSON string.\n    public toString() {\n      if (this._jsonObject === null) {\n        return \"\";\n      }\n\n      return JSON.stringify(this._jsonObject);\n    }\n\n    // Prepare the state stack when adding new objects / values.\n    private StartNewObject(container: boolean) {\n      if (container) {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.None ||\n            this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      } else {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      }\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(this.childCount === 0);\n      }\n\n      if (\n        this.state === SimpleJson.Writer.State.Array ||\n        this.state === SimpleJson.Writer.State.Property\n      ) {\n        this.IncrementChildCount();\n      }\n    }\n\n    // These getters peek all the different stacks.\n\n    private get state() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].type;\n      } else {\n        return SimpleJson.Writer.State.None;\n      }\n    }\n\n    private get childCount() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].childCount;\n      } else {\n        return 0;\n      }\n    }\n\n    private get currentCollection() {\n      if (this._collectionStack.length > 0) {\n        return this._collectionStack[this._collectionStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private get currentPropertyName() {\n      if (this._propertyNameStack.length > 0) {\n        return this._propertyNameStack[this._propertyNameStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private IncrementChildCount() {\n      this.Assert(this._stateStack.length > 0);\n      let currEl = this._stateStack.pop()!;\n      currEl.childCount++;\n      this._stateStack.push(currEl);\n    }\n\n    private Assert(condition: boolean) {\n      if (!condition) throw Error(\"Assert failed while writing JSON\");\n    }\n\n    // This method did not exist in the original C# code. It adds\n    // the given value to the current collection (used by Write methods).\n    private _addToCurrentObject(value: number | string | boolean | null) {\n      this.Assert(this.currentCollection !== null);\n      if (this.state === SimpleJson.Writer.State.Array) {\n        this.Assert(Array.isArray(this.currentCollection));\n        (this.currentCollection as any[]).push(value);\n      } else if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(!Array.isArray(this.currentCollection));\n        this.Assert(this.currentPropertyName !== null);\n        (this.currentCollection as Record<string, any>)[\n          this.currentPropertyName!\n        ] = value;\n        this._propertyNameStack.pop();\n      }\n    }\n\n    // In addition to `_stateStack` present in the original code,\n    // this implementation of SimpleJson use two other stacks and two\n    // temporary variables holding the current context.\n\n    // Used to keep track of the current property name being built\n    // with `WritePropertyNameStart`, `WritePropertyNameInner` and\n    // `WritePropertyNameEnd`.\n    private _currentPropertyName: string | null = null;\n\n    // Used to keep track of the current string value being built\n    // with `WriteStringStart`, `WriteStringInner` and\n    // `WriteStringEnd`.\n    private _currentString: string | null = null;\n\n    private _stateStack: SimpleJson.Writer.StateElement[] = [];\n\n    // Keep track of the current collection being built (either an array\n    // or an object). For instance, at the '?' step during the hiarchy\n    // creation, this hierarchy:\n    // [3, {a: [b, ?]}] will have this corresponding stack:\n    // (bottom) [Array, Object, Array] (top)\n    private _collectionStack: Array<any[] | Record<string, any>> = [];\n\n    // Keep track of the current property being assigned. For instance, at\n    // the '?' step during the hiarchy creation, this hierarchy:\n    // [3, {a: [b, {c: ?}]}] will have this corresponding stack:\n    // (bottom) [a, c] (top)\n    private _propertyNameStack: string[] = [];\n\n    // Object containing the entire hiearchy.\n    private _jsonObject: Record<string, any> | any[] | null = null;\n  }\n\n  export namespace Writer {\n    export enum State {\n      None,\n      Object,\n      Array,\n      Property,\n      PropertyName,\n      String,\n    }\n\n    export class StateElement {\n      public type: SimpleJson.Writer.State = SimpleJson.Writer.State.None;\n      public childCount: number = 0;\n\n      constructor(type: SimpleJson.Writer.State) {\n        this.type = type;\n      }\n    }\n  }\n}\n","import { CallStack } from \"./CallStack\";\nimport { Choice } from \"./Choice\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { InkObject } from \"./Object\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Story } from \"./Story\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Flow {\n  public name: string;\n  public callStack: CallStack;\n  public outputStream: InkObject[];\n  public currentChoices: Choice[];\n\n  constructor(name: String, story: Story);\n  constructor(name: String, story: Story, jObject: Record<string, any>);\n  constructor() {\n    let name = arguments[0] as string;\n    let story = arguments[1] as Story;\n\n    this.name = name;\n    this.callStack = new CallStack(story);\n\n    if (arguments[2]) {\n      let jObject = arguments[2] as Record<string, any>;\n\n      this.callStack.SetJsonToken(jObject[\"callstack\"], story);\n      this.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"]\n      );\n      this.currentChoices = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"currentChoices\"]\n      ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      if (typeof jChoiceThreadsObj !== \"undefined\") {\n        this.LoadFlowChoiceThreads(jChoiceThreadsObj, story);\n      }\n    } else {\n      this.outputStream = [];\n      this.currentChoices = [];\n    }\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WriteProperty(\"callstack\", (w) => this.callStack.WriteJson(w));\n    writer.WriteProperty(\"outputStream\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.outputStream)\n    );\n\n    let hasChoiceThreads = false;\n    for (let c of this.currentChoices) {\n      if (c.threadAtGeneration === null)\n        return throwNullException(\"c.threadAtGeneration\");\n\n      c.originalThreadIndex = c.threadAtGeneration.threadIndex;\n\n      if (this.callStack.ThreadWithIndex(c.originalThreadIndex) === null) {\n        if (!hasChoiceThreads) {\n          hasChoiceThreads = true;\n          writer.WritePropertyStart(\"choiceThreads\");\n          writer.WriteObjectStart();\n        }\n\n        writer.WritePropertyStart(c.originalThreadIndex);\n        c.threadAtGeneration.WriteJson(writer);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (hasChoiceThreads) {\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteProperty(\"currentChoices\", (w) => {\n      w.WriteArrayStart();\n      for (let c of this.currentChoices) {\n        JsonSerialisation.WriteChoice(w, c);\n      }\n      w.WriteArrayEnd();\n    });\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadFlowChoiceThreads(\n    jChoiceThreads: Record<string, any>,\n    story: Story\n  ) {\n    for (let choice of this.currentChoices) {\n      let foundActiveThread = this.callStack.ThreadWithIndex(\n        choice.originalThreadIndex\n      );\n      if (foundActiveThread !== null) {\n        choice.threadAtGeneration = foundActiveThread.Copy();\n      } else {\n        let jSavedChoiceThread =\n          jChoiceThreads[`${choice.originalThreadIndex}`];\n        choice.threadAtGeneration = new CallStack.Thread(\n          jSavedChoiceThread,\n          story\n        );\n      }\n    }\n  }\n}\n","// TODO: Unify with Compiler.\n\nexport type ErrorHandler = (message: string, type: ErrorType) => void;\n\nexport enum ErrorType {\n  Author,\n  Warning,\n  Error,\n}\n","import { CallStack } from \"./CallStack\";\nimport { VariablesState } from \"./VariablesState\";\nimport { ValueType, Value, StringValue, ListValue } from \"./Value\";\nimport { PushPopType } from \"./PushPop\";\nimport { Tag } from \"./Tag\";\nimport { Glue } from \"./Glue\";\nimport { Path } from \"./Path\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { PRNG } from \"./PRNG\";\nimport { Void } from \"./Void\";\nimport { Pointer } from \"./Pointer\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { Choice } from \"./Choice\";\nimport { asOrNull, asOrThrows, nullIfUndefined } from \"./TypeAssertion\";\nimport { Debug } from \"./Debug\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { throwNullException } from \"./NullException\";\nimport { Story } from \"./Story\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Flow } from \"./Flow\";\nimport { InkList } from \"./InkList\";\n\nexport class StoryState {\n  // Backward compatible changes since v8:\n  // v10: dynamic tags\n  // v9:  multi-flows\n  public readonly kInkSaveStateVersion = 10;\n  public readonly kMinCompatibleLoadVersion = 8;\n\n  public onDidLoadState: (() => void) | null = null;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public ToJson(indented: boolean = false) {\n    let writer = new SimpleJson.Writer();\n    this.WriteJson(writer);\n    return writer.toString();\n  }\n  public toJson(indented: boolean = false) {\n    return this.ToJson(indented);\n  }\n\n  public LoadJson(json: string) {\n    let jObject = SimpleJson.TextToDictionary(json);\n    this.LoadJsonObj(jObject);\n    if (this.onDidLoadState !== null) this.onDidLoadState();\n  }\n\n  public VisitCountAtPathString(pathString: string) {\n    let visitCountOut;\n\n    if (this._patch !== null) {\n      let container = this.story.ContentAtPath(new Path(pathString)).container;\n      if (container === null)\n        throw new Error(\"Content at path not found: \" + pathString);\n\n      visitCountOut = this._patch.TryGetVisitCount(container, 0);\n      if (visitCountOut.exists) return visitCountOut.result;\n    }\n\n    visitCountOut = tryGetValueFromMap(this._visitCounts, pathString, null);\n    if (visitCountOut.exists) return visitCountOut.result;\n\n    return 0;\n  }\n\n  public VisitCountForContainer(container: Container | null): number {\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    if (!container.visitsShouldBeCounted) {\n      this.story.Error(\n        \"Read count for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n      return 0;\n    }\n\n    if (this._patch !== null) {\n      let count = this._patch.TryGetVisitCount(container, 0);\n      if (count.exists) {\n        return count.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let count2 = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count2.exists) {\n      return count2.result!;\n    }\n\n    return 0;\n  }\n\n  public IncrementVisitCountForContainer(container: Container) {\n    if (this._patch !== null) {\n      let currCount = this.VisitCountForContainer(container);\n      currCount++;\n      this._patch.SetVisitCount(container, currCount);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    let count = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count.exists) {\n      this._visitCounts.set(containerPathStr, count.result! + 1);\n    } else {\n      this._visitCounts.set(containerPathStr, 1);\n    }\n  }\n\n  public RecordTurnIndexVisitToContainer(container: Container) {\n    if (this._patch !== null) {\n      this._patch.SetTurnIndex(container, this.currentTurnIndex);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    this._turnIndices.set(containerPathStr, this.currentTurnIndex);\n  }\n\n  public TurnsSinceForContainer(container: Container) {\n    if (!container.turnIndexShouldBeCounted) {\n      this.story.Error(\n        \"TURNS_SINCE() for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n    }\n\n    if (this._patch !== null) {\n      let index = this._patch.TryGetTurnIndex(container, 0);\n      if (index.exists) {\n        return this.currentTurnIndex - index.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let index2 = tryGetValueFromMap(this._turnIndices, containerPathStr, 0);\n    if (index2.exists) {\n      return this.currentTurnIndex - index2.result!;\n    } else {\n      return -1;\n    }\n  }\n\n  get callstackDepth() {\n    return this.callStack.depth;\n  }\n\n  get outputStream() {\n    return this._currentFlow.outputStream;\n  }\n\n  get currentChoices() {\n    // If we can continue generating text content rather than choices,\n    // then we reflect the choice list as being empty, since choices\n    // should always come at the end.\n    if (this.canContinue) return [];\n    return this._currentFlow.currentChoices;\n  }\n\n  get generatedChoices() {\n    return this._currentFlow.currentChoices;\n  }\n\n  get currentErrors() {\n    return this._currentErrors;\n  }\n  private _currentErrors: string[] | null = null;\n\n  get currentWarnings() {\n    return this._currentWarnings;\n  }\n  private _currentWarnings: string[] | null = null;\n\n  get variablesState() {\n    return this._variablesState;\n  }\n  set variablesState(value) {\n    this._variablesState = value;\n  }\n  private _variablesState: VariablesState;\n\n  get callStack() {\n    return this._currentFlow.callStack;\n  }\n\n  get evaluationStack() {\n    return this._evaluationStack;\n  }\n  private _evaluationStack: InkObject[];\n\n  public divertedPointer: Pointer = Pointer.Null;\n\n  get currentTurnIndex() {\n    return this._currentTurnIndex;\n  }\n  set currentTurnIndex(value) {\n    this._currentTurnIndex = value;\n  }\n  private _currentTurnIndex: number = 0;\n\n  public storySeed: number = 0;\n  public previousRandom: number = 0;\n  public didSafeExit: boolean = false;\n\n  public story: Story;\n\n  get currentPathString() {\n    let pointer = this.currentPointer;\n    if (pointer.isNull) {\n      return null;\n    } else {\n      if (pointer.path === null) {\n        return throwNullException(\"pointer.path\");\n      }\n      return pointer.path.toString();\n    }\n  }\n\n  get currentPointer() {\n    return this.callStack.currentElement.currentPointer.copy();\n  }\n\n  set currentPointer(value) {\n    this.callStack.currentElement.currentPointer = value.copy();\n  }\n\n  get previousPointer() {\n    return this.callStack.currentThread.previousPointer.copy();\n  }\n\n  set previousPointer(value) {\n    this.callStack.currentThread.previousPointer = value.copy();\n  }\n\n  get canContinue() {\n    return !this.currentPointer.isNull && !this.hasError;\n  }\n\n  get hasError() {\n    return this.currentErrors != null && this.currentErrors.length > 0;\n  }\n\n  get hasWarning() {\n    return this.currentWarnings != null && this.currentWarnings.length > 0;\n  }\n\n  get currentText() {\n    if (this._outputStreamTextDirty) {\n      let sb = new StringBuilder();\n\n      let inTag: boolean = false;\n\n      for (let outputObj of this.outputStream) {\n        // var textContent = outputObj as StringValue;\n        let textContent = asOrNull(outputObj, StringValue);\n        if (!inTag && textContent !== null) {\n          sb.Append(textContent.value);\n        } else {\n          let controlCommand = asOrNull(outputObj, ControlCommand);\n          if (controlCommand !== null) {\n            if (\n              controlCommand.commandType == ControlCommand.CommandType.BeginTag\n            ) {\n              inTag = true;\n            } else if (\n              controlCommand.commandType == ControlCommand.CommandType.EndTag\n            ) {\n              inTag = false;\n            }\n          }\n        }\n      }\n\n      this._currentText = this.CleanOutputWhitespace(sb.toString());\n      this._outputStreamTextDirty = false;\n    }\n\n    return this._currentText;\n  }\n  private _currentText: string | null = null;\n\n  public CleanOutputWhitespace(str: string) {\n    let sb = new StringBuilder();\n\n    let currentWhitespaceStart = -1;\n    let startOfLine = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      let c = str.charAt(i);\n\n      let isInlineWhitespace = c == \" \" || c == \"\\t\";\n\n      if (isInlineWhitespace && currentWhitespaceStart == -1)\n        currentWhitespaceStart = i;\n\n      if (!isInlineWhitespace) {\n        if (\n          c != \"\\n\" &&\n          currentWhitespaceStart > 0 &&\n          currentWhitespaceStart != startOfLine\n        ) {\n          sb.Append(\" \");\n        }\n        currentWhitespaceStart = -1;\n      }\n\n      if (c == \"\\n\") startOfLine = i + 1;\n\n      if (!isInlineWhitespace) sb.Append(c);\n    }\n\n    return sb.toString();\n  }\n\n  get currentTags() {\n    if (this._outputStreamTagsDirty) {\n      this._currentTags = [];\n      let inTag: boolean = false;\n      let sb = new StringBuilder();\n\n      for (let outputObj of this.outputStream) {\n        let controlCommand = asOrNull(outputObj, ControlCommand);\n        if (controlCommand != null) {\n          if (\n            controlCommand.commandType == ControlCommand.CommandType.BeginTag\n          ) {\n            if (inTag && sb.Length > 0) {\n              let txt = this.CleanOutputWhitespace(sb.toString());\n              this._currentTags.push(txt);\n              sb.Clear();\n            }\n            inTag = true;\n          } else if (\n            controlCommand.commandType == ControlCommand.CommandType.EndTag\n          ) {\n            if (sb.Length > 0) {\n              let txt = this.CleanOutputWhitespace(sb.toString());\n              this._currentTags.push(txt);\n              sb.Clear();\n            }\n            inTag = false;\n          }\n        } else if (inTag) {\n          let strVal = asOrNull(outputObj, StringValue);\n          if (strVal !== null) {\n            sb.Append(strVal.value);\n          }\n        } else {\n          let tag = asOrNull(outputObj, Tag);\n          if (tag != null && tag.text != null && tag.text.length > 0) {\n            this._currentTags.push(tag.text); // tag.text has whitespae already cleaned\n          }\n        }\n      }\n\n      if (sb.Length > 0) {\n        let txt = this.CleanOutputWhitespace(sb.toString());\n        this._currentTags.push(txt);\n        sb.Clear();\n      }\n\n      this._outputStreamTagsDirty = false;\n    }\n\n    return this._currentTags;\n  }\n  private _currentTags: string[] | null = null;\n\n  get currentFlowName() {\n    return this._currentFlow.name;\n  }\n\n  get currentFlowIsDefaultFlow() {\n    return this._currentFlow.name == this.kDefaultFlowName;\n  }\n\n  get aliveFlowNames() {\n    if (this._aliveFlowNamesDirty) {\n      this._aliveFlowNames = [];\n\n      if (this._namedFlows != null) {\n        for (let flowName of this._namedFlows.keys()) {\n          if (flowName != this.kDefaultFlowName) {\n            this._aliveFlowNames.push(flowName);\n          }\n        }\n      }\n\n      this._aliveFlowNamesDirty = false;\n    }\n\n    return this._aliveFlowNames;\n  }\n\n  get inExpressionEvaluation() {\n    return this.callStack.currentElement.inExpressionEvaluation;\n  }\n  set inExpressionEvaluation(value) {\n    this.callStack.currentElement.inExpressionEvaluation = value;\n  }\n\n  constructor(story: Story) {\n    this.story = story;\n\n    this._currentFlow = new Flow(this.kDefaultFlowName, story);\n    this.OutputStreamDirty();\n\n    this._aliveFlowNamesDirty = true;\n    this._evaluationStack = [];\n\n    this._variablesState = new VariablesState(\n      this.callStack,\n      story.listDefinitions\n    );\n\n    this._visitCounts = new Map();\n    this._turnIndices = new Map();\n    this.currentTurnIndex = -1;\n\n    let timeSeed = new Date().getTime();\n    this.storySeed = new PRNG(timeSeed).next() % 100;\n    this.previousRandom = 0;\n\n    this.GoToStart();\n  }\n\n  public GoToStart() {\n    this.callStack.currentElement.currentPointer = Pointer.StartOf(\n      this.story.mainContentContainer\n    );\n  }\n\n  public SwitchFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.SwitchFlow\");\n\n    if (this._namedFlows === null) {\n      this._namedFlows = new Map();\n      this._namedFlows.set(this.kDefaultFlowName, this._currentFlow);\n    }\n\n    if (flowName === this._currentFlow.name) {\n      return;\n    }\n\n    let flow: Flow;\n    let content = tryGetValueFromMap(this._namedFlows, flowName, null);\n    if (content.exists) {\n      flow = content.result!;\n    } else {\n      flow = new Flow(flowName, this.story);\n      this._namedFlows.set(flowName, flow);\n      this._aliveFlowNamesDirty = true;\n    }\n\n    this._currentFlow = flow;\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this.OutputStreamDirty();\n  }\n\n  public SwitchToDefaultFlow_Internal() {\n    if (this._namedFlows === null) return;\n    this.SwitchFlow_Internal(this.kDefaultFlowName);\n  }\n\n  public RemoveFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.DestroyFlow\");\n    if (flowName === this.kDefaultFlowName)\n      throw new Error(\"Cannot destroy default flow\");\n\n    if (this._currentFlow.name === flowName) {\n      this.SwitchToDefaultFlow_Internal();\n    }\n\n    if (this._namedFlows === null)\n      return throwNullException(\"this._namedFlows\");\n    this._namedFlows.delete(flowName);\n    this._aliveFlowNamesDirty = true;\n  }\n\n  public CopyAndStartPatching() {\n    let copy = new StoryState(this.story);\n\n    copy._patch = new StatePatch(this._patch);\n\n    copy._currentFlow.name = this._currentFlow.name;\n    copy._currentFlow.callStack = new CallStack(this._currentFlow.callStack);\n    copy._currentFlow.currentChoices.push(...this._currentFlow.currentChoices);\n    copy._currentFlow.outputStream.push(...this._currentFlow.outputStream);\n    copy.OutputStreamDirty();\n\n    if (this._namedFlows !== null) {\n      copy._namedFlows = new Map();\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        copy._namedFlows.set(namedFlowKey, namedFlowValue);\n        copy._aliveFlowNamesDirty = true;\n      }\n      copy._namedFlows.set(this._currentFlow.name, copy._currentFlow);\n    }\n\n    if (this.hasError) {\n      copy._currentErrors = [];\n      copy._currentErrors.push(...(this.currentErrors || []));\n    }\n\n    if (this.hasWarning) {\n      copy._currentWarnings = [];\n      copy._currentWarnings.push(...(this.currentWarnings || []));\n    }\n\n    copy.variablesState = this.variablesState;\n    copy.variablesState.callStack = copy.callStack;\n    copy.variablesState.patch = copy._patch;\n\n    copy.evaluationStack.push(...this.evaluationStack);\n\n    if (!this.divertedPointer.isNull)\n      copy.divertedPointer = this.divertedPointer.copy();\n\n    copy.previousPointer = this.previousPointer.copy();\n\n    copy._visitCounts = this._visitCounts;\n    copy._turnIndices = this._turnIndices;\n\n    copy.currentTurnIndex = this.currentTurnIndex;\n    copy.storySeed = this.storySeed;\n    copy.previousRandom = this.previousRandom;\n\n    copy.didSafeExit = this.didSafeExit;\n\n    return copy;\n  }\n\n  public RestoreAfterPatch() {\n    this.variablesState.callStack = this.callStack;\n    this.variablesState.patch = this._patch;\n  }\n\n  public ApplyAnyPatch() {\n    if (this._patch === null) return;\n\n    this.variablesState.ApplyPatch();\n\n    for (let [key, value] of this._patch.visitCounts)\n      this.ApplyCountChanges(key, value, true);\n\n    for (let [key, value] of this._patch.turnIndices)\n      this.ApplyCountChanges(key, value, false);\n\n    this._patch = null;\n  }\n\n  public ApplyCountChanges(\n    container: Container,\n    newCount: number,\n    isVisit: boolean\n  ) {\n    let counts = isVisit ? this._visitCounts : this._turnIndices;\n    counts.set(container.path.toString(), newCount);\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WritePropertyStart(\"flows\");\n    writer.WriteObjectStart();\n\n    // NOTE: Never pass `WriteJson` directly as an argument to `WriteProperty`.\n    // Call it inside a function to make sure `this` is correctly bound\n    // and passed down the call hierarchy.\n\n    if (this._namedFlows !== null) {\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        writer.WriteProperty(namedFlowKey, (w) => namedFlowValue.WriteJson(w));\n      }\n    } else {\n      writer.WriteProperty(this._currentFlow.name, (w) =>\n        this._currentFlow.WriteJson(w)\n      );\n    }\n\n    writer.WriteObjectEnd();\n    writer.WritePropertyEnd();\n\n    writer.WriteProperty(\"currentFlowName\", this._currentFlow.name);\n\n    writer.WriteProperty(\"variablesState\", (w) =>\n      this.variablesState.WriteJson(w)\n    );\n\n    writer.WriteProperty(\"evalStack\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.evaluationStack)\n    );\n\n    if (!this.divertedPointer.isNull) {\n      if (this.divertedPointer.path === null) {\n        return throwNullException(\"divertedPointer\");\n      }\n      writer.WriteProperty(\n        \"currentDivertTarget\",\n        this.divertedPointer.path.componentsString\n      );\n    }\n\n    writer.WriteProperty(\"visitCounts\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._visitCounts)\n    );\n    writer.WriteProperty(\"turnIndices\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._turnIndices)\n    );\n\n    writer.WriteIntProperty(\"turnIdx\", this.currentTurnIndex);\n    writer.WriteIntProperty(\"storySeed\", this.storySeed);\n    writer.WriteIntProperty(\"previousRandom\", this.previousRandom);\n\n    writer.WriteIntProperty(\"inkSaveVersion\", this.kInkSaveStateVersion);\n\n    writer.WriteIntProperty(\"inkFormatVersion\", Story.inkVersionCurrent);\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadJsonObj(value: Record<string, any>) {\n    let jObject = value;\n\n    let jSaveVersion = jObject[\"inkSaveVersion\"];\n    if (jSaveVersion == null) {\n      throw new Error(\"ink save format incorrect, can't load.\");\n    } else if (parseInt(jSaveVersion) < this.kMinCompatibleLoadVersion) {\n      throw new Error(\n        \"Ink save format isn't compatible with the current version (saw '\" +\n          jSaveVersion +\n          \"', but minimum is \" +\n          this.kMinCompatibleLoadVersion +\n          \"), so can't load.\"\n      );\n    }\n\n    let flowsObj = jObject[\"flows\"];\n    if (flowsObj != null) {\n      let flowsObjDict = flowsObj as Record<string, any>;\n\n      // Single default flow\n      if (Object.keys(flowsObjDict).length === 1) {\n        this._namedFlows = null;\n      } else if (this._namedFlows === null) {\n        this._namedFlows = new Map();\n      } else {\n        this._namedFlows.clear();\n      }\n\n      let flowsObjDictEntries = Object.entries(flowsObjDict);\n      for (let [namedFlowObjKey, namedFlowObjValue] of flowsObjDictEntries) {\n        let name = namedFlowObjKey;\n        let flowObj = namedFlowObjValue as Record<string, any>;\n\n        let flow = new Flow(name, this.story, flowObj);\n\n        if (Object.keys(flowsObjDict).length === 1) {\n          this._currentFlow = new Flow(name, this.story, flowObj);\n        } else {\n          if (this._namedFlows === null)\n            return throwNullException(\"this._namedFlows\");\n          this._namedFlows.set(name, flow);\n        }\n      }\n\n      if (this._namedFlows != null && this._namedFlows.size > 1) {\n        let currFlowName = jObject[\"currentFlowName\"] as string;\n        // Adding a bang at the end, because we're trusting the save, as\n        // done in upstream.  If the save is corrupted, the execution\n        // is undefined.\n        this._currentFlow = this._namedFlows.get(currFlowName)!;\n      }\n    } else {\n      this._namedFlows = null;\n      this._currentFlow.name = this.kDefaultFlowName;\n      this._currentFlow.callStack.SetJsonToken(\n        jObject[\"callstackThreads\"] as Record<string, any>,\n        this.story\n      );\n      this._currentFlow.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"] as any[]\n      );\n      this._currentFlow.currentChoices =\n        JsonSerialisation.JArrayToRuntimeObjList(\n          jObject[\"currentChoices\"] as any[]\n        ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      this._currentFlow.LoadFlowChoiceThreads(jChoiceThreadsObj, this.story);\n    }\n\n    this.OutputStreamDirty();\n    this._aliveFlowNamesDirty = true;\n\n    this.variablesState.SetJsonToken(jObject[\"variablesState\"]);\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this._evaluationStack = JsonSerialisation.JArrayToRuntimeObjList(\n      jObject[\"evalStack\"]\n    );\n\n    let currentDivertTargetPath = jObject[\"currentDivertTarget\"];\n    if (currentDivertTargetPath != null) {\n      let divertPath = new Path(currentDivertTargetPath.toString());\n      this.divertedPointer = this.story.PointerAtPath(divertPath);\n    }\n\n    this._visitCounts = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"visitCounts\"]\n    );\n    this._turnIndices = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"turnIndices\"]\n    );\n    this.currentTurnIndex = parseInt(jObject[\"turnIdx\"]);\n    this.storySeed = parseInt(jObject[\"storySeed\"]);\n    this.previousRandom = parseInt(jObject[\"previousRandom\"]);\n  }\n\n  public ResetErrors() {\n    this._currentErrors = null;\n    this._currentWarnings = null;\n  }\n  public ResetOutput(objs: InkObject[] | null = null) {\n    this.outputStream.length = 0;\n    if (objs !== null) this.outputStream.push(...objs);\n    this.OutputStreamDirty();\n  }\n\n  public PushToOutputStream(obj: InkObject | null) {\n    // var text = obj as StringValue;\n    let text = asOrNull(obj, StringValue);\n    if (text !== null) {\n      let listText = this.TrySplittingHeadTailWhitespace(text);\n      if (listText !== null) {\n        for (let textObj of listText) {\n          this.PushToOutputStreamIndividual(textObj);\n        }\n        this.OutputStreamDirty();\n        return;\n      }\n    }\n\n    this.PushToOutputStreamIndividual(obj);\n    this.OutputStreamDirty();\n  }\n\n  public PopFromOutputStream(count: number) {\n    this.outputStream.splice(this.outputStream.length - count, count);\n    this.OutputStreamDirty();\n  }\n\n  public TrySplittingHeadTailWhitespace(single: StringValue) {\n    let str = single.value;\n    if (str === null) {\n      return throwNullException(\"single.value\");\n    }\n\n    let headFirstNewlineIdx = -1;\n    let headLastNewlineIdx = -1;\n    for (let i = 0; i < str.length; i++) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (headFirstNewlineIdx == -1) headFirstNewlineIdx = i;\n        headLastNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    let tailLastNewlineIdx = -1;\n    let tailFirstNewlineIdx = -1;\n    for (let i = str.length - 1; i >= 0; i--) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (tailLastNewlineIdx == -1) tailLastNewlineIdx = i;\n        tailFirstNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    // No splitting to be done?\n    if (headFirstNewlineIdx == -1 && tailLastNewlineIdx == -1) return null;\n\n    let listTexts: StringValue[] = [];\n    let innerStrStart = 0;\n    let innerStrEnd = str.length;\n\n    if (headFirstNewlineIdx != -1) {\n      if (headFirstNewlineIdx > 0) {\n        let leadingSpaces = new StringValue(\n          str.substring(0, headFirstNewlineIdx)\n        );\n        listTexts.push(leadingSpaces);\n      }\n      listTexts.push(new StringValue(\"\\n\"));\n      innerStrStart = headLastNewlineIdx + 1;\n    }\n\n    if (tailLastNewlineIdx != -1) {\n      innerStrEnd = tailFirstNewlineIdx;\n    }\n\n    if (innerStrEnd > innerStrStart) {\n      let innerStrText = str.substring(\n        innerStrStart,\n        innerStrEnd - innerStrStart\n      );\n      listTexts.push(new StringValue(innerStrText));\n    }\n\n    if (tailLastNewlineIdx != -1 && tailFirstNewlineIdx > headLastNewlineIdx) {\n      listTexts.push(new StringValue(\"\\n\"));\n      if (tailLastNewlineIdx < str.length - 1) {\n        let numSpaces = str.length - tailLastNewlineIdx - 1;\n        let trailingSpaces = new StringValue(\n          str.substring(tailLastNewlineIdx + 1, numSpaces)\n        );\n        listTexts.push(trailingSpaces);\n      }\n    }\n\n    return listTexts;\n  }\n\n  public PushToOutputStreamIndividual(obj: InkObject | null) {\n    let glue = asOrNull(obj, Glue);\n    let text = asOrNull(obj, StringValue);\n\n    let includeInOutput = true;\n\n    if (glue) {\n      this.TrimNewlinesFromOutputStream();\n      includeInOutput = true;\n    } else if (text) {\n      let functionTrimIndex = -1;\n      let currEl = this.callStack.currentElement;\n      if (currEl.type == PushPopType.Function) {\n        functionTrimIndex = currEl.functionStartInOutputStream;\n      }\n\n      let glueTrimIndex = -1;\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let o = this.outputStream[i];\n        let c = o instanceof ControlCommand ? o : null;\n        let g = o instanceof Glue ? o : null;\n\n        if (g != null) {\n          glueTrimIndex = i;\n          break;\n        } else if (\n          c != null &&\n          c.commandType == ControlCommand.CommandType.BeginString\n        ) {\n          if (i >= functionTrimIndex) {\n            functionTrimIndex = -1;\n          }\n          break;\n        }\n      }\n\n      let trimIndex = -1;\n      if (glueTrimIndex != -1 && functionTrimIndex != -1)\n        trimIndex = Math.min(functionTrimIndex, glueTrimIndex);\n      else if (glueTrimIndex != -1) trimIndex = glueTrimIndex;\n      else trimIndex = functionTrimIndex;\n\n      if (trimIndex != -1) {\n        if (text.isNewline) {\n          includeInOutput = false;\n        } else if (text.isNonWhitespace) {\n          if (glueTrimIndex > -1) this.RemoveExistingGlue();\n\n          if (functionTrimIndex > -1) {\n            let callStackElements = this.callStack.elements;\n            for (let i = callStackElements.length - 1; i >= 0; i--) {\n              let el = callStackElements[i];\n              if (el.type == PushPopType.Function) {\n                el.functionStartInOutputStream = -1;\n              } else {\n                break;\n              }\n            }\n          }\n        }\n      } else if (text.isNewline) {\n        if (this.outputStreamEndsInNewline || !this.outputStreamContainsContent)\n          includeInOutput = false;\n      }\n    }\n\n    if (includeInOutput) {\n      if (obj === null) {\n        return throwNullException(\"obj\");\n      }\n      this.outputStream.push(obj);\n      this.OutputStreamDirty();\n    }\n  }\n\n  public TrimNewlinesFromOutputStream() {\n    let removeWhitespaceFrom = -1;\n\n    let i = this.outputStream.length - 1;\n    while (i >= 0) {\n      let obj = this.outputStream[i];\n      let cmd = asOrNull(obj, ControlCommand);\n      let txt = asOrNull(obj, StringValue);\n\n      if (cmd != null || (txt != null && txt.isNonWhitespace)) {\n        break;\n      } else if (txt != null && txt.isNewline) {\n        removeWhitespaceFrom = i;\n      }\n      i--;\n    }\n\n    // Remove the whitespace\n    if (removeWhitespaceFrom >= 0) {\n      i = removeWhitespaceFrom;\n      while (i < this.outputStream.length) {\n        let text = asOrNull(this.outputStream[i], StringValue);\n        if (text) {\n          this.outputStream.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  public RemoveExistingGlue() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let c = this.outputStream[i];\n      if (c instanceof Glue) {\n        this.outputStream.splice(i, 1);\n      } else if (c instanceof ControlCommand) {\n        break;\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  get outputStreamEndsInNewline() {\n    if (this.outputStream.length > 0) {\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let obj = this.outputStream[i];\n        if (obj instanceof ControlCommand) break;\n        let text = this.outputStream[i];\n        if (text instanceof StringValue) {\n          if (text.isNewline) return true;\n          else if (text.isNonWhitespace) break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  get outputStreamContainsContent() {\n    for (let content of this.outputStream) {\n      if (content instanceof StringValue) return true;\n    }\n    return false;\n  }\n\n  get inStringEvaluation() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let cmd = asOrNull(this.outputStream[i], ControlCommand);\n      if (\n        cmd instanceof ControlCommand &&\n        cmd.commandType == ControlCommand.CommandType.BeginString\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public PushEvaluationStack(obj: InkObject | null) {\n    // var listValue = obj as ListValue;\n    let listValue = asOrNull(obj, ListValue);\n    if (listValue) {\n      // Update origin when list is has something to indicate the list origin\n      let rawList = listValue.value;\n      if (rawList === null) {\n        return throwNullException(\"rawList\");\n      }\n\n      if (rawList.originNames != null) {\n        if (!rawList.origins) rawList.origins = [];\n        rawList.origins.length = 0;\n\n        for (let n of rawList.originNames) {\n          if (this.story.listDefinitions === null)\n            return throwNullException(\"StoryState.story.listDefinitions\");\n          let def = this.story.listDefinitions.TryListGetDefinition(n, null);\n          if (def.result === null)\n            return throwNullException(\"StoryState def.result\");\n          if (rawList.origins.indexOf(def.result) < 0)\n            rawList.origins.push(def.result);\n        }\n      }\n    }\n\n    if (obj === null) {\n      return throwNullException(\"obj\");\n    }\n    this.evaluationStack.push(obj);\n  }\n\n  public PopEvaluationStack(): InkObject;\n  public PopEvaluationStack(numberOfObjects: number): InkObject[];\n  public PopEvaluationStack(numberOfObjects?: number) {\n    if (typeof numberOfObjects === \"undefined\") {\n      let obj = this.evaluationStack.pop();\n      return nullIfUndefined(obj);\n    } else {\n      if (numberOfObjects > this.evaluationStack.length) {\n        throw new Error(\"trying to pop too many objects\");\n      }\n\n      let popped = this.evaluationStack.splice(\n        this.evaluationStack.length - numberOfObjects,\n        numberOfObjects\n      );\n      return nullIfUndefined(popped);\n    }\n  }\n\n  public PeekEvaluationStack() {\n    return this.evaluationStack[this.evaluationStack.length - 1];\n  }\n\n  public ForceEnd() {\n    this.callStack.Reset();\n\n    this._currentFlow.currentChoices.length = 0;\n\n    this.currentPointer = Pointer.Null;\n    this.previousPointer = Pointer.Null;\n\n    this.didSafeExit = true;\n  }\n\n  public TrimWhitespaceFromFunctionEnd() {\n    Debug.Assert(this.callStack.currentElement.type == PushPopType.Function);\n    let functionStartPoint =\n      this.callStack.currentElement.functionStartInOutputStream;\n\n    if (functionStartPoint == -1) {\n      functionStartPoint = 0;\n    }\n\n    for (let i = this.outputStream.length - 1; i >= functionStartPoint; i--) {\n      let obj = this.outputStream[i];\n      let txt = asOrNull(obj, StringValue);\n      let cmd = asOrNull(obj, ControlCommand);\n\n      if (txt == null) continue;\n      if (cmd) break;\n\n      if (txt.isNewline || txt.isInlineWhitespace) {\n        this.outputStream.splice(i, 1);\n        this.OutputStreamDirty();\n      } else {\n        break;\n      }\n    }\n  }\n\n  public PopCallStack(popType: PushPopType | null = null) {\n    if (this.callStack.currentElement.type == PushPopType.Function)\n      this.TrimWhitespaceFromFunctionEnd();\n\n    this.callStack.Pop(popType);\n  }\n\n  public SetChosenPath(path: Path, incrementingTurnIndex: boolean) {\n    // Changing direction, assume we need to clear current set of choices\n    this._currentFlow.currentChoices.length = 0;\n\n    let newPointer = this.story.PointerAtPath(path);\n    if (!newPointer.isNull && newPointer.index == -1) newPointer.index = 0;\n\n    this.currentPointer = newPointer;\n\n    if (incrementingTurnIndex) {\n      this.currentTurnIndex++;\n    }\n  }\n\n  public StartFunctionEvaluationFromGame(\n    funcContainer: Container,\n    args: any[]\n  ) {\n    this.callStack.Push(\n      PushPopType.FunctionEvaluationFromGame,\n      this.evaluationStack.length\n    );\n    this.callStack.currentElement.currentPointer =\n      Pointer.StartOf(funcContainer);\n\n    this.PassArgumentsToEvaluationStack(args);\n  }\n\n  public PassArgumentsToEvaluationStack(args: any[] | null) {\n    if (args !== null) {\n      for (let i = 0; i < args.length; i++) {\n        if (\n          !(\n            typeof args[i] === \"number\" ||\n            typeof args[i] === \"string\" ||\n            typeof args[i] === \"boolean\" ||\n            args[i] instanceof InkList\n          )\n        ) {\n          throw new Error(\n            \"ink arguments when calling EvaluateFunction / ChoosePathStringWithParameters must be\" +\n            \"number, string, bool or InkList. Argument was \" +\n            (nullIfUndefined(arguments[i]) === null)\n              ? \"null\"\n              : arguments[i].constructor.name\n          );\n        }\n\n        this.PushEvaluationStack(Value.Create(args[i]));\n      }\n    }\n  }\n\n  public TryExitFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type ==\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      this.currentPointer = Pointer.Null;\n      this.didSafeExit = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  public CompleteFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type !=\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      throw new Error(\n        \"Expected external function evaluation to be complete. Stack trace: \" +\n          this.callStack.callStackTrace\n      );\n    }\n\n    let originalEvaluationStackHeight =\n      this.callStack.currentElement.evaluationStackHeightWhenPushed;\n\n    let returnedObj: InkObject | null = null;\n    while (this.evaluationStack.length > originalEvaluationStackHeight) {\n      let poppedObj = this.PopEvaluationStack();\n      if (returnedObj === null) returnedObj = poppedObj;\n    }\n\n    this.PopCallStack(PushPopType.FunctionEvaluationFromGame);\n\n    if (returnedObj) {\n      if (returnedObj instanceof Void) return null;\n\n      // Some kind of value, if not void\n      // var returnVal = returnedObj as Runtime.Value;\n      let returnVal = asOrThrows(returnedObj, Value);\n\n      // DivertTargets get returned as the string of components\n      // (rather than a Path, which isn't public)\n      if (returnVal.valueType == ValueType.DivertTarget) {\n        return returnVal.valueObject.toString();\n      }\n\n      // Other types can just have their exact object type:\n      // int, float, string. VariablePointers get returned as strings.\n      return returnVal.valueObject;\n    }\n\n    return null;\n  }\n\n  public AddError(message: string, isWarning: boolean) {\n    if (!isWarning) {\n      if (this._currentErrors == null) this._currentErrors = [];\n      this._currentErrors.push(message);\n    } else {\n      if (this._currentWarnings == null) this._currentWarnings = [];\n      this._currentWarnings.push(message);\n    }\n  }\n\n  public OutputStreamDirty() {\n    this._outputStreamTextDirty = true;\n    this._outputStreamTagsDirty = true;\n  }\n\n  private _visitCounts: Map<string, number>;\n  private _turnIndices: Map<string, number>;\n\n  private _outputStreamTextDirty = true;\n  private _outputStreamTagsDirty = true;\n\n  private _patch: StatePatch | null = null;\n\n  private _currentFlow: Flow;\n  private _aliveFlowNames: string[] | null = null;\n  private _namedFlows: Map<string, Flow> | null = null;\n  private readonly kDefaultFlowName = \"DEFAULT_FLOW\";\n  private _aliveFlowNamesDirty: boolean = true;\n}\n","// This is simple replacement of the Stopwatch class from the .NET Framework.\n// The original class can count time with much more accuracy than the Javascript version.\n// It might be worth considering using `window.performance` in the browser\n// or `process.hrtime()` in node.\nexport class Stopwatch {\n  private startTime: number | undefined;\n\n  constructor() {\n    this.startTime = undefined;\n  }\n\n  get ElapsedMilliseconds(): number {\n    if (typeof this.startTime === \"undefined\") {\n      return 0;\n    }\n    return new Date().getTime() - this.startTime;\n  }\n\n  public Start() {\n    this.startTime = new Date().getTime();\n  }\n  public Stop() {\n    this.startTime = undefined;\n  }\n}\n","import { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { StoryState } from \"./StoryState\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { Choice } from \"./Choice\";\nimport { Divert } from \"./Divert\";\nimport {\n  Value,\n  StringValue,\n  IntValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n} from \"./Value\";\nimport { Path } from \"./Path\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { VariableReference } from \"./VariableReference\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { StoryException } from \"./StoryException\";\nimport { PRNG } from \"./PRNG\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Stopwatch } from \"./StopWatch\";\nimport { Pointer } from \"./Pointer\";\nimport { InkList, InkListItem, KeyValuePair } from \"./InkList\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { DebugMetadata } from \"./DebugMetadata\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { ErrorHandler, ErrorType } from \"./Error\";\n\nexport { InkList } from \"./InkList\";\n\nif (!Number.isInteger) {\n  Number.isInteger = function isInteger(nVal: any) {\n    return (\n      typeof nVal === \"number\" &&\n      isFinite(nVal) &&\n      nVal > -9007199254740992 &&\n      nVal < 9007199254740992 &&\n      Math.floor(nVal) === nVal\n    );\n  };\n}\n\nexport class Story extends InkObject {\n  public static inkVersionCurrent = 21;\n\n  public inkVersionMinimumCompatible = 18;\n\n  get currentChoices() {\n    let choices: Choice[] = [];\n\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    for (let c of this._state.currentChoices) {\n      if (!c.isInvisibleDefault) {\n        c.index = choices.length;\n        choices.push(c);\n      }\n    }\n\n    return choices;\n  }\n\n  get currentText() {\n    this.IfAsyncWeCant(\"call currentText since it's a work in progress\");\n    return this.state.currentText;\n  }\n\n  get currentTags() {\n    this.IfAsyncWeCant(\"call currentTags since it's a work in progress\");\n    return this.state.currentTags;\n  }\n\n  get currentErrors() {\n    return this.state.currentErrors;\n  }\n\n  get currentWarnings() {\n    return this.state.currentWarnings;\n  }\n\n  get currentFlowName() {\n    return this.state.currentFlowName;\n  }\n\n  get currentFlowIsDefaultFlow() {\n    return this.state.currentFlowIsDefaultFlow;\n  }\n\n  get aliveFlowNames() {\n    return this.state.aliveFlowNames;\n  }\n\n  get hasError() {\n    return this.state.hasError;\n  }\n\n  get hasWarning() {\n    return this.state.hasWarning;\n  }\n\n  get variablesState() {\n    return this.state.variablesState;\n  }\n\n  get listDefinitions() {\n    return this._listDefinitions;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  public onError: ErrorHandler | null = null;\n\n  public onDidContinue: (() => void) | null = null;\n\n  public onMakeChoice: ((arg1: Choice) => void) | null = null;\n\n  public onEvaluateFunction: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  public onCompleteEvaluateFunction:\n    | ((arg1: string, arg2: any[], arg3: string, arg4: any) => void)\n    | null = null;\n\n  public onChoosePathString: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  // TODO: Implement Profiler\n  public StartProfiling() {\n    /* */\n  }\n  public EndProfiling() {\n    /* */\n  }\n\n  constructor(contentContainer: Container, lists: ListDefinition[] | null);\n  constructor(jsonString: string);\n  constructor(json: Record<string, any>);\n  constructor() {\n    super();\n\n    // Discrimination between constructors\n    let contentContainer: Container;\n    let lists: ListDefinition[] | null = null;\n    let json: Record<string, any> | null = null;\n\n    if (arguments[0] instanceof Container) {\n      contentContainer = arguments[0] as Container;\n\n      if (typeof arguments[1] !== \"undefined\") {\n        lists = arguments[1] as ListDefinition[];\n      }\n\n      // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n      this._mainContentContainer = contentContainer;\n      // ------\n    } else {\n      if (typeof arguments[0] === \"string\") {\n        let jsonString = arguments[0] as string;\n        json = SimpleJson.TextToDictionary(jsonString);\n      } else {\n        json = arguments[0] as Record<string, any>;\n      }\n    }\n\n    // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n    if (lists != null) this._listDefinitions = new ListDefinitionsOrigin(lists);\n\n    this._externals = new Map();\n    // ------\n\n    // ------ Story(string jsonString) : this((Container)null)\n    if (json !== null) {\n      let rootObject: Record<string, any> = json;\n\n      let versionObj = rootObject[\"inkVersion\"];\n      if (versionObj == null)\n        throw new Error(\n          \"ink version number not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let formatFromFile = parseInt(versionObj);\n      if (formatFromFile > Story.inkVersionCurrent) {\n        throw new Error(\n          \"Version of ink used to build story was newer than the current version of the engine\"\n        );\n      } else if (formatFromFile < this.inkVersionMinimumCompatible) {\n        throw new Error(\n          \"Version of ink used to build story is too old to be loaded by this version of the engine\"\n        );\n      } else if (formatFromFile != Story.inkVersionCurrent) {\n        console.warn(\n          \"WARNING: Version of ink used to build story doesn't match current version of engine. Non-critical, but recommend synchronising.\"\n        );\n      }\n\n      let rootToken = rootObject[\"root\"];\n      if (rootToken == null)\n        throw new Error(\n          \"Root node for ink not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let listDefsObj;\n      if ((listDefsObj = rootObject[\"listDefs\"])) {\n        this._listDefinitions =\n          JsonSerialisation.JTokenToListDefinitions(listDefsObj);\n      }\n\n      this._mainContentContainer = asOrThrows(\n        JsonSerialisation.JTokenToRuntimeObject(rootToken),\n        Container\n      );\n\n      this.ResetState();\n    }\n    // ------\n  }\n\n  // Merge together `public string ToJson()` and `void ToJson(SimpleJson.Writer writer)`.\n  // Will only return a value if writer was not provided.\n  public ToJson(writer?: SimpleJson.Writer): string | void {\n    let shouldReturn = false;\n\n    if (!writer) {\n      shouldReturn = true;\n      writer = new SimpleJson.Writer();\n    }\n\n    writer.WriteObjectStart();\n\n    writer.WriteIntProperty(\"inkVersion\", Story.inkVersionCurrent);\n\n    writer.WriteProperty(\"root\", (w) =>\n      JsonSerialisation.WriteRuntimeContainer(w, this._mainContentContainer)\n    );\n\n    if (this._listDefinitions != null) {\n      writer.WritePropertyStart(\"listDefs\");\n      writer.WriteObjectStart();\n\n      for (let def of this._listDefinitions.lists) {\n        writer.WritePropertyStart(def.name);\n        writer.WriteObjectStart();\n\n        for (let [key, value] of def.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          let val = value;\n          writer.WriteIntProperty(item.itemName, val);\n        }\n\n        writer.WriteObjectEnd();\n        writer.WritePropertyEnd();\n      }\n\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    if (shouldReturn) return writer.toString();\n  }\n\n  public ResetState() {\n    this.IfAsyncWeCant(\"ResetState\");\n\n    this._state = new StoryState(this);\n    this._state.variablesState.ObserveVariableChange(\n      this.VariableStateDidChangeEvent.bind(this)\n    );\n\n    this.ResetGlobals();\n  }\n\n  public ResetErrors() {\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ResetErrors();\n  }\n\n  public ResetCallstack() {\n    this.IfAsyncWeCant(\"ResetCallstack\");\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ForceEnd();\n  }\n\n  public ResetGlobals() {\n    if (this._mainContentContainer.namedContent.get(\"global decl\")) {\n      let originalPointer = this.state.currentPointer.copy();\n\n      this.ChoosePath(new Path(\"global decl\"), false);\n\n      this.ContinueInternal();\n\n      this.state.currentPointer = originalPointer;\n    }\n\n    this.state.variablesState.SnapshotDefaultGlobals();\n  }\n\n  public SwitchFlow(flowName: string) {\n    this.IfAsyncWeCant(\"switch flow\");\n    if (this._asyncSaving) {\n      throw new Error(\n        \"Story is already in background saving mode, can't switch flow to \" +\n          flowName\n      );\n    }\n\n    this.state.SwitchFlow_Internal(flowName);\n  }\n\n  public RemoveFlow(flowName: string) {\n    this.state.RemoveFlow_Internal(flowName);\n  }\n\n  public SwitchToDefaultFlow() {\n    this.state.SwitchToDefaultFlow_Internal();\n  }\n\n  public Continue() {\n    this.ContinueAsync(0);\n    return this.currentText;\n  }\n\n  get canContinue() {\n    return this.state.canContinue;\n  }\n\n  get asyncContinueComplete() {\n    return !this._asyncContinueActive;\n  }\n\n  public ContinueAsync(millisecsLimitAsync: number) {\n    if (!this._hasValidatedExternals) this.ValidateExternalBindings();\n\n    this.ContinueInternal(millisecsLimitAsync);\n  }\n\n  public ContinueInternal(millisecsLimitAsync = 0) {\n    if (this._profiler != null) this._profiler.PreContinue();\n\n    let isAsyncTimeLimited = millisecsLimitAsync > 0;\n    this._recursiveContinueCount++;\n\n    if (!this._asyncContinueActive) {\n      this._asyncContinueActive = isAsyncTimeLimited;\n\n      if (!this.canContinue) {\n        throw new Error(\n          \"Can't continue - should check canContinue before calling Continue\"\n        );\n      }\n\n      this._state.didSafeExit = false;\n      this._state.ResetOutput();\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = true;\n    }\n\n    let durationStopwatch = new Stopwatch();\n    durationStopwatch.Start();\n\n    let outputStreamEndsInNewline = false;\n    this._sawLookaheadUnsafeFunctionAfterNewline = false;\n    do {\n      try {\n        outputStreamEndsInNewline = this.ContinueSingleStep();\n      } catch (e) {\n        if (!(e instanceof StoryException)) throw e;\n\n        this.AddError(e.message, undefined, e.useEndLineNumber);\n        break;\n      }\n\n      if (outputStreamEndsInNewline) break;\n\n      if (\n        this._asyncContinueActive &&\n        durationStopwatch.ElapsedMilliseconds > millisecsLimitAsync\n      ) {\n        break;\n      }\n    } while (this.canContinue);\n\n    durationStopwatch.Stop();\n\n    if (outputStreamEndsInNewline || !this.canContinue) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        this.RestoreStateSnapshot();\n      }\n\n      if (!this.canContinue) {\n        if (this.state.callStack.canPopThread)\n          this.AddError(\n            \"Thread available to pop, threads should always be flat by the end of evaluation?\"\n          );\n\n        if (\n          this.state.generatedChoices.length == 0 &&\n          !this.state.didSafeExit &&\n          this._temporaryEvaluationContainer == null\n        ) {\n          if (this.state.callStack.CanPop(PushPopType.Tunnel))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '->->' to return from a tunnel?\"\n            );\n          else if (this.state.callStack.CanPop(PushPopType.Function))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '~ return'?\"\n            );\n          else if (!this.state.callStack.canPop)\n            this.AddError(\n              \"ran out of content. Do you need a '-> DONE' or '-> END'?\"\n            );\n          else\n            this.AddError(\n              \"unexpectedly reached end of content for unknown reason. Please debug compiler!\"\n            );\n        }\n      }\n\n      this.state.didSafeExit = false;\n      this._sawLookaheadUnsafeFunctionAfterNewline = false;\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = false;\n\n      this._asyncContinueActive = false;\n      if (this.onDidContinue !== null) this.onDidContinue();\n    }\n\n    this._recursiveContinueCount--;\n\n    if (this._profiler != null) this._profiler.PostContinue();\n\n    // In the following code, we're masking a lot of non-null assertion,\n    // because testing for against `hasError` or `hasWarning` makes sure\n    // the arrays are present and contain at least one element.\n    if (this.state.hasError || this.state.hasWarning) {\n      if (this.onError !== null) {\n        if (this.state.hasError) {\n          for (let err of this.state.currentErrors!) {\n            this.onError(err, ErrorType.Error);\n          }\n        }\n        if (this.state.hasWarning) {\n          for (let err of this.state.currentWarnings!) {\n            this.onError(err, ErrorType.Warning);\n          }\n        }\n        this.ResetErrors();\n      } else {\n        let sb = new StringBuilder();\n        sb.Append(\"Ink had \");\n        if (this.state.hasError) {\n          sb.Append(`${this.state.currentErrors!.length}`);\n          sb.Append(\n            this.state.currentErrors!.length == 1 ? \" error\" : \"errors\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        if (this.state.hasWarning) {\n          sb.Append(`${this.state.currentWarnings!.length}`);\n          sb.Append(\n            this.state.currentWarnings!.length == 1 ? \" warning\" : \"warnings\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        sb.Append(\n          \". It is strongly suggested that you assign an error handler to story.onError. The first issue was: \"\n        );\n        sb.Append(\n          this.state.hasError\n            ? this.state.currentErrors![0]\n            : this.state.currentWarnings![0]\n        );\n\n        throw new StoryException(sb.toString());\n      }\n    }\n  }\n\n  public ContinueSingleStep() {\n    if (this._profiler != null) this._profiler.PreStep();\n\n    this.Step();\n\n    if (this._profiler != null) this._profiler.PostStep();\n\n    if (!this.canContinue && !this.state.callStack.elementIsEvaluateFromGame) {\n      this.TryFollowDefaultInvisibleChoice();\n    }\n\n    if (this._profiler != null) this._profiler.PreSnapshot();\n\n    if (!this.state.inStringEvaluation) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        if (this._stateSnapshotAtLastNewline.currentTags === null) {\n          return throwNullException(\"this._stateAtLastNewline.currentTags\");\n        }\n        if (this.state.currentTags === null) {\n          return throwNullException(\"this.state.currentTags\");\n        }\n\n        let change = this.CalculateNewlineOutputStateChange(\n          this._stateSnapshotAtLastNewline.currentText,\n          this.state.currentText,\n          this._stateSnapshotAtLastNewline.currentTags.length,\n          this.state.currentTags.length\n        );\n\n        if (\n          change == Story.OutputStateChange.ExtendedBeyondNewline ||\n          this._sawLookaheadUnsafeFunctionAfterNewline\n        ) {\n          this.RestoreStateSnapshot();\n\n          return true;\n        } else if (change == Story.OutputStateChange.NewlineRemoved) {\n          this.DiscardSnapshot();\n        }\n      }\n\n      if (this.state.outputStreamEndsInNewline) {\n        if (this.canContinue) {\n          if (this._stateSnapshotAtLastNewline == null) this.StateSnapshot();\n        } else {\n          this.DiscardSnapshot();\n        }\n      }\n    }\n\n    if (this._profiler != null) this._profiler.PostSnapshot();\n\n    return false;\n  }\n\n  public CalculateNewlineOutputStateChange(\n    prevText: string | null,\n    currText: string | null,\n    prevTagCount: number,\n    currTagCount: number\n  ) {\n    if (prevText === null) {\n      return throwNullException(\"prevText\");\n    }\n    if (currText === null) {\n      return throwNullException(\"currText\");\n    }\n\n    let newlineStillExists =\n      currText.length >= prevText.length &&\n      prevText.length > 0 &&\n      currText.charAt(prevText.length - 1) == \"\\n\";\n    if (\n      prevTagCount == currTagCount &&\n      prevText.length == currText.length &&\n      newlineStillExists\n    )\n      return Story.OutputStateChange.NoChange;\n\n    if (!newlineStillExists) {\n      return Story.OutputStateChange.NewlineRemoved;\n    }\n\n    if (currTagCount > prevTagCount)\n      return Story.OutputStateChange.ExtendedBeyondNewline;\n\n    for (let i = prevText.length; i < currText.length; i++) {\n      let c = currText.charAt(i);\n      if (c != \" \" && c != \"\\t\") {\n        return Story.OutputStateChange.ExtendedBeyondNewline;\n      }\n    }\n\n    return Story.OutputStateChange.NoChange;\n  }\n\n  public ContinueMaximally() {\n    this.IfAsyncWeCant(\"ContinueMaximally\");\n\n    let sb = new StringBuilder();\n\n    while (this.canContinue) {\n      sb.Append(this.Continue());\n    }\n\n    return sb.toString();\n  }\n\n  public ContentAtPath(path: Path) {\n    return this.mainContentContainer.ContentAtPath(path);\n  }\n\n  public KnotContainerWithName(name: string) {\n    let namedContainer = this.mainContentContainer.namedContent.get(name);\n    if (namedContainer instanceof Container) return namedContainer;\n    else return null;\n  }\n\n  public PointerAtPath(path: Path) {\n    if (path.length == 0) return Pointer.Null;\n\n    let p = new Pointer();\n\n    let pathLengthToUse = path.length;\n\n    let result = null;\n    if (path.lastComponent === null) {\n      return throwNullException(\"path.lastComponent\");\n    }\n\n    if (path.lastComponent.isIndex) {\n      pathLengthToUse = path.length - 1;\n      result = this.mainContentContainer.ContentAtPath(\n        path,\n        undefined,\n        pathLengthToUse\n      );\n      p.container = result.container;\n      p.index = path.lastComponent.index;\n    } else {\n      result = this.mainContentContainer.ContentAtPath(path);\n      p.container = result.container;\n      p.index = -1;\n    }\n\n    if (\n      result.obj == null ||\n      (result.obj == this.mainContentContainer && pathLengthToUse > 0)\n    ) {\n      this.Error(\n        \"Failed to find content at path '\" +\n          path +\n          \"', and no approximation of it was possible.\"\n      );\n    } else if (result.approximate)\n      this.Warning(\n        \"Failed to find content at path '\" +\n          path +\n          \"', so it was approximated to: '\" +\n          result.obj.path +\n          \"'.\"\n      );\n\n    return p;\n  }\n\n  public StateSnapshot() {\n    this._stateSnapshotAtLastNewline = this._state;\n    this._state = this._state.CopyAndStartPatching();\n  }\n\n  public RestoreStateSnapshot() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      throwNullException(\"_stateSnapshotAtLastNewline\");\n    }\n    this._stateSnapshotAtLastNewline.RestoreAfterPatch();\n\n    this._state = this._stateSnapshotAtLastNewline;\n    this._stateSnapshotAtLastNewline = null;\n\n    if (!this._asyncSaving) {\n      this._state.ApplyAnyPatch();\n    }\n  }\n\n  public DiscardSnapshot() {\n    if (!this._asyncSaving) this._state.ApplyAnyPatch();\n\n    this._stateSnapshotAtLastNewline = null;\n  }\n\n  public CopyStateForBackgroundThreadSave() {\n    this.IfAsyncWeCant(\"start saving on a background thread\");\n\n    if (this._asyncSaving)\n      throw new Error(\n        \"Story is already in background saving mode, can't call CopyStateForBackgroundThreadSave again!\"\n      );\n\n    let stateToSave = this._state;\n    this._state = this._state.CopyAndStartPatching();\n    this._asyncSaving = true;\n    return stateToSave;\n  }\n\n  public BackgroundSaveComplete() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      this._state.ApplyAnyPatch();\n    }\n\n    this._asyncSaving = false;\n  }\n\n  public Step() {\n    let shouldAddToStream = true;\n\n    let pointer = this.state.currentPointer.copy();\n    if (pointer.isNull) {\n      return;\n    }\n\n    // Container containerToEnter = pointer.Resolve () as Container;\n    let containerToEnter = asOrNull(pointer.Resolve(), Container);\n\n    while (containerToEnter) {\n      this.VisitContainer(containerToEnter, true);\n\n      // No content? the most we can do is step past it\n      if (containerToEnter.content.length == 0) {\n        break;\n      }\n\n      pointer = Pointer.StartOf(containerToEnter);\n      // containerToEnter = pointer.Resolve() as Container;\n      containerToEnter = asOrNull(pointer.Resolve(), Container);\n    }\n\n    this.state.currentPointer = pointer.copy();\n\n    if (this._profiler != null) this._profiler.Step(this.state.callStack);\n\n    // Is the current content object:\n    //  - Normal content\n    //  - Or a logic/flow statement - if so, do it\n    // Stop flow if we hit a stack pop when we're unable to pop (e.g. return/done statement in knot\n    // that was diverted to rather than called as a function)\n    let currentContentObj = pointer.Resolve();\n    let isLogicOrFlowControl =\n      this.PerformLogicAndFlowControl(currentContentObj);\n\n    // Has flow been forced to end by flow control above?\n    if (this.state.currentPointer.isNull) {\n      return;\n    }\n\n    if (isLogicOrFlowControl) {\n      shouldAddToStream = false;\n    }\n\n    // Choice with condition?\n    // var choicePoint = currentContentObj as ChoicePoint;\n    let choicePoint = asOrNull(currentContentObj, ChoicePoint);\n    if (choicePoint) {\n      let choice = this.ProcessChoice(choicePoint);\n      if (choice) {\n        this.state.generatedChoices.push(choice);\n      }\n\n      currentContentObj = null;\n      shouldAddToStream = false;\n    }\n\n    // If the container has no content, then it will be\n    // the \"content\" itself, but we skip over it.\n    if (currentContentObj instanceof Container) {\n      shouldAddToStream = false;\n    }\n\n    // Content to add to evaluation stack or the output stream\n    if (shouldAddToStream) {\n      // If we're pushing a variable pointer onto the evaluation stack, ensure that it's specific\n      // to our current (possibly temporary) context index. And make a copy of the pointer\n      // so that we're not editing the original runtime object.\n      // var varPointer = currentContentObj as VariablePointerValue;\n      let varPointer = asOrNull(currentContentObj, VariablePointerValue);\n      if (varPointer && varPointer.contextIndex == -1) {\n        // Create new object so we're not overwriting the story's own data\n        let contextIdx = this.state.callStack.ContextForVariableNamed(\n          varPointer.variableName\n        );\n        currentContentObj = new VariablePointerValue(\n          varPointer.variableName,\n          contextIdx\n        );\n      }\n\n      // Expression evaluation content\n      if (this.state.inExpressionEvaluation) {\n        this.state.PushEvaluationStack(currentContentObj);\n      }\n      // Output stream content (i.e. not expression evaluation)\n      else {\n        this.state.PushToOutputStream(currentContentObj);\n      }\n    }\n\n    // Increment the content pointer, following diverts if necessary\n    this.NextContent();\n\n    // Starting a thread should be done after the increment to the content pointer,\n    // so that when returning from the thread, it returns to the content after this instruction.\n    // var controlCmd = currentContentObj as ;\n    let controlCmd = asOrNull(currentContentObj, ControlCommand);\n    if (\n      controlCmd &&\n      controlCmd.commandType == ControlCommand.CommandType.StartThread\n    ) {\n      this.state.callStack.PushThread();\n    }\n  }\n\n  public VisitContainer(container: Container, atStart: boolean) {\n    if (!container.countingAtStartOnly || atStart) {\n      if (container.visitsShouldBeCounted)\n        this.state.IncrementVisitCountForContainer(container);\n\n      if (container.turnIndexShouldBeCounted)\n        this.state.RecordTurnIndexVisitToContainer(container);\n    }\n  }\n\n  private _prevContainers: Container[] = [];\n  public VisitChangedContainersDueToDivert() {\n    let previousPointer = this.state.previousPointer.copy();\n    let pointer = this.state.currentPointer.copy();\n\n    if (pointer.isNull || pointer.index == -1) return;\n\n    this._prevContainers.length = 0;\n    if (!previousPointer.isNull) {\n      // Container prevAncestor = previousPointer.Resolve() as Container ?? previousPointer.container as Container;\n      let resolvedPreviousAncestor = previousPointer.Resolve();\n      let prevAncestor =\n        asOrNull(resolvedPreviousAncestor, Container) ||\n        asOrNull(previousPointer.container, Container);\n      while (prevAncestor) {\n        this._prevContainers.push(prevAncestor);\n        // prevAncestor = prevAncestor.parent as Container;\n        prevAncestor = asOrNull(prevAncestor.parent, Container);\n      }\n    }\n\n    let currentChildOfContainer = pointer.Resolve();\n\n    if (currentChildOfContainer == null) return;\n\n    // Container currentContainerAncestor = currentChildOfContainer.parent as Container;\n    let currentContainerAncestor = asOrNull(\n      currentChildOfContainer.parent,\n      Container\n    );\n    let allChildrenEnteredAtStart = true;\n    while (\n      currentContainerAncestor &&\n      (this._prevContainers.indexOf(currentContainerAncestor) < 0 ||\n        currentContainerAncestor.countingAtStartOnly)\n    ) {\n      // Check whether this ancestor container is being entered at the start,\n      // by checking whether the child object is the first.\n      let enteringAtStart =\n        currentContainerAncestor.content.length > 0 &&\n        currentChildOfContainer == currentContainerAncestor.content[0] &&\n        allChildrenEnteredAtStart;\n\n      if (!enteringAtStart) allChildrenEnteredAtStart = false;\n\n      // Mark a visit to this container\n      this.VisitContainer(currentContainerAncestor, enteringAtStart);\n\n      currentChildOfContainer = currentContainerAncestor;\n      // currentContainerAncestor = currentContainerAncestor.parent as Container;\n      currentContainerAncestor = asOrNull(\n        currentContainerAncestor.parent,\n        Container\n      );\n    }\n  }\n\n  public PopChoiceStringAndTags(tags: string[]) {\n    let choiceOnlyStrVal = asOrThrows(\n      this.state.PopEvaluationStack(),\n      StringValue\n    );\n\n    while (\n      this.state.evaluationStack.length > 0 &&\n      asOrNull(this.state.PeekEvaluationStack(), Tag) != null\n    ) {\n      let tag = asOrNull(this.state.PopEvaluationStack(), Tag);\n      if (tag) tags.push(tag.text);\n    }\n    return choiceOnlyStrVal.value;\n  }\n\n  public ProcessChoice(choicePoint: ChoicePoint) {\n    let showChoice = true;\n\n    // Don't create choice if choice point doesn't pass conditional\n    if (choicePoint.hasCondition) {\n      let conditionValue = this.state.PopEvaluationStack();\n      if (!this.IsTruthy(conditionValue)) {\n        showChoice = false;\n      }\n    }\n\n    let startText = \"\";\n    let choiceOnlyText = \"\";\n    let tags: string[] = [];\n\n    if (choicePoint.hasChoiceOnlyContent) {\n      choiceOnlyText = this.PopChoiceStringAndTags(tags) || \"\";\n    }\n\n    if (choicePoint.hasStartContent) {\n      startText = this.PopChoiceStringAndTags(tags) || \"\";\n    }\n\n    // Don't create choice if player has already read this content\n    if (choicePoint.onceOnly) {\n      let visitCount = this.state.VisitCountForContainer(\n        choicePoint.choiceTarget\n      );\n      if (visitCount > 0) {\n        showChoice = false;\n      }\n    }\n\n    // We go through the full process of creating the choice above so\n    // that we consume the content for it, since otherwise it'll\n    // be shown on the output stream.\n    if (!showChoice) {\n      return null;\n    }\n\n    let choice = new Choice();\n    choice.targetPath = choicePoint.pathOnChoice;\n    choice.sourcePath = choicePoint.path.toString();\n    choice.isInvisibleDefault = choicePoint.isInvisibleDefault;\n    choice.threadAtGeneration = this.state.callStack.ForkThread();\n    choice.tags = tags.reverse(); //C# is a stack\n    choice.text = (startText + choiceOnlyText).replace(/^[ \\t]+|[ \\t]+$/g, \"\");\n\n    return choice;\n  }\n\n  public IsTruthy(obj: InkObject) {\n    let truthy = false;\n    if (obj instanceof Value) {\n      let val = obj;\n\n      if (val instanceof DivertTargetValue) {\n        let divTarget = val;\n        this.Error(\n          \"Shouldn't use a divert target (to \" +\n            divTarget.targetPath +\n            \") as a conditional value. Did you intend a function call 'likeThis()' or a read count check 'likeThis'? (no arrows)\"\n        );\n        return false;\n      }\n\n      return val.isTruthy;\n    }\n    return truthy;\n  }\n\n  public PerformLogicAndFlowControl(contentObj: InkObject | null) {\n    if (contentObj == null) {\n      return false;\n    }\n\n    // Divert\n    if (contentObj instanceof Divert) {\n      let currentDivert = contentObj;\n\n      if (currentDivert.isConditional) {\n        let conditionValue = this.state.PopEvaluationStack();\n\n        // False conditional? Cancel divert\n        if (!this.IsTruthy(conditionValue)) return true;\n      }\n\n      if (currentDivert.hasVariableTarget) {\n        let varName = currentDivert.variableDivertName;\n\n        let varContents =\n          this.state.variablesState.GetVariableWithName(varName);\n\n        if (varContents == null) {\n          this.Error(\n            \"Tried to divert using a target from a variable that could not be found (\" +\n              varName +\n              \")\"\n          );\n        } else if (!(varContents instanceof DivertTargetValue)) {\n          // var intContent = varContents as IntValue;\n          let intContent = asOrNull(varContents, IntValue);\n\n          let errorMessage =\n            \"Tried to divert to a target from a variable, but the variable (\" +\n            varName +\n            \") didn't contain a divert target, it \";\n          if (intContent instanceof IntValue && intContent.value == 0) {\n            errorMessage += \"was empty/null (the value 0).\";\n          } else {\n            errorMessage += \"contained '\" + varContents + \"'.\";\n          }\n\n          this.Error(errorMessage);\n        }\n\n        let target = asOrThrows(varContents, DivertTargetValue);\n        this.state.divertedPointer = this.PointerAtPath(target.targetPath);\n      } else if (currentDivert.isExternal) {\n        this.CallExternalFunction(\n          currentDivert.targetPathString,\n          currentDivert.externalArgs\n        );\n        return true;\n      } else {\n        this.state.divertedPointer = currentDivert.targetPointer.copy();\n      }\n\n      if (currentDivert.pushesToStack) {\n        this.state.callStack.Push(\n          currentDivert.stackPushType,\n          undefined,\n          this.state.outputStream.length\n        );\n      }\n\n      if (this.state.divertedPointer.isNull && !currentDivert.isExternal) {\n        if (\n          currentDivert &&\n          currentDivert.debugMetadata &&\n          currentDivert.debugMetadata.sourceName != null\n        ) {\n          this.Error(\n            \"Divert target doesn't exist: \" +\n              currentDivert.debugMetadata.sourceName\n          );\n        } else {\n          this.Error(\"Divert resolution failed: \" + currentDivert);\n        }\n      }\n\n      return true;\n    }\n\n    // Start/end an expression evaluation? Or print out the result?\n    else if (contentObj instanceof ControlCommand) {\n      let evalCommand = contentObj;\n\n      switch (evalCommand.commandType) {\n        case ControlCommand.CommandType.EvalStart:\n          this.Assert(\n            this.state.inExpressionEvaluation === false,\n            \"Already in expression evaluation?\"\n          );\n          this.state.inExpressionEvaluation = true;\n          break;\n\n        case ControlCommand.CommandType.EvalEnd:\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Not in expression evaluation mode\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        case ControlCommand.CommandType.EvalOutput:\n          // If the expression turned out to be empty, there may not be anything on the stack\n          if (this.state.evaluationStack.length > 0) {\n            let output = this.state.PopEvaluationStack();\n\n            // Functions may evaluate to Void, in which case we skip output\n            if (!(output instanceof Void)) {\n              // TODO: Should we really always blanket convert to string?\n              // It would be okay to have numbers in the output stream the\n              // only problem is when exporting text for viewing, it skips over numbers etc.\n              let text = new StringValue(output.toString());\n\n              this.state.PushToOutputStream(text);\n            }\n          }\n          break;\n\n        case ControlCommand.CommandType.NoOp:\n          break;\n\n        case ControlCommand.CommandType.Duplicate:\n          this.state.PushEvaluationStack(this.state.PeekEvaluationStack());\n          break;\n\n        case ControlCommand.CommandType.PopEvaluatedValue:\n          this.state.PopEvaluationStack();\n          break;\n\n        case ControlCommand.CommandType.PopFunction:\n        case ControlCommand.CommandType.PopTunnel:\n          let popType =\n            evalCommand.commandType == ControlCommand.CommandType.PopFunction\n              ? PushPopType.Function\n              : PushPopType.Tunnel;\n\n          let overrideTunnelReturnTarget: DivertTargetValue | null = null;\n          if (popType == PushPopType.Tunnel) {\n            let popped = this.state.PopEvaluationStack();\n            // overrideTunnelReturnTarget = popped as DivertTargetValue;\n            overrideTunnelReturnTarget = asOrNull(popped, DivertTargetValue);\n            if (overrideTunnelReturnTarget === null) {\n              this.Assert(\n                popped instanceof Void,\n                \"Expected void if ->-> doesn't override target\"\n              );\n            }\n          }\n\n          if (this.state.TryExitFunctionEvaluationFromGame()) {\n            break;\n          } else if (\n            this.state.callStack.currentElement.type != popType ||\n            !this.state.callStack.canPop\n          ) {\n            let names: Map<PushPopType, string> = new Map();\n            names.set(\n              PushPopType.Function,\n              \"function return statement (~ return)\"\n            );\n            names.set(PushPopType.Tunnel, \"tunnel onwards statement (->->)\");\n\n            let expected = names.get(this.state.callStack.currentElement.type);\n            if (!this.state.callStack.canPop) {\n              expected = \"end of flow (-> END or choice)\";\n            }\n\n            let errorMsg =\n              \"Found \" + names.get(popType) + \", when expected \" + expected;\n\n            this.Error(errorMsg);\n          } else {\n            this.state.PopCallStack();\n\n            if (overrideTunnelReturnTarget)\n              this.state.divertedPointer = this.PointerAtPath(\n                overrideTunnelReturnTarget.targetPath\n              );\n          }\n          break;\n\n        case ControlCommand.CommandType.BeginString:\n          this.state.PushToOutputStream(evalCommand);\n\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Expected to be in an expression when evaluating a string\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        // Leave it to story.currentText and story.currentTags to sort out the text from the tags\n        // This is mostly because we can't always rely on the existence of EndTag, and we don't want\n        // to try and flatten dynamic tags to strings every time \\n is pushed to output\n        case ControlCommand.CommandType.BeginTag:\n          this.state.PushToOutputStream(evalCommand);\n          break;\n\n        // EndTag has 2 modes:\n        //  - When in string evaluation (for choices)\n        //  - Normal\n        //\n        // The only way you could have an EndTag in the middle of\n        // string evaluation is if we're currently generating text for a\n        // choice, such as:\n        //\n        //   + choice # tag\n        //\n        // In the above case, the ink will be run twice:\n        //  - First, to generate the choice text. String evaluation\n        //    will be on, and the final string will be pushed to the\n        //    evaluation stack, ready to be popped to make a Choice\n        //    object.\n        //  - Second, when ink generates text after choosing the choice.\n        //    On this ocassion, it's not in string evaluation mode.\n        //\n        // On the writing side, we disallow manually putting tags within\n        // strings like this:\n        //\n        //   {\"hello # world\"}\n        //\n        // So we know that the tag must be being generated as part of\n        // choice content. Therefore, when the tag has been generated,\n        // we push it onto the evaluation stack in the exact same way\n        // as the string for the choice content.\n        case ControlCommand.CommandType.EndTag: {\n          if (this.state.inStringEvaluation) {\n            let contentStackForTag: InkObject[] = [];\n            let outputCountConsumed = 0;\n            for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n              let obj = this.state.outputStream[i];\n              outputCountConsumed++;\n\n              // var command = obj as ControlCommand;\n              let command = asOrNull(obj, ControlCommand);\n              if (command != null) {\n                if (\n                  command.commandType == ControlCommand.CommandType.BeginTag\n                ) {\n                  break;\n                } else {\n                  this.Error(\n                    \"Unexpected ControlCommand while extracting tag from choice\"\n                  );\n                  break;\n                }\n              }\n              if (obj instanceof StringValue) {\n                contentStackForTag.push(obj);\n              }\n            }\n\n            // Consume the content that was produced for this string\n            this.state.PopFromOutputStream(outputCountConsumed);\n            // Build string out of the content we collected\n            let sb = new StringBuilder();\n            for (let strVal of contentStackForTag) {\n              sb.Append(strVal.toString());\n            }\n            let choiceTag = new Tag(\n              this.state.CleanOutputWhitespace(sb.toString())\n            );\n            // Pushing to the evaluation stack means it gets picked up\n            // when a Choice is generated from the next Choice Point.\n            this.state.PushEvaluationStack(choiceTag);\n          } else {\n            // Otherwise! Simply push EndTag, so that in the output stream we\n            // have a structure of: [BeginTag, \"the tag content\", EndTag]\n            this.state.PushToOutputStream(evalCommand);\n          }\n          break;\n        }\n\n        case ControlCommand.CommandType.EndString: {\n          let contentStackForString: InkObject[] = [];\n          let contentToRetain: InkObject[] = [];\n\n          let outputCountConsumed = 0;\n          for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n            let obj = this.state.outputStream[i];\n\n            outputCountConsumed++;\n\n            // var command = obj as ControlCommand;\n            let command = asOrNull(obj, ControlCommand);\n            if (\n              command &&\n              command.commandType == ControlCommand.CommandType.BeginString\n            ) {\n              break;\n            }\n            if (obj instanceof Tag) {\n              contentToRetain.push(obj);\n            }\n            if (obj instanceof StringValue) {\n              contentStackForString.push(obj);\n            }\n          }\n\n          // Consume the content that was produced for this string\n          this.state.PopFromOutputStream(outputCountConsumed);\n\n          // Rescue the tags that we want actually to keep on the output stack\n          // rather than consume as part of the string we're building.\n          // At the time of writing, this only applies to Tag objects generated\n          // by choices, which are pushed to the stack during string generation.\n          for (let rescuedTag of contentToRetain)\n            this.state.PushToOutputStream(rescuedTag);\n\n          // The C# version uses a Stack for contentStackForString, but we're\n          // using a simple array, so we need to reverse it before using it\n          contentStackForString = contentStackForString.reverse();\n\n          // Build string out of the content we collected\n          let sb = new StringBuilder();\n          for (let c of contentStackForString) {\n            sb.Append(c.toString());\n          }\n\n          // Return to expression evaluation (from content mode)\n          this.state.inExpressionEvaluation = true;\n          this.state.PushEvaluationStack(new StringValue(sb.toString()));\n          break;\n        }\n\n        case ControlCommand.CommandType.ChoiceCount:\n          let choiceCount = this.state.generatedChoices.length;\n          this.state.PushEvaluationStack(new IntValue(choiceCount));\n          break;\n\n        case ControlCommand.CommandType.Turns:\n          this.state.PushEvaluationStack(\n            new IntValue(this.state.currentTurnIndex + 1)\n          );\n          break;\n\n        case ControlCommand.CommandType.TurnsSince:\n        case ControlCommand.CommandType.ReadCount:\n          let target = this.state.PopEvaluationStack();\n          if (!(target instanceof DivertTargetValue)) {\n            let extraNote = \"\";\n            if (target instanceof IntValue)\n              extraNote =\n                \". Did you accidentally pass a read count ('knot_name') instead of a target ('-> knot_name')?\";\n            this.Error(\n              \"TURNS_SINCE / READ_COUNT expected a divert target (knot, stitch, label name), but saw \" +\n                target +\n                extraNote\n            );\n            break;\n          }\n\n          // var divertTarget = target as DivertTargetValue;\n          let divertTarget = asOrThrows(target, DivertTargetValue);\n          // var container = ContentAtPath (divertTarget.targetPath).correctObj as Container;\n          let container = asOrNull(\n            this.ContentAtPath(divertTarget.targetPath).correctObj,\n            Container\n          );\n\n          let eitherCount;\n          if (container != null) {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = this.state.TurnsSinceForContainer(container);\n            else eitherCount = this.state.VisitCountForContainer(container);\n          } else {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = -1;\n            else eitherCount = 0;\n\n            this.Warning(\n              \"Failed to find container for \" +\n                evalCommand.toString() +\n                \" lookup at \" +\n                divertTarget.targetPath.toString()\n            );\n          }\n\n          this.state.PushEvaluationStack(new IntValue(eitherCount));\n          break;\n\n        case ControlCommand.CommandType.Random: {\n          let maxInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          let minInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\n          if (minInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for minimum parameter of RANDOM(min, max)\"\n            );\n\n          if (maxInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for maximum parameter of RANDOM(min, max)\"\n            );\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (maxInt.value === null) {\n            return throwNullException(\"maxInt.value\");\n          }\n          if (minInt.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          // This code is differs a bit from the reference implementation, since\n          // JavaScript has no true integers. Hence integer arithmetics and\n          // interger overflows don't apply here. A loss of precision can\n          // happen with big numbers however.\n          //\n          // The case where 'randomRange' is lower than zero is handled below,\n          // so there's no need to test against Number.MIN_SAFE_INTEGER.\n          let randomRange = maxInt.value - minInt.value + 1;\n          if (!isFinite(randomRange) || randomRange > Number.MAX_SAFE_INTEGER) {\n            randomRange = Number.MAX_SAFE_INTEGER;\n            this.Error(\n              \"RANDOM was called with a range that exceeds the size that ink numbers can use.\"\n            );\n          }\n          if (randomRange <= 0)\n            this.Error(\n              \"RANDOM was called with minimum as \" +\n                minInt.value +\n                \" and maximum as \" +\n                maxInt.value +\n                \". The maximum must be larger\"\n            );\n\n          let resultSeed = this.state.storySeed + this.state.previousRandom;\n          let random = new PRNG(resultSeed);\n\n          let nextRandom = random.next();\n          let chosenValue = (nextRandom % randomRange) + minInt.value;\n          this.state.PushEvaluationStack(new IntValue(chosenValue));\n\n          // Next random number (rather than keeping the Random object around)\n          this.state.previousRandom = nextRandom;\n          break;\n        }\n\n        case ControlCommand.CommandType.SeedRandom:\n          let seed = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          if (seed == null || seed instanceof IntValue === false)\n            return this.Error(\"Invalid value passed to SEED_RANDOM\");\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (seed.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          this.state.storySeed = seed.value;\n          this.state.previousRandom = 0;\n\n          this.state.PushEvaluationStack(new Void());\n          break;\n\n        case ControlCommand.CommandType.VisitIndex:\n          let count =\n            this.state.VisitCountForContainer(\n              this.state.currentPointer.container\n            ) - 1; // index not count\n          this.state.PushEvaluationStack(new IntValue(count));\n          break;\n\n        case ControlCommand.CommandType.SequenceShuffleIndex:\n          let shuffleIndex = this.NextSequenceShuffleIndex();\n          this.state.PushEvaluationStack(new IntValue(shuffleIndex));\n          break;\n\n        case ControlCommand.CommandType.StartThread:\n          // Handled in main step function\n          break;\n\n        case ControlCommand.CommandType.Done:\n          // We may exist in the context of the initial\n          // act of creating the thread, or in the context of\n          // evaluating the content.\n          if (this.state.callStack.canPopThread) {\n            this.state.callStack.PopThread();\n          }\n\n          // In normal flow - allow safe exit without warning\n          else {\n            this.state.didSafeExit = true;\n\n            // Stop flow in current thread\n            this.state.currentPointer = Pointer.Null;\n          }\n\n          break;\n\n        // Force flow to end completely\n        case ControlCommand.CommandType.End:\n          this.state.ForceEnd();\n          break;\n\n        case ControlCommand.CommandType.ListFromInt:\n          // var intVal = state.PopEvaluationStack () as IntValue;\n          let intVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          // var listNameVal = state.PopEvaluationStack () as StringValue;\n          let listNameVal = asOrThrows(\n            this.state.PopEvaluationStack(),\n            StringValue\n          );\n\n          if (intVal === null) {\n            throw new StoryException(\n              \"Passed non-integer when creating a list element from a numerical value.\"\n            );\n          }\n\n          let generatedListValue = null;\n\n          if (this.listDefinitions === null) {\n            return throwNullException(\"this.listDefinitions\");\n          }\n          let foundListDef = this.listDefinitions.TryListGetDefinition(\n            listNameVal.value,\n            null\n          );\n          if (foundListDef.exists) {\n            // Originally a primitive type, but here, can be null.\n            // TODO: Replace by default value?\n            if (intVal.value === null) {\n              return throwNullException(\"minInt.value\");\n            }\n\n            let foundItem = foundListDef.result!.TryGetItemWithValue(\n              intVal.value,\n              InkListItem.Null\n            );\n            if (foundItem.exists) {\n              generatedListValue = new ListValue(\n                foundItem.result!,\n                intVal.value\n              );\n            }\n          } else {\n            throw new StoryException(\n              \"Failed to find LIST called \" + listNameVal.value\n            );\n          }\n\n          if (generatedListValue == null) generatedListValue = new ListValue();\n\n          this.state.PushEvaluationStack(generatedListValue);\n          break;\n\n        case ControlCommand.CommandType.ListRange:\n          let max = asOrNull(this.state.PopEvaluationStack(), Value);\n          let min = asOrNull(this.state.PopEvaluationStack(), Value);\n\n          // var targetList = state.PopEvaluationStack () as ListValue;\n          let targetList = asOrNull(this.state.PopEvaluationStack(), ListValue);\n\n          if (targetList === null || min === null || max === null)\n            throw new StoryException(\n              \"Expected list, minimum and maximum for LIST_RANGE\"\n            );\n\n          if (targetList.value === null) {\n            return throwNullException(\"targetList.value\");\n          }\n          let result = targetList.value.ListWithSubRange(\n            min.valueObject,\n            max.valueObject\n          );\n\n          this.state.PushEvaluationStack(new ListValue(result));\n          break;\n\n        case ControlCommand.CommandType.ListRandom: {\n          let listVal = this.state.PopEvaluationStack() as ListValue;\n          if (listVal === null)\n            throw new StoryException(\"Expected list for LIST_RANDOM\");\n\n          let list = listVal.value;\n\n          let newList: InkList | null = null;\n\n          if (list === null) {\n            throw throwNullException(\"list\");\n          }\n          if (list.Count == 0) {\n            newList = new InkList();\n          } else {\n            // Generate a random index for the element to take\n            let resultSeed = this.state.storySeed + this.state.previousRandom;\n            let random = new PRNG(resultSeed);\n\n            let nextRandom = random.next();\n            let listItemIndex = nextRandom % list.Count;\n\n            // This bit is a little different from the original\n            // C# code, since iterators do not work in the same way.\n            // First, we iterate listItemIndex - 1 times, calling next().\n            // The listItemIndex-th time is made outside of the loop,\n            // in order to retrieve the value.\n            let listEnumerator = list.entries();\n            for (let i = 0; i <= listItemIndex - 1; i++) {\n              listEnumerator.next();\n            }\n            let value = listEnumerator.next().value;\n            let randomItem: KeyValuePair<InkListItem, number> = {\n              Key: InkListItem.fromSerializedKey(value[0]),\n              Value: value[1],\n            };\n\n            // Origin list is simply the origin of the one element\n            if (randomItem.Key.originName === null) {\n              return throwNullException(\"randomItem.Key.originName\");\n            }\n            newList = new InkList(randomItem.Key.originName, this);\n            newList.Add(randomItem.Key, randomItem.Value);\n\n            this.state.previousRandom = nextRandom;\n          }\n\n          this.state.PushEvaluationStack(new ListValue(newList));\n          break;\n        }\n\n        default:\n          this.Error(\"unhandled ControlCommand: \" + evalCommand);\n          break;\n      }\n\n      return true;\n    }\n\n    // Variable assignment\n    else if (contentObj instanceof VariableAssignment) {\n      let varAss = contentObj;\n      let assignedVal = this.state.PopEvaluationStack();\n\n      this.state.variablesState.Assign(varAss, assignedVal);\n\n      return true;\n    }\n\n    // Variable reference\n    else if (contentObj instanceof VariableReference) {\n      let varRef = contentObj;\n      let foundValue = null;\n\n      // Explicit read count value\n      if (varRef.pathForCount != null) {\n        let container = varRef.containerForCount;\n        let count = this.state.VisitCountForContainer(container);\n        foundValue = new IntValue(count);\n      }\n\n      // Normal variable reference\n      else {\n        foundValue = this.state.variablesState.GetVariableWithName(varRef.name);\n\n        if (foundValue == null) {\n          this.Warning(\n            \"Variable not found: '\" +\n              varRef.name +\n              \"'. Using default value of 0 (false). This can happen with temporary variables if the declaration hasn't yet been hit. Globals are always given a default value on load if a value doesn't exist in the save state.\"\n          );\n          foundValue = new IntValue(0);\n        }\n      }\n\n      this.state.PushEvaluationStack(foundValue);\n\n      return true;\n    }\n\n    // Native function call\n    else if (contentObj instanceof NativeFunctionCall) {\n      let func = contentObj;\n      let funcParams = this.state.PopEvaluationStack(func.numberOfParameters);\n      let result = func.Call(funcParams);\n      this.state.PushEvaluationStack(result);\n      return true;\n    }\n\n    // No control content, must be ordinary content\n    return false;\n  }\n\n  public ChoosePathString(\n    path: string,\n    resetCallstack = true,\n    args: any[] = []\n  ) {\n    this.IfAsyncWeCant(\"call ChoosePathString right now\");\n    if (this.onChoosePathString !== null) this.onChoosePathString(path, args);\n\n    if (resetCallstack) {\n      this.ResetCallstack();\n    } else {\n      if (this.state.callStack.currentElement.type == PushPopType.Function) {\n        let funcDetail = \"\";\n        let container =\n          this.state.callStack.currentElement.currentPointer.container;\n        if (container != null) {\n          funcDetail = \"(\" + container.path.toString() + \") \";\n        }\n        throw new Error(\n          \"Story was running a function \" +\n            funcDetail +\n            \"when you called ChoosePathString(\" +\n            path +\n            \") - this is almost certainly not not what you want! Full stack trace: \\n\" +\n            this.state.callStack.callStackTrace\n        );\n      }\n    }\n\n    this.state.PassArgumentsToEvaluationStack(args);\n    this.ChoosePath(new Path(path));\n  }\n\n  public IfAsyncWeCant(activityStr: string) {\n    if (this._asyncContinueActive)\n      throw new Error(\n        \"Can't \" +\n          activityStr +\n          \". Story is in the middle of a ContinueAsync(). Make more ContinueAsync() calls or a single Continue() call beforehand.\"\n      );\n  }\n\n  public ChoosePath(p: Path, incrementingTurnIndex: boolean = true) {\n    this.state.SetChosenPath(p, incrementingTurnIndex);\n\n    // Take a note of newly visited containers for read counts etc\n    this.VisitChangedContainersDueToDivert();\n  }\n\n  public ChooseChoiceIndex(choiceIdx: number) {\n    choiceIdx = choiceIdx;\n    let choices = this.currentChoices;\n    this.Assert(\n      choiceIdx >= 0 && choiceIdx < choices.length,\n      \"choice out of range\"\n    );\n\n    let choiceToChoose = choices[choiceIdx];\n    if (this.onMakeChoice !== null) this.onMakeChoice(choiceToChoose);\n\n    if (choiceToChoose.threadAtGeneration === null) {\n      return throwNullException(\"choiceToChoose.threadAtGeneration\");\n    }\n    if (choiceToChoose.targetPath === null) {\n      return throwNullException(\"choiceToChoose.targetPath\");\n    }\n\n    this.state.callStack.currentThread = choiceToChoose.threadAtGeneration;\n\n    this.ChoosePath(choiceToChoose.targetPath);\n  }\n\n  public HasFunction(functionName: string) {\n    try {\n      return this.KnotContainerWithName(functionName) != null;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  public EvaluateFunction(\n    functionName: string,\n    args: any[] = [],\n    returnTextOutput: boolean = false\n  ): Story.EvaluateFunctionTextOutput | any {\n    // EvaluateFunction behaves slightly differently than the C# version.\n    // In C#, you can pass a (second) parameter `out textOutput` to get the\n    // text outputted by the function. This is not possible in js. Instead,\n    // we maintain the regular signature (functionName, args), plus an\n    // optional third parameter returnTextOutput. If set to true, we will\n    // return both the textOutput and the returned value, as an object.\n\n    if (this.onEvaluateFunction !== null)\n      this.onEvaluateFunction(functionName, args);\n\n    this.IfAsyncWeCant(\"evaluate a function\");\n\n    if (functionName == null) {\n      throw new Error(\"Function is null\");\n    } else if (functionName == \"\" || functionName.trim() == \"\") {\n      throw new Error(\"Function is empty or white space.\");\n    }\n\n    let funcContainer = this.KnotContainerWithName(functionName);\n    if (funcContainer == null) {\n      throw new Error(\"Function doesn't exist: '\" + functionName + \"'\");\n    }\n\n    let outputStreamBefore: InkObject[] = [];\n    outputStreamBefore.push(...this.state.outputStream);\n    this._state.ResetOutput();\n\n    this.state.StartFunctionEvaluationFromGame(funcContainer, args);\n\n    // Evaluate the function, and collect the string output\n    let stringOutput = new StringBuilder();\n    while (this.canContinue) {\n      stringOutput.Append(this.Continue());\n    }\n    let textOutput = stringOutput.toString();\n\n    this._state.ResetOutput(outputStreamBefore);\n\n    let result = this.state.CompleteFunctionEvaluationFromGame();\n    if (this.onCompleteEvaluateFunction != null)\n      this.onCompleteEvaluateFunction(functionName, args, textOutput, result);\n\n    return returnTextOutput ? { returned: result, output: textOutput } : result;\n  }\n\n  public EvaluateExpression(exprContainer: Container) {\n    let startCallStackHeight = this.state.callStack.elements.length;\n\n    this.state.callStack.Push(PushPopType.Tunnel);\n\n    this._temporaryEvaluationContainer = exprContainer;\n\n    this.state.GoToStart();\n\n    let evalStackHeight = this.state.evaluationStack.length;\n\n    this.Continue();\n\n    this._temporaryEvaluationContainer = null;\n\n    // Should have fallen off the end of the Container, which should\n    // have auto-popped, but just in case we didn't for some reason,\n    // manually pop to restore the state (including currentPath).\n    if (this.state.callStack.elements.length > startCallStackHeight) {\n      this.state.PopCallStack();\n    }\n\n    let endStackHeight = this.state.evaluationStack.length;\n    if (endStackHeight > evalStackHeight) {\n      return this.state.PopEvaluationStack();\n    } else {\n      return null;\n    }\n  }\n\n  public allowExternalFunctionFallbacks: boolean = false;\n\n  public CallExternalFunction(\n    funcName: string | null,\n    numberOfArguments: number\n  ) {\n    if (funcName === null) {\n      return throwNullException(\"funcName\");\n    }\n    let funcDef = this._externals.get(funcName);\n    let fallbackFunctionContainer = null;\n\n    let foundExternal = typeof funcDef !== \"undefined\";\n\n    if (\n      foundExternal &&\n      !funcDef!.lookAheadSafe &&\n      this._stateSnapshotAtLastNewline !== null\n    ) {\n      this._sawLookaheadUnsafeFunctionAfterNewline = true;\n      return;\n    }\n\n    if (!foundExternal) {\n      if (this.allowExternalFunctionFallbacks) {\n        fallbackFunctionContainer = this.KnotContainerWithName(funcName);\n        this.Assert(\n          fallbackFunctionContainer !== null,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound, and fallback ink function could not be found.\"\n        );\n\n        // Divert direct into fallback function and we're done\n        this.state.callStack.Push(\n          PushPopType.Function,\n          undefined,\n          this.state.outputStream.length\n        );\n        this.state.divertedPointer = Pointer.StartOf(fallbackFunctionContainer);\n        return;\n      } else {\n        this.Assert(\n          false,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound (and ink fallbacks disabled).\"\n        );\n      }\n    }\n\n    // Pop arguments\n    let args: any[] = [];\n    for (let i = 0; i < numberOfArguments; ++i) {\n      // var poppedObj = state.PopEvaluationStack () as Value;\n      let poppedObj = asOrThrows(this.state.PopEvaluationStack(), Value);\n      let valueObj = poppedObj.valueObject;\n      args.push(valueObj);\n    }\n\n    // Reverse arguments from the order they were popped,\n    // so they're the right way round again.\n    args.reverse();\n\n    // Run the function!\n    let funcResult = funcDef!.function(args);\n\n    // Convert return value (if any) to the a type that the ink engine can use\n    let returnObj = null;\n    if (funcResult != null) {\n      returnObj = Value.Create(funcResult);\n      this.Assert(\n        returnObj !== null,\n        \"Could not create ink value from returned object of type \" +\n          typeof funcResult\n      );\n    } else {\n      returnObj = new Void();\n    }\n\n    this.state.PushEvaluationStack(returnObj);\n  }\n\n  public BindExternalFunctionGeneral(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean = true\n  ) {\n    this.IfAsyncWeCant(\"bind an external function\");\n    this.Assert(\n      !this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has already been bound.\"\n    );\n    this._externals.set(funcName, {\n      function: func,\n      lookAheadSafe: lookaheadSafe,\n    });\n  }\n\n  public TryCoerce(value: any) {\n    // We're skipping type coercition in this implementation. First of, js\n    // is loosely typed, so it's not that important. Secondly, there is no\n    // clean way (AFAIK) for the user to describe what type of parameters\n    // they expect.\n    return value;\n  }\n\n  public BindExternalFunction(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean = false\n  ) {\n    this.Assert(func != null, \"Can't bind a null function\");\n\n    this.BindExternalFunctionGeneral(\n      funcName,\n      (args: any) => {\n        this.Assert(\n          args.length >= func.length,\n          \"External function expected \" + func.length + \" arguments\"\n        );\n\n        let coercedArgs = [];\n        for (let i = 0, l = args.length; i < l; i++) {\n          coercedArgs[i] = this.TryCoerce(args[i]);\n        }\n        return func.apply(null, coercedArgs);\n      },\n      lookaheadSafe\n    );\n  }\n\n  public UnbindExternalFunction(funcName: string) {\n    this.IfAsyncWeCant(\"unbind an external a function\");\n    this.Assert(\n      this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has not been bound.\"\n    );\n    this._externals.delete(funcName);\n  }\n\n  public ValidateExternalBindings(): void;\n  public ValidateExternalBindings(\n    c: Container | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings(\n    o: InkObject | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings() {\n    let c: Container | null = null;\n    let o: InkObject | null = null;\n    let missingExternals: Set<string> = arguments[1] || new Set();\n\n    if (arguments[0] instanceof Container) {\n      c = arguments[0];\n    }\n\n    if (arguments[0] instanceof InkObject) {\n      o = arguments[0];\n    }\n\n    if (c === null && o === null) {\n      this.ValidateExternalBindings(\n        this._mainContentContainer,\n        missingExternals\n      );\n      this._hasValidatedExternals = true;\n\n      // No problem! Validation complete\n      if (missingExternals.size == 0) {\n        this._hasValidatedExternals = true;\n      } else {\n        let message = \"Error: Missing function binding for external\";\n        message += missingExternals.size > 1 ? \"s\" : \"\";\n        message += \": '\";\n        message += Array.from(missingExternals).join(\"', '\");\n        message += \"' \";\n        message += this.allowExternalFunctionFallbacks\n          ? \", and no fallback ink function found.\"\n          : \" (ink fallbacks disabled)\";\n\n        this.Error(message);\n      }\n    } else if (c != null) {\n      for (let innerContent of c.content) {\n        let container = innerContent as Container;\n        if (container == null || !container.hasValidName)\n          this.ValidateExternalBindings(innerContent, missingExternals);\n      }\n      for (let [, value] of c.namedContent) {\n        this.ValidateExternalBindings(\n          asOrNull(value, InkObject),\n          missingExternals\n        );\n      }\n    } else if (o != null) {\n      let divert = asOrNull(o, Divert);\n      if (divert && divert.isExternal) {\n        let name = divert.targetPathString;\n        if (name === null) {\n          return throwNullException(\"name\");\n        }\n        if (!this._externals.has(name)) {\n          if (this.allowExternalFunctionFallbacks) {\n            let fallbackFound =\n              this.mainContentContainer.namedContent.has(name);\n            if (!fallbackFound) {\n              missingExternals.add(name);\n            }\n          } else {\n            missingExternals.add(name);\n          }\n        }\n      }\n    }\n  }\n\n  public ObserveVariable(\n    variableName: string,\n    observer: Story.VariableObserver\n  ) {\n    this.IfAsyncWeCant(\"observe a new variable\");\n\n    if (this._variableObservers === null) this._variableObservers = new Map();\n\n    if (!this.state.variablesState.GlobalVariableExistsWithName(variableName))\n      throw new Error(\n        \"Cannot observe variable '\" +\n          variableName +\n          \"' because it wasn't declared in the ink story.\"\n      );\n\n    if (this._variableObservers.has(variableName)) {\n      this._variableObservers.get(variableName)!.push(observer);\n    } else {\n      this._variableObservers.set(variableName, [observer]);\n    }\n  }\n\n  public ObserveVariables(\n    variableNames: string[],\n    observers: Story.VariableObserver[]\n  ) {\n    for (let i = 0, l = variableNames.length; i < l; i++) {\n      this.ObserveVariable(variableNames[i], observers[i]);\n    }\n  }\n\n  public RemoveVariableObserver(\n    observer?: Story.VariableObserver,\n    specificVariableName?: string\n  ) {\n    // A couple of things to know about this method:\n    //\n    // 1. Since `RemoveVariableObserver` is exposed to the JavaScript world,\n    //    optionality is marked as `undefined` rather than `null`.\n    //    To keep things simple, null-checks are performed using regular\n    //    equality operators, where undefined == null.\n    //\n    // 2. Since C# delegates are translated to arrays of functions,\n    //    -= becomes a call to splice and null-checks are replaced by\n    //    emptiness-checks.\n    //\n    this.IfAsyncWeCant(\"remove a variable observer\");\n\n    if (this._variableObservers === null) return;\n\n    if (specificVariableName != null) {\n      if (this._variableObservers.has(specificVariableName)) {\n        if (observer != null) {\n          let variableObservers =\n            this._variableObservers.get(specificVariableName);\n          if (variableObservers != null) {\n            variableObservers.splice(variableObservers.indexOf(observer), 1);\n            if (variableObservers.length === 0) {\n              this._variableObservers.delete(specificVariableName);\n            }\n          }\n        } else {\n          this._variableObservers.delete(specificVariableName);\n        }\n      }\n    } else if (observer != null) {\n      let keys = this._variableObservers.keys();\n      for (let varName of keys) {\n        let variableObservers = this._variableObservers.get(varName);\n        if (variableObservers != null) {\n          variableObservers.splice(variableObservers.indexOf(observer), 1);\n          if (variableObservers.length === 0) {\n            this._variableObservers.delete(varName);\n          }\n        }\n      }\n    }\n  }\n\n  public VariableStateDidChangeEvent(\n    variableName: string,\n    newValueObj: InkObject\n  ) {\n    if (this._variableObservers === null) return;\n\n    let observers = this._variableObservers.get(variableName);\n    if (typeof observers !== \"undefined\") {\n      if (!(newValueObj instanceof Value)) {\n        throw new Error(\n          \"Tried to get the value of a variable that isn't a standard type\"\n        );\n      }\n      // var val = newValueObj as Value;\n      let val = asOrThrows(newValueObj, Value);\n\n      for (let observer of observers) {\n        observer(variableName, val.valueObject);\n      }\n    }\n  }\n\n  get globalTags() {\n    return this.TagsAtStartOfFlowContainerWithPathString(\"\");\n  }\n\n  public TagsForContentAtPath(path: string) {\n    return this.TagsAtStartOfFlowContainerWithPathString(path);\n  }\n\n  public TagsAtStartOfFlowContainerWithPathString(pathString: string) {\n    let path = new Path(pathString);\n\n    let flowContainer = this.ContentAtPath(path).container;\n    if (flowContainer === null) {\n      return throwNullException(\"flowContainer\");\n    }\n    while (true) {\n      let firstContent: InkObject = flowContainer.content[0];\n      if (firstContent instanceof Container) flowContainer = firstContent;\n      else break;\n    }\n\n    let inTag = false;\n    let tags: string[] | null = null;\n\n    for (let c of flowContainer.content) {\n      // var tag = c as Runtime.Tag;\n      let command = asOrNull(c, ControlCommand);\n\n      if (command != null) {\n        if (command.commandType == ControlCommand.CommandType.BeginTag) {\n          inTag = true;\n        } else if (command.commandType == ControlCommand.CommandType.EndTag) {\n          inTag = false;\n        }\n      } else if (inTag) {\n        let str = asOrNull(c, StringValue);\n        if (str !== null) {\n          if (tags === null) tags = [];\n          if (str.value !== null) tags.push(str.value);\n        } else {\n          this.Error(\n            \"Tag contained non-text content. Only plain text is allowed when using globalTags or TagsAtContentPath. If you want to evaluate dynamic content, you need to use story.Continue().\"\n          );\n        }\n      } else {\n        break;\n      }\n    }\n\n    return tags;\n  }\n\n  public BuildStringOfHierarchy() {\n    let sb = new StringBuilder();\n\n    this.mainContentContainer.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n\n    return sb.toString();\n  }\n\n  public BuildStringOfContainer(container: Container) {\n    let sb = new StringBuilder();\n    container.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n    return sb.toString();\n  }\n\n  public NextContent() {\n    this.state.previousPointer = this.state.currentPointer.copy();\n\n    if (!this.state.divertedPointer.isNull) {\n      this.state.currentPointer = this.state.divertedPointer.copy();\n      this.state.divertedPointer = Pointer.Null;\n\n      this.VisitChangedContainersDueToDivert();\n\n      if (!this.state.currentPointer.isNull) {\n        return;\n      }\n    }\n\n    let successfulPointerIncrement = this.IncrementContentPointer();\n\n    if (!successfulPointerIncrement) {\n      let didPop = false;\n\n      if (this.state.callStack.CanPop(PushPopType.Function)) {\n        this.state.PopCallStack(PushPopType.Function);\n\n        if (this.state.inExpressionEvaluation) {\n          this.state.PushEvaluationStack(new Void());\n        }\n\n        didPop = true;\n      } else if (this.state.callStack.canPopThread) {\n        this.state.callStack.PopThread();\n\n        didPop = true;\n      } else {\n        this.state.TryExitFunctionEvaluationFromGame();\n      }\n\n      if (didPop && !this.state.currentPointer.isNull) {\n        this.NextContent();\n      }\n    }\n  }\n\n  public IncrementContentPointer() {\n    let successfulIncrement = true;\n\n    let pointer = this.state.callStack.currentElement.currentPointer.copy();\n    pointer.index++;\n\n    if (pointer.container === null) {\n      return throwNullException(\"pointer.container\");\n    }\n    while (pointer.index >= pointer.container.content.length) {\n      successfulIncrement = false;\n\n      // Container nextAncestor = pointer.container.parent as Container;\n      let nextAncestor = asOrNull(pointer.container.parent, Container);\n      if (nextAncestor instanceof Container === false) {\n        break;\n      }\n\n      let indexInAncestor = nextAncestor!.content.indexOf(pointer.container);\n      if (indexInAncestor == -1) {\n        break;\n      }\n\n      pointer = new Pointer(nextAncestor, indexInAncestor);\n\n      pointer.index++;\n\n      successfulIncrement = true;\n      if (pointer.container === null) {\n        return throwNullException(\"pointer.container\");\n      }\n    }\n\n    if (!successfulIncrement) pointer = Pointer.Null;\n\n    this.state.callStack.currentElement.currentPointer = pointer.copy();\n\n    return successfulIncrement;\n  }\n\n  public TryFollowDefaultInvisibleChoice() {\n    let allChoices = this._state.currentChoices;\n\n    let invisibleChoices = allChoices.filter((c) => c.isInvisibleDefault);\n\n    if (\n      invisibleChoices.length == 0 ||\n      allChoices.length > invisibleChoices.length\n    )\n      return false;\n\n    let choice = invisibleChoices[0];\n\n    if (choice.targetPath === null) {\n      return throwNullException(\"choice.targetPath\");\n    }\n\n    if (choice.threadAtGeneration === null) {\n      return throwNullException(\"choice.threadAtGeneration\");\n    }\n\n    this.state.callStack.currentThread = choice.threadAtGeneration;\n\n    if (this._stateSnapshotAtLastNewline !== null) {\n      this.state.callStack.currentThread = this.state.callStack.ForkThread();\n    }\n\n    this.ChoosePath(choice.targetPath, false);\n\n    return true;\n  }\n\n  public NextSequenceShuffleIndex() {\n    // var numElementsIntVal = state.PopEvaluationStack () as IntValue;\n    let numElementsIntVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n    if (!(numElementsIntVal instanceof IntValue)) {\n      this.Error(\"expected number of elements in sequence for shuffle index\");\n      return 0;\n    }\n\n    let seqContainer = this.state.currentPointer.container;\n    if (seqContainer === null) {\n      return throwNullException(\"seqContainer\");\n    }\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (numElementsIntVal.value === null) {\n      return throwNullException(\"numElementsIntVal.value\");\n    }\n    let numElements = numElementsIntVal.value;\n\n    // var seqCountVal = state.PopEvaluationStack () as IntValue;\n    let seqCountVal = asOrThrows(this.state.PopEvaluationStack(), IntValue);\n    let seqCount = seqCountVal.value;\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (seqCount === null) {\n      return throwNullException(\"seqCount\");\n    }\n\n    let loopIndex = seqCount / numElements;\n    let iterationIndex = seqCount % numElements;\n\n    let seqPathStr = seqContainer.path.toString();\n    let sequenceHash = 0;\n    for (let i = 0, l = seqPathStr.length; i < l; i++) {\n      sequenceHash += seqPathStr.charCodeAt(i) || 0;\n    }\n    let randomSeed = sequenceHash + loopIndex + this.state.storySeed;\n    let random = new PRNG(Math.floor(randomSeed));\n\n    let unpickedIndices = [];\n    for (let i = 0; i < numElements; ++i) {\n      unpickedIndices.push(i);\n    }\n\n    for (let i = 0; i <= iterationIndex; ++i) {\n      let chosen = random.next() % unpickedIndices.length;\n      let chosenIndex = unpickedIndices[chosen];\n      unpickedIndices.splice(chosen, 1);\n\n      if (i == iterationIndex) {\n        return chosenIndex;\n      }\n    }\n\n    throw new Error(\"Should never reach here\");\n  }\n\n  public Error(message: string, useEndLineNumber = false): never {\n    let e = new StoryException(message);\n    e.useEndLineNumber = useEndLineNumber;\n    throw e;\n  }\n\n  public Warning(message: string) {\n    this.AddError(message, true);\n  }\n\n  public AddError(\n    message: string,\n    isWarning = false,\n    useEndLineNumber = false\n  ) {\n    let dm = this.currentDebugMetadata;\n\n    let errorTypeStr = isWarning ? \"WARNING\" : \"ERROR\";\n\n    if (dm != null) {\n      let lineNum = useEndLineNumber ? dm.endLineNumber : dm.startLineNumber;\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": '\" +\n        dm.fileName +\n        \"' line \" +\n        lineNum +\n        \": \" +\n        message;\n    } else if (!this.state.currentPointer.isNull) {\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": (\" +\n        this.state.currentPointer +\n        \"): \" +\n        message;\n    } else {\n      message = \"RUNTIME \" + errorTypeStr + \": \" + message;\n    }\n\n    this.state.AddError(message, isWarning);\n\n    // In a broken state don't need to know about any other errors.\n    if (!isWarning) this.state.ForceEnd();\n  }\n\n  public Assert(condition: boolean, message: string | null = null) {\n    if (condition == false) {\n      if (message == null) {\n        message = \"Story assert\";\n      }\n\n      throw new Error(message + \" \" + this.currentDebugMetadata);\n    }\n  }\n\n  get currentDebugMetadata(): DebugMetadata | null {\n    let dm: DebugMetadata | null;\n\n    let pointer = this.state.currentPointer;\n    if (!pointer.isNull && pointer.Resolve() !== null) {\n      dm = pointer.Resolve()!.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    for (let i = this.state.callStack.elements.length - 1; i >= 0; --i) {\n      pointer = this.state.callStack.elements[i].currentPointer;\n      if (!pointer.isNull && pointer.Resolve() !== null) {\n        dm = pointer.Resolve()!.debugMetadata;\n        if (dm !== null) {\n          return dm;\n        }\n      }\n    }\n\n    for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n      let outputObj = this.state.outputStream[i];\n      dm = outputObj.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    return null;\n  }\n\n  get mainContentContainer() {\n    if (this._temporaryEvaluationContainer) {\n      return this._temporaryEvaluationContainer;\n    } else {\n      return this._mainContentContainer;\n    }\n  }\n\n  /**\n   * `_mainContentContainer` is almost guaranteed to be set in the\n   * constructor, unless the json is malformed.\n   */\n  private _mainContentContainer!: Container;\n  private _listDefinitions: ListDefinitionsOrigin | null = null;\n\n  private _externals: Map<string, Story.ExternalFunctionDef>;\n  private _variableObservers: Map<string, Story.VariableObserver[]> | null =\n    null;\n  private _hasValidatedExternals: boolean = false;\n\n  private _temporaryEvaluationContainer: Container | null = null;\n\n  /**\n   * `state` is almost guaranteed to be set in the constructor, unless\n   * using the compiler-specific constructor which will likely not be used in\n   * the real world.\n   */\n  private _state!: StoryState;\n\n  private _asyncContinueActive: boolean = false;\n  private _stateSnapshotAtLastNewline: StoryState | null = null;\n  private _sawLookaheadUnsafeFunctionAfterNewline: boolean = false;\n\n  private _recursiveContinueCount: number = 0;\n\n  private _asyncSaving: boolean = false;\n\n  private _profiler: any | null = null; // TODO: Profiler\n}\n\nexport namespace Story {\n  export enum OutputStateChange {\n    NoChange = 0,\n    ExtendedBeyondNewline = 1,\n    NewlineRemoved = 2,\n  }\n\n  export interface EvaluateFunctionTextOutput {\n    returned: any;\n    output: string;\n  }\n\n  export interface ExternalFunctionDef {\n    function: ExternalFunction;\n    lookAheadSafe: boolean;\n  }\n\n  export type VariableObserver = (variableName: string, newValue: any) => void;\n  export type ExternalFunction = (...args: any) => any;\n}\n"],"names":["Debug","Path","_classCallCheck","this","_components","_componentsString","_isRelative","arguments","componentsString","Component","head","tail","push","concat","Array","relative","_createClass","key","get","length","slice","self","lastComponentIdx","i","l","isIndex","value","index","pathToAppend","p","upwardMoves","isParent","join","isRelative","set","substring","_step","_iterator","_createForOfIteratorHelper","split","s","n","done","str","test","parseInt","err","e","f","otherPath","Equals","c","_p$_components","apply","_toConsumableArray","path","asOrNull","obj","type","unsafeTypeAssertion","asOrThrows","Error","asINamedContentOrNull","hasValidName","name","nullIfUndefined","isEquatable","_typeof","parentId","indexOrName","toString","otherComp","Assert","condition","message","console","warn","trace","AssertType","variable","NullException","_Error","_inherits","_wrapNativeSuper","_super","_createSuper","throwNullException","InkObject","parent","_debugMetadata","_path","debugMetadata","root","rootContentContainer","targetContent","ContentAtPath","dm","startLineNumber","comps","child","container","Container","namedChild","unshift","content","indexOf","nearestContainer","GetComponent","contentContainer","globalPath","ownPath","minPathLength","Math","min","lastSharedPathCompIndex","ownComp","numUpwardsMoves","componentCount","newPathComps","up","ToParent","down","globalPathStr","relativePathStr","PathByAppendingPath","ConvertPathToRelative","ancestor","prop","StringBuilder","string","Append","format","_len","args","_key","replace","match","num","InkListItem","originName","itemName","fullName","nameParts","otherItem","JSON","stringify","parse","isLikeInkListItem","Null","inkListItem","item","hasOwnProperty","InkList","_Map","Map","_this","_arguments","call","origins","_originNames","otherList","otherOriginNames","originNames","singleOriginListName","originStory","SetInitialOriginName","listDefinitions","def","TryListGetDefinition","exists","result","singleElement","Add","Key","Value","itemOrItemName","AddItem","origin","intVal","TryGetValueForItem","foundListDef","_step2","_iterator2","ContainsItemWithName","itemVal","ValueForItem","_step3","_iterator3","_slicedToArray","fromSerializedKey","has","serialized","serializedKey","delete","size","maxOriginName","maxItem","every","Count","_step4","_iterator4","initialOriginName","initialOriginNames","_step5","max","_iterator5","_step5$value","isNull","_step6","_iterator6","_step6$value","list","_step7","_iterator7","_step8","items","_iterator8","_step8$value","ContainsKey","_step9","_iterator9","_step10","_iterator10","_step10$value","_step11","union","_iterator11","_step11$value","_step12","intersection","_iterator12","_step12$value","_step13","_iterator13","listToRemove","_step14","_iterator14","what","ContainsItemNamed","_step15","_iterator15","minItem","minBound","maxBound","ordered","orderedItems","minValue","maxValue","Number","MAX_SAFE_INTEGER","isInteger","subList","SetInitialOriginNames","_step16","_iterator16","otherInkList","_step17","_iterator17","_step18","_iterator18","_step18$value","sort","x","y","localeCompare","sb","NaN","myListItem","listValue","_a","FindSingleItemListWithName","StoryException","useEndLineNumber","tryGetValueFromMap","map","val","ValueType","AbstractValue","_InkObject","Create","valueObject","targetType","valueType","preferredNumberType","Int","IntValue","Float","isNaN","FloatValue","BoolValue","Boolean","StringValue","String","DivertTargetValue","ListValue","_AbstractValue","_super2","_Value","_super3","Bool","newType","BadCastException","_Value2","_super4","_Value3","_super5","_Value4","_super6","_this2","_isNewline","_isInlineWhitespace","isNewline","isInlineWhitespace","parsedInt","defaultValue","tryParseInt","parsedFloat","parseFloat","tryParseFloat","_Value5","_super7","targetPath","DivertTarget","VariablePointerValue","_Value6","_super8","variableName","_this3","contextIndex","undefined","_contextIndex","VariablePointer","_Value7","_super9","listOrSingleItem","singleValue","_this4","List","oldValue","newValue","oldList","newList","SearchResult","approximate","searchResult","_content","namedContent","visitsShouldBeCounted","turnIndexShouldBeCounted","countingAtStartOnly","_pathToFirstLeafContent","AddContent","namedOnlyContentDict","_step$value","inkObject","named","existingNamedOnly","namedOnlyContent","AddToNamedContentOnly","flags","CountFlags","Visits","Turns","CountStartOnly","flag","internalPathToFirstLeafContent","components","contentObjOrList","contentObj","TryAddNamedContent","namedContentObj","partialPathStart","partialPathLength","currentContainer","currentObj","comp","foundObj","ContentWithPathComponent","splice","otherContainer","_this$content","component","foundContent","BuildStringOfHierarchy","indentation","pointedObj","appendIndentation","AppendFormat","AppendLine","onlyNamed","_step7$value","PushPopType","Glue","ControlCommand","commandType","CommandType","NotSet","_commandType","EvalStart","EvalOutput","EvalEnd","Duplicate","PopEvaluatedValue","PopFunction","PopTunnel","BeginString","EndString","NoOp","ChoiceCount","TurnsSince","ReadCount","Random","SeedRandom","VisitIndex","SequenceShuffleIndex","StartThread","Done","End","ListFromInt","ListRange","ListRandom","BeginTag","EndTag","Pointer","PathByAppendingComponent","Divert","stackPushType","_targetPath","_targetPointer","variableDivertName","pushesToStack","isExternal","externalArgs","isConditional","targetObj","targetPointer","Resolve","ResolvePath","lastComponent","StartOf","copy","CompactPathString","otherDivert","hasVariableTarget","targetStr","Function","targetPathString","ChoicePoint","onceOnly","_pathOnChoice","hasCondition","hasStartContent","hasChoiceOnlyContent","isInvisibleDefault","choiceTargetObj","choiceTarget","pathOnChoice","VariableReference","pathForCount","pathStringForCount","VariableAssignment","isNewDeclaration","isGlobal","Void","NativeFunctionCall","_name","_numberOfParameters","_prototype","_isPrototype","_operationFuncs","GenerateNativeFunctionsIfNecessary","numberOfParameters","_nativeFunctions","parameters","Call","hasList","CallBinaryListOperation","coercedParams","CoerceValuesToSingleType","coercedType","CallType","parametersOfSingleType","param1","valType","val1","paramCount","opForTypeObj","val2","opForType","resultVal","CallListIncrementOperation","v1","v2","op","asBooleanOrThrows","isTruthy","listIntParams","listVal","resultInkList","_step2$value","listItemKey","listItemValue","listItem","intOp","targetInt","itemOrigin","incrementedItem","TryGetItemWithValue","parametersIn","specialCaseList","parametersOut","originOfMaxItem","castedValue","Cast","functionName","t","AddIntBinaryOp","Subtract","Multiply","Divide","floor","Mod","AddIntUnaryOp","Negate","Equal","Greater","Less","GreaterThanOrEquals","LessThanOrEquals","NotEquals","Not","And","Or","Max","Min","Pow","pow","Floor","Identity","Ceiling","AddFloatBinaryOp","AddFloatUnaryOp","ceil","AddStringBinaryOp","Has","includes","Hasnt","AddListBinaryOp","Union","Without","Contains","Intersect","GreaterThan","LessThan","AddListUnaryOp","Invert","inverse","All","all","ListMin","MinAsList","ListMax","MaxAsList","ValueOfList","AddOpToNativeFunc","d1","d2","nativeFunc","AddOpFuncForType","Tag","tagText","text","Choice","threadAtGeneration","sourcePath","tags","originalThreadIndex","ListDefinition","_items","_itemNameToValues","ListDefinitionsOrigin","lists","_lists","_allUnambiguousListValueCache","listOfLists","definition","JsonSerialisation","jArray","skipLast","count","jTok","runtimeObj","JTokenToRuntimeObject","writer","dictionary","WriteObjectStart","WritePropertyStart","WriteRuntimeObject","WritePropertyEnd","WriteObjectEnd","WriteArrayStart","WriteArrayEnd","dict","_step3$value","WriteIntProperty","WriteRuntimeContainer","divert","divTypeKey","Tunnel","WriteProperty","choicePoint","pathStringOnChoice","boolVal","WriteBool","WriteInt","floatVal","WriteFloat","strVal","Write","WriteStringStart","WriteStringInner","WriteStringEnd","WriteInkList","divTargetVal","varPtrVal","controlCmd","_controlCommandNames","varRef","readCountPath","varAss","tag","choice","WriteChoice","jObject","token","firstChar","CallExistsWithName","CallWithName","isArray","propValue","varPtr","isDivert","divPushType","external","target","readCountVarRef","isVarAss","isGlobalVar","varName","isNewDecl","listContent","rawList","namesAsObjs","nameToVal","JObjectToChoice","JArrayToContainer","toJson","me","removes","space","k","v","some","r","withoutName","countFlags","hasNameProperty","hasTerminator","namedContainer","WriteNull","JArrayToRuntimeObjList","terminatingObj","namedContentItem","namedSubContainer","jObj","WritePropertyNameStart","WritePropertyNameInner","WritePropertyNameEnd","listDefJson","_step9$value","defsObj","allDefs","nameValueKey","nameValue","TOTAL_VALUES","CallStack","_threadCounter","_startOfRoot","Story","storyContext","Reset","toCopy","_threads","otherThread","Copy","callStack","elements","cs","callstack","Thread","Element","jThreadObj","thread","w","WriteObject","WriteJson","newThread","currentThread","threadIndex","forkedThread","canPopThread","elementIsEvaluateFromGame","currentElement","FunctionEvaluationFromGame","externalEvaluationStackHeight","outputStreamLengthWithPushed","element","currentPointer","evaluationStackHeightWhenPushed","functionStartInOutputStream","canPop","CanPop","pop","currentElementIndex","contextElement","varValue","temporaryVariables","declareNew","RetainListOriginsForAssignment","filtered","filter","isCurrent","pointer","VariablesStateAccessor","_class","inExpressionEvaluation","previousPointer","jThreadCallstack","jElTok","jElementObj","pushPopType","currentContainerPathStr","currentContainerPathStrToken","threadPointerResult","Warning","el","temps","JObjectToDictionaryRuntimeObjs","clear","prevContentObjPath","prevPath","PointerAtPath","WriteDictionaryRuntimeObjs","resolvedPointer","VariablesState","_VariablesStateAccess","listDefsOrigin","variableChangedEventCallbacks","patch","_batchObservingVariableChanges","_defaultGlobalVariables","_changedVariablesForBatchObs","Set","_globalVariables","_callStack","_listDefsOrigin","_possibleConstructorReturn","Proxy","_assertThisInitialized","$","callback","currentValue","variableChangedEvent","varContents","TryGetGlobal","SetGlobal","globals","namedVarKey","namedVarValue","changedVariables","add","jToken","varValKey","varValValue","loadedToken","tokenInkObject","keyValKey","keyValValue","dontSaveDefaultValues","defaultVal","RuntimeObjectsEqual","obj1","obj2","constructor","GetRawVariableWithName","varPointer","ValueAtVariablePointer","variableValue","GetTemporaryVariableWithName","GetVariableWithName","setGlobal","GlobalVariableExistsWithName","ResolveVariablePointer","existingPointer","SetTemporaryVariable","batchObservingVariableChanges","AddChangedVariable","GetContextIndexOfVariableNamed","doubleRedirectionPointer","PRNG","seed","next","StatePatch","_changedVariables","_visitCounts","_turnIndices","_globals","SimpleJson","Reader","ToDictionary","ToArray","_rootObject","Writer","_currentPropertyName","_currentString","_stateStack","_collectionStack","_propertyNameStack","_jsonObject","inner","StartNewObject","newObject","state","State","Property","currentCollection","currentPropertyName","propertyName","None","StateElement","Object","innerOrContent","IncrementChildCount","childCount","PropertyName","_addToCurrentObject","error","POSITIVE_INFINITY","NEGATIVE_INFINITY","currEl","ErrorType","Flow","story","SetJsonToken","outputStream","currentChoices","jChoiceThreadsObj","LoadFlowChoiceThreads","WriteListRuntimeObjs","hasChoiceThreads","ThreadWithIndex","jChoiceThreads","foundActiveThread","jSavedChoiceThread","StoryState","kInkSaveStateVersion","kMinCompatibleLoadVersion","onDidLoadState","_currentErrors","_currentWarnings","divertedPointer","_currentTurnIndex","storySeed","previousRandom","didSafeExit","_currentText","_currentTags","_outputStreamTextDirty","_outputStreamTagsDirty","_patch","_aliveFlowNames","_namedFlows","kDefaultFlowName","_aliveFlowNamesDirty","_currentFlow","OutputStreamDirty","_evaluationStack","_variablesState","currentTurnIndex","timeSeed","Date","getTime","GoToStart","indented","ToJson","json","TextToDictionary","LoadJsonObj","pathString","visitCountOut","TryGetVisitCount","containerPathStr","count2","currCount","VisitCountForContainer","SetVisitCount","SetTurnIndex","TryGetTurnIndex","index2","depth","canContinue","hasError","currentErrors","currentWarnings","inTag","outputObj","textContent","controlCommand","CleanOutputWhitespace","currentWhitespaceStart","startOfLine","charAt","Length","txt","Clear","keys","flowName","mainContentContainer","flow","variablesState","SwitchFlow_Internal","SwitchToDefaultFlow_Internal","_copy$_currentFlow$cu","_copy$_currentFlow$ou","_copy$evaluationStack","_copy$_currentErrors","_copy$_currentWarning","_step4$value","namedFlowKey","namedFlowValue","hasWarning","evaluationStack","ApplyPatch","visitCounts","ApplyCountChanges","turnIndices","newCount","isVisit","_loop","WriteIntDictionary","inkVersionCurrent","jSaveVersion","flowsObj","flowsObjDict","_i","_flowsObjDictEntries","entries","_flowsObjDictEntries$","flowObj","currFlowName","currentDivertTargetPath","divertPath","JObjectToIntDictionary","_this$outputStream","objs","listText","TrySplittingHeadTailWhitespace","textObj","PushToOutputStreamIndividual","single","headFirstNewlineIdx","headLastNewlineIdx","tailLastNewlineIdx","tailFirstNewlineIdx","listTexts","innerStrStart","innerStrEnd","leadingSpaces","innerStrText","numSpaces","trailingSpaces","glue","includeInOutput","TrimNewlinesFromOutputStream","functionTrimIndex","glueTrimIndex","o","isNonWhitespace","RemoveExistingGlue","callStackElements","outputStreamEndsInNewline","outputStreamContainsContent","removeWhitespaceFrom","cmd","numberOfObjects","functionStartPoint","popType","TrimWhitespaceFromFunctionEnd","Pop","incrementingTurnIndex","newPointer","funcContainer","Push","PassArgumentsToEvaluationStack","PushEvaluationStack","callStackTrace","originalEvaluationStackHeight","returnedObj","poppedObj","PopEvaluationStack","PopCallStack","returnVal","isWarning","Stopwatch","startTime","nVal","isFinite","inkVersionMinimumCompatible","onError","onDidContinue","onMakeChoice","onEvaluateFunction","onCompleteEvaluateFunction","onChoosePathString","_prevContainers","allowExternalFunctionFallbacks","_listDefinitions","_variableObservers","_hasValidatedExternals","_temporaryEvaluationContainer","_asyncContinueActive","_stateSnapshotAtLastNewline","_sawLookaheadUnsafeFunctionAfterNewline","_recursiveContinueCount","_asyncSaving","_profiler","_mainContentContainer","jsonString","_externals","rootObject","versionObj","formatFromFile","listDefsObj","rootToken","JTokenToListDefinitions","ResetState","choices","_state","IfAsyncWeCant","currentText","currentTags","currentFlowName","currentFlowIsDefaultFlow","aliveFlowNames","shouldReturn","ObserveVariableChange","VariableStateDidChangeEvent","bind","ResetGlobals","ResetErrors","ForceEnd","originalPointer","ChoosePath","ContinueInternal","SnapshotDefaultGlobals","RemoveFlow_Internal","ContinueAsync","millisecsLimitAsync","ValidateExternalBindings","PreContinue","isAsyncTimeLimited","ResetOutput","durationStopwatch","Start","ContinueSingleStep","AddError","ElapsedMilliseconds","Stop","RestoreStateSnapshot","generatedChoices","PostContinue","PreStep","Step","PostStep","TryFollowDefaultInvisibleChoice","PreSnapshot","inStringEvaluation","change","CalculateNewlineOutputStateChange","OutputStateChange","ExtendedBeyondNewline","NewlineRemoved","DiscardSnapshot","StateSnapshot","PostSnapshot","prevText","currText","prevTagCount","currTagCount","newlineStillExists","NoChange","Continue","pathLengthToUse","CopyAndStartPatching","RestoreAfterPatch","ApplyAnyPatch","stateToSave","shouldAddToStream","containerToEnter","VisitContainer","currentContentObj","isLogicOrFlowControl","PerformLogicAndFlowControl","ProcessChoice","contextIdx","ContextForVariableNamed","PushToOutputStream","NextContent","PushThread","atStart","IncrementVisitCountForContainer","RecordTurnIndexVisitToContainer","prevAncestor","currentChildOfContainer","currentContainerAncestor","allChildrenEnteredAtStart","enteringAtStart","choiceOnlyStrVal","PeekEvaluationStack","showChoice","conditionValue","IsTruthy","startText","choiceOnlyText","PopChoiceStringAndTags","ForkThread","reverse","divTarget","currentDivert","intContent","errorMessage","CallExternalFunction","sourceName","evalCommand","output","overrideTunnelReturnTarget","popped","TryExitFunctionEvaluationFromGame","names","expected","errorMsg","contentStackForTag","outputCountConsumed","command","PopFromOutputStream","_contentStackForTag","choiceTag","contentStackForString","contentToRetain","_i3","_contentToRetain","rescuedTag","choiceCount","extraNote","eitherCount","divertTarget","correctObj","TurnsSinceForContainer","maxInt","minInt","randomRange","resultSeed","nextRandom","chosenValue","shuffleIndex","NextSequenceShuffleIndex","PopThread","listNameVal","generatedListValue","foundItem","targetList","ListWithSubRange","listItemIndex","listEnumerator","randomItem","assignedVal","Assign","foundValue","containerForCount","func","funcParams","resetCallstack","ResetCallstack","funcDetail","activityStr","SetChosenPath","VisitChangedContainersDueToDivert","choiceIdx","choiceToChoose","KnotContainerWithName","returnTextOutput","trim","outputStreamBefore","StartFunctionEvaluationFromGame","stringOutput","textOutput","CompleteFunctionEvaluationFromGame","returned","exprContainer","startCallStackHeight","evalStackHeight","funcName","numberOfArguments","funcDef","fallbackFunctionContainer","foundExternal","lookAheadSafe","valueObj","funcResult","function","returnObj","lookaheadSafe","BindExternalFunctionGeneral","coercedArgs","TryCoerce","missingExternals","from","innerContent","fallbackFound","observer","variableNames","observers","ObserveVariable","specificVariableName","variableObservers","newValueObj","TagsAtStartOfFlowContainerWithPathString","flowContainer","firstContent","IncrementContentPointer","didPop","successfulIncrement","nextAncestor","indexInAncestor","allChoices","invisibleChoices","numElementsIntVal","seqContainer","numElements","seqCount","loopIndex","iterationIndex","seqPathStr","sequenceHash","charCodeAt","randomSeed","random","unpickedIndices","chosen","chosenIndex","currentDebugMetadata","errorTypeStr","lineNum","endLineNumber","fileName"],"mappings":"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"}