{"version":3,"file":"ink-full-es2015.js","sources":["../src/compiler/CompilerOptions.ts","../src/compiler/DebugSourceRange.ts","../src/compiler/Parser/ErrorType.ts","../src/engine/Debug.ts","../src/engine/Value.ts","../src/engine/PushPop.ts","../src/compiler/Parser/ParsedHierarchy/SymbolType.ts","../src/compiler/Parser/ParsedHierarchy/Argument.ts","../src/engine/TypeAssertion.ts","../src/compiler/Parser/ParsedHierarchy/Object.ts","../src/compiler/Parser/ParsedHierarchy/AuthorWarning.ts","../src/engine/Path.ts","../src/engine/NullException.ts","../src/engine/Object.ts","../src/engine/StringBuilder.ts","../src/engine/InkList.ts","../src/engine/StoryException.ts","../src/engine/TryGetResult.ts","../src/engine/SearchResult.ts","../src/engine/Container.ts","../src/engine/ControlCommand.ts","../src/compiler/Parser/ParsedHierarchy/Expression/Expression.ts","../src/engine/Void.ts","../src/engine/NativeFunctionCall.ts","../src/compiler/Parser/ParsedHierarchy/Expression/NumberExpression.ts","../src/compiler/Parser/ParsedHierarchy/Expression/UnaryExpression.ts","../src/compiler/Parser/ParsedHierarchy/Expression/BinaryExpression.ts","../src/compiler/Parser/CharacterSet.ts","../src/compiler/Parser/CharacterRange.ts","../src/engine/ChoicePoint.ts","../src/engine/Pointer.ts","../src/engine/Divert.ts","../src/engine/VariableAssignment.ts","../src/compiler/Parser/ParsedHierarchy/Choice.ts","../src/compiler/Parser/StringParser/StringParserElement.ts","../src/compiler/Parser/StringParser/StringParserState.ts","../src/compiler/Parser/StringParser/StringParser.ts","../src/compiler/Parser/CommentEliminator.ts","../src/compiler/Parser/ParsedHierarchy/Conditional/Conditional.ts","../src/compiler/Parser/ParsedHierarchy/Text.ts","../src/compiler/Parser/ParsedHierarchy/Declaration/ConstantDeclaration.ts","../src/compiler/Parser/ParsedHierarchy/Flow/FlowLevel.ts","../src/compiler/Parser/ParsedHierarchy/Sequence/SequenceType.ts","../src/compiler/Parser/CustomFlags.ts","../src/compiler/Parser/StatementLevel.ts","../src/engine/Error.ts","../src/compiler/Parser/ParsedHierarchy/Gather/Gather.ts","../src/compiler/Parser/ParsedHierarchy/Path.ts","../src/compiler/Parser/ParsedHierarchy/ReturnType.ts","../src/compiler/Parser/ParsedHierarchy/Flow/ClosestFlowBase.ts","../src/compiler/Parser/ParsedHierarchy/Identifier.ts","../src/compiler/Parser/ParsedHierarchy/Flow/FlowBase.ts","../src/compiler/Parser/ParsedHierarchy/ContentList.ts","../src/engine/VariableReference.ts","../src/compiler/Parser/ParsedHierarchy/Variable/VariableReference.ts","../src/compiler/Parser/ParsedHierarchy/FunctionCall.ts","../src/compiler/Parser/ParsedHierarchy/Expression/MultipleConditionExpression.ts","../src/compiler/Parser/ParsedHierarchy/Divert/DivertTarget.ts","../src/compiler/Parser/ParsedHierarchy/Divert/Divert.ts","../src/compiler/Parser/ParsedHierarchy/Gather/GatherPointToResolve.ts","../src/compiler/Parser/ParsedHierarchy/Sequence/SequenceDivertToResolve.ts","../src/compiler/Parser/ParsedHierarchy/Sequence/Sequence.ts","../src/compiler/Parser/ParsedHierarchy/TunnelOnwards.ts","../src/engine/ListDefinition.ts","../src/compiler/Parser/ParsedHierarchy/List/ListDefinition.ts","../src/compiler/Parser/ParsedHierarchy/Variable/VariableAssignment.ts","../src/compiler/Parser/ParsedHierarchy/Weave.ts","../src/compiler/Parser/ParsedHierarchy/Conditional/ConditionalSingleBranch.ts","../src/engine/DebugMetadata.ts","../src/compiler/Parser/ParsedHierarchy/Declaration/ExternalDeclaration.ts","../src/compiler/Parser/FlowDecl.ts","../src/compiler/Parser/ParsedHierarchy/Wrap.ts","../src/compiler/Parser/ParsedHierarchy/Glue.ts","../src/engine/Glue.ts","../src/compiler/Parser/ParsedHierarchy/Expression/IncDecExpression.ts","../src/compiler/Parser/ParsedHierarchy/IncludedFile.ts","../src/compiler/Parser/InfixOperator.ts","../src/compiler/Parser/ParsedHierarchy/Knot.ts","../src/compiler/Parser/ParsedHierarchy/List/List.ts","../src/compiler/Parser/ParsedHierarchy/List/ListElementDefinition.ts","../src/compiler/Parser/ParsedHierarchy/Stitch.ts","../src/engine/Tag.ts","../src/engine/Choice.ts","../src/engine/ListDefinitionsOrigin.ts","../src/engine/JsonSerialisation.ts","../src/engine/CallStack.ts","../src/engine/VariablesState.ts","../src/engine/PRNG.ts","../src/engine/StatePatch.ts","../src/engine/SimpleJson.ts","../src/engine/Flow.ts","../src/engine/StoryState.ts","../src/engine/StopWatch.ts","../src/engine/Story.ts","../src/compiler/Parser/ParsedHierarchy/Story.ts","../src/compiler/Parser/ParsedHierarchy/Expression/StringExpression.ts","../src/compiler/Parser/ParsedHierarchy/Tag.ts","../src/compiler/FileHandler/DefaultFileHandler.ts","../src/compiler/Parser/InkParser.ts","../src/compiler/Compiler.ts","../src/compiler/FileHandler/JsonFileHandler.ts"],"sourcesContent":["import { ErrorHandler } from \"../engine/Error\";\nimport { IFileHandler } from \"./IFileHandler\";\n\nexport class CompilerOptions {\n  constructor(\n    public readonly sourceFilename: string | null = null,\n    public readonly pluginNames: string[] = [],\n    public readonly countAllVisits: boolean = false,\n    public readonly errorHandler: ErrorHandler | null = null,\n    public readonly fileHandler: IFileHandler | null = null\n  ) {}\n}\n","import { DebugMetadata } from \"../engine/DebugMetadata\";\n\nexport class DebugSourceRange {\n  constructor(\n    public readonly length: number,\n    public readonly debugMetadata: DebugMetadata | null,\n    public text: string\n  ) {}\n}\n","// TODO: Unifify with Engine.\n\nexport enum ErrorType {\n  Author,\n  Warning,\n  Error,\n}\n","export namespace Debug {\n  export function AssertType<T>(\n    variable: any,\n    type: new () => T,\n    message: string\n  ): void | never {\n    Assert(variable instanceof type, message);\n  }\n\n  export function Assert(condition: boolean, message?: string): void | never {\n    if (!condition) {\n      if (typeof message !== \"undefined\") {\n        console.warn(message);\n      }\n\n      if (console.trace) {\n        console.trace();\n      }\n\n      throw new Error(\"\");\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { StoryException } from \"./StoryException\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { tryParseInt, tryParseFloat } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport abstract class AbstractValue extends InkObject {\n  public abstract get valueType(): ValueType;\n  public abstract get isTruthy(): boolean;\n  public abstract get valueObject(): any;\n\n  public abstract Cast(newType: ValueType): Value<any>;\n\n  public static Create(\n    val: any,\n    preferredNumberType?: ValueType\n  ): Value<any> | null {\n    // This code doesn't exist in upstream and is simply here to enforce\n    // the creation of the proper number value.\n    // If `preferredNumberType` is not provided or if value doesn't match\n    // `preferredNumberType`, this conditional does nothing.\n    if (preferredNumberType) {\n      if (\n        preferredNumberType === (ValueType.Int as ValueType) &&\n        Number.isInteger(Number(val))\n      ) {\n        return new IntValue(Number(val));\n      } else if (\n        preferredNumberType === (ValueType.Float as ValueType) &&\n        !isNaN(val)\n      ) {\n        return new FloatValue(Number(val));\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      return new BoolValue(Boolean(val));\n    }\n\n    // https://github.com/y-lohse/inkjs/issues/425\n    // Changed condition sequence, because Number('') is\n    // parsed to 0, which made setting string to empty\n    // impossible\n    if (typeof val === \"string\") {\n      return new StringValue(String(val));\n    } else if (Number.isInteger(Number(val))) {\n      return new IntValue(Number(val));\n    } else if (!isNaN(val)) {\n      return new FloatValue(Number(val));\n    } else if (val instanceof Path) {\n      return new DivertTargetValue(asOrThrows(val, Path));\n    } else if (val instanceof InkList) {\n      return new ListValue(asOrThrows(val, InkList));\n    }\n\n    return null;\n  }\n  public Copy() {\n    return asOrThrows(AbstractValue.Create(this.valueObject), InkObject);\n  }\n  public BadCastException(targetType: ValueType) {\n    return new StoryException(\n      \"Can't cast \" +\n        this.valueObject +\n        \" from \" +\n        this.valueType +\n        \" to \" +\n        targetType\n    );\n  }\n}\n\nexport abstract class Value<\n  T extends { toString: () => string }\n> extends AbstractValue {\n  public value: T | null;\n\n  constructor(val: T | null) {\n    super();\n    this.value = val;\n  }\n  public get valueObject() {\n    return this.value;\n  }\n  public toString() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.toString();\n  }\n}\n\nexport class BoolValue extends Value<boolean> {\n  constructor(val: boolean) {\n    super(val || false);\n  }\n  public get isTruthy() {\n    return Boolean(this.value);\n  }\n  public get valueType() {\n    return ValueType.Bool;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value ? 1 : 0);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value ? 1.0 : 0.0);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(this.value ? \"true\" : \"false\");\n    }\n\n    throw this.BadCastException(newType);\n  }\n\n  public toString() {\n    return this.value ? \"true\" : \"false\";\n  }\n}\n\nexport class IntValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0);\n  }\n  public get isTruthy() {\n    return this.value != 0;\n  }\n  public get valueType() {\n    return ValueType.Int;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0 ? false : true);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class FloatValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0.0);\n  }\n  public get isTruthy() {\n    return this.value != 0.0;\n  }\n  public get valueType() {\n    return ValueType.Float;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0.0 ? false : true);\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class StringValue extends Value<string> {\n  public _isNewline: boolean;\n  public _isInlineWhitespace: boolean;\n\n  constructor(val: string) {\n    super(val || \"\");\n\n    this._isNewline = this.value == \"\\n\";\n    this._isInlineWhitespace = true;\n\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (this.value.length > 0) {\n      this.value.split(\"\").every((c) => {\n        if (c != \" \" && c != \"\\t\") {\n          this._isInlineWhitespace = false;\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }\n  public get valueType() {\n    return ValueType.String;\n  }\n  public get isTruthy() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.length > 0;\n  }\n  public get isNewline() {\n    return this._isNewline;\n  }\n  public get isInlineWhitespace() {\n    return this._isInlineWhitespace;\n  }\n  public get isNonWhitespace() {\n    return !this.isNewline && !this.isInlineWhitespace;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      let parsedInt = tryParseInt(this.value);\n      if (parsedInt.exists) {\n        return new IntValue(parsedInt.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    if (newType == ValueType.Float) {\n      let parsedFloat = tryParseFloat(this.value);\n      if (parsedFloat.exists) {\n        return new FloatValue(parsedFloat.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class DivertTargetValue extends Value<Path> {\n  constructor(targetPath: Path | null = null) {\n    super(targetPath);\n  }\n  public get valueType() {\n    return ValueType.DivertTarget;\n  }\n  public get targetPath() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set targetPath(value: Path) {\n    this.value = value;\n  }\n  public get isTruthy(): never {\n    throw new Error(\"Shouldn't be checking the truthiness of a divert target\");\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"DivertTargetValue(\" + this.targetPath + \")\";\n  }\n}\n\nexport class VariablePointerValue extends Value<string> {\n  public _contextIndex: number;\n\n  constructor(variableName: string, contextIndex: number = -1) {\n    super(variableName);\n\n    this._contextIndex = contextIndex;\n  }\n\n  public get contextIndex() {\n    return this._contextIndex;\n  }\n  public set contextIndex(value: number) {\n    this._contextIndex = value;\n  }\n  public get variableName() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set variableName(value: string) {\n    this.value = value;\n  }\n  public get valueType() {\n    return ValueType.VariablePointer;\n  }\n\n  public get isTruthy(): never {\n    throw new Error(\n      \"Shouldn't be checking the truthiness of a variable pointer\"\n    );\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"VariablePointerValue(\" + this.variableName + \")\";\n  }\n  public Copy() {\n    return new VariablePointerValue(this.variableName, this.contextIndex);\n  }\n}\n\nexport class ListValue extends Value<InkList> {\n  public get isTruthy() {\n    if (this.value === null) {\n      return throwNullException(\"this.value\");\n    }\n    return this.value.Count > 0;\n  }\n  public get valueType() {\n    return ValueType.List;\n  }\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == ValueType.Int) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new IntValue(0);\n      else return new IntValue(max.Value);\n    } else if (newType == ValueType.Float) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new FloatValue(0.0);\n      else return new FloatValue(max.Value);\n    } else if (newType == ValueType.String) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new StringValue(\"\");\n      else {\n        return new StringValue(max.Key.toString());\n      }\n    }\n\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  constructor();\n  constructor(list: InkList);\n  constructor(listOrSingleItem: InkListItem, singleValue: number);\n  constructor(listOrSingleItem?: InkListItem | InkList, singleValue?: number) {\n    super(null);\n\n    if (!listOrSingleItem && !singleValue) {\n      this.value = new InkList();\n    } else if (listOrSingleItem instanceof InkList) {\n      this.value = new InkList(listOrSingleItem);\n    } else if (\n      listOrSingleItem instanceof InkListItem &&\n      typeof singleValue === \"number\"\n    ) {\n      this.value = new InkList({\n        Key: listOrSingleItem,\n        Value: singleValue,\n      });\n    }\n  }\n  public static RetainListOriginsForAssignment(\n    oldValue: InkObject | null,\n    newValue: InkObject\n  ) {\n    let oldList = asOrNull(oldValue, ListValue);\n    let newList = asOrNull(newValue, ListValue);\n\n    if (newList && newList.value === null)\n      return throwNullException(\"newList.value\");\n    if (oldList && oldList.value === null)\n      return throwNullException(\"oldList.value\");\n\n    // When assigning the empty list, try to retain any initial origin names\n    if (oldList && newList && newList.value!.Count == 0)\n      newList.value!.SetInitialOriginNames(oldList.value!.originNames);\n  }\n}\n\nexport enum ValueType {\n  Bool = -1,\n  Int = 0,\n  Float = 1,\n  List = 2,\n  String = 3,\n  DivertTarget = 4,\n  VariablePointer = 5,\n}\n","export enum PushPopType {\n  Tunnel = 0,\n  Function = 1,\n  FunctionEvaluationFromGame = 2,\n}\n","export enum SymbolType {\n  Knot = 0,\n  List = 1,\n  ListItem = 2,\n  Var = 3,\n  SubFlowAndWeave = 4,\n  Arg = 5,\n  Temp = 6,\n}\n","import { Identifier } from \"./Identifier\";\n\nexport class Argument {\n  constructor(\n    public identifier: Identifier | null = null,\n    public isByReference: boolean | null = null,\n    public isDivertTarget: boolean | null = null\n  ) {}\n}\n","import { INamedContent } from \"./INamedContent\";\n\nexport function asOrNull<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | null {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    return null;\n  }\n}\n\nexport function asOrThrows<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | never {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    throw new Error(`${obj} is not of type ${type}`);\n  }\n}\n\nexport function asNumberOrThrows(obj: any) {\n  if (typeof obj === \"number\") {\n    return obj as number;\n  } else {\n    throw new Error(`${obj} is not a number`);\n  }\n}\n\nexport function asBooleanOrThrows(obj: any) {\n  if (typeof obj === \"boolean\") {\n    return obj as boolean;\n  } else {\n    throw new Error(`${obj} is not a boolean`);\n  }\n}\n\n// So here, in the reference implementation, contentObj is casted to an INamedContent\n// but here we use js-style duck typing: if it implements the same props as the interface,\n// we treat it as valid.\nexport function asINamedContentOrNull(obj: any): INamedContent | null {\n  if (obj.hasValidName && obj.name) {\n    return obj as INamedContent;\n  }\n\n  return null;\n}\n\nexport function nullIfUndefined<T>(obj: T | undefined): T | null {\n  if (typeof obj === \"undefined\") {\n    return null;\n  }\n\n  return obj;\n}\n\nexport function isEquatable(type: any) {\n  return typeof type === \"object\" && typeof type.Equals === \"function\";\n}\n\nfunction unsafeTypeAssertion<T>(\n  obj: any,\n  type: (new () => T) | (Function & { prototype: T })\n) {\n  return obj as T;\n}\n\nexport function filterUndef<T>(element: T | undefined): element is T {\n  return element != undefined;\n}\n","import { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { DebugMetadata } from \"../../../engine/DebugMetadata\";\nimport { FindQueryFunc } from \"./FindQueryFunc\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Path as RuntimePath } from \"../../../engine/Path\";\nimport { Story } from \"./Story\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\n\nexport abstract class ParsedObject {\n  public abstract readonly GenerateRuntimeObject: () => RuntimeObject | null;\n\n  private _alreadyHadError: boolean = false;\n  private _alreadyHadWarning: boolean = false;\n  private _debugMetadata: DebugMetadata | null = null;\n  private _runtimeObject: RuntimeObject | null = null;\n\n  public content: ParsedObject[] = [];\n  public parent: ParsedObject | null = null;\n\n  get debugMetadata() {\n    if (this._debugMetadata === null && this.parent) {\n      return this.parent.debugMetadata;\n    }\n\n    return this._debugMetadata;\n  }\n\n  set debugMetadata(value: DebugMetadata | null) {\n    this._debugMetadata = value;\n  }\n\n  get hasOwnDebugMetadata(): boolean {\n    return Boolean(this.debugMetadata);\n  }\n\n  get typeName(): string {\n    return \"ParsedObject\";\n  }\n\n  public readonly GetType = (): string => this.typeName;\n\n  get story(): Story {\n    let ancestor: ParsedObject = this;\n    while (ancestor.parent) {\n      ancestor = ancestor.parent;\n    }\n\n    return ancestor as Story;\n  }\n\n  get runtimeObject(): RuntimeObject {\n    if (!this._runtimeObject) {\n      this._runtimeObject = this.GenerateRuntimeObject();\n      if (this._runtimeObject) {\n        this._runtimeObject.debugMetadata = this.debugMetadata;\n      }\n    }\n\n    return this._runtimeObject as RuntimeObject;\n  }\n\n  set runtimeObject(value: RuntimeObject) {\n    this._runtimeObject = value;\n  }\n\n  get runtimePath(): RuntimePath {\n    if (!this.runtimeObject.path) {\n      throw new Error();\n    }\n\n    return this.runtimeObject.path;\n  }\n\n  // When counting visits and turns since, different object\n  // types may have different containers that needs to be counted.\n  // For most it'll just be the object's main runtime object,\n  // but for e.g. choices, it'll be the target container.\n  get containerForCounting(): RuntimeContainer | null {\n    return this.runtimeObject as RuntimeContainer;\n  }\n\n  get ancestry(): ParsedObject[] {\n    let result = [];\n\n    let ancestor = this.parent;\n    while (ancestor) {\n      result.push(ancestor);\n      ancestor = ancestor.parent;\n    }\n\n    result = result.reverse();\n\n    return result;\n  }\n\n  /*\n  get descriptionOfScope(): string {\n    const locationNames: string[] = [];\n\n    let ancestor: ParsedObject | null = this;\n    while (ancestor) {\n      var ancestorFlow = ancestor as FlowBase;\n      if (ancestorFlow && ancestorFlow.name != null) {\n        locationNames.push(`'${ancestorFlow.name}'`);\n      }\n      ancestor = ancestor.parent;\n    }\n\n    let scopeSB = '';\n    if (locationNames.length > 0) {\n      const locationsListStr = locationNames.join(', ');\n      scopeSB += `${locationsListStr} and`;\n    }\n\n    scopeSB += 'at top scope';\n\n    return scopeSB;\n  }\n*/\n\n  // Return the object so that method can be chained easily\n  public readonly AddContent = <T extends ParsedObject, V extends T | T[]>(\n    subContent: V\n  ) => {\n    if (this.content === null) {\n      this.content = [];\n    }\n\n    const sub = Array.isArray(subContent) ? subContent : [subContent];\n\n    // Make resilient to content not existing, which can happen\n    // in the case of parse errors where we've already reported\n    // an error but still want a valid structure so we can\n    // carry on parsing.\n    for (const ss of sub) {\n      if (ss.hasOwnProperty(\"parent\")) {\n        ss.parent = this;\n      }\n      this.content.push(ss);\n    }\n\n    if (Array.isArray(subContent)) {\n      return;\n    } else {\n      return subContent;\n    }\n  };\n\n  public readonly InsertContent = <T extends ParsedObject>(\n    index: number,\n    subContent: T\n  ): T => {\n    if (this.content === null) {\n      this.content = [];\n    }\n\n    subContent.parent = this;\n    this.content.splice(index, 0, subContent);\n\n    return subContent;\n  };\n\n  public readonly Find =\n    <T extends ParsedObject>(\n      type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n    ) =>\n    (queryFunc: FindQueryFunc<T> | null = null): T | null => {\n      let tObj = asOrNull(this, type) as any as T;\n      if (tObj !== null && (queryFunc === null || queryFunc(tObj) === true)) {\n        return tObj;\n      }\n\n      if (this.content === null) {\n        return null;\n      }\n\n      for (const obj of this.content) {\n        let nestedResult = obj.Find && obj.Find(type)(queryFunc);\n        if (nestedResult) {\n          return nestedResult as T;\n        }\n      }\n\n      return null;\n    };\n\n  public readonly FindAll =\n    <T extends ParsedObject>(\n      type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n    ) =>\n    (queryFunc?: FindQueryFunc<T>, foundSoFar?: T[]): T[] => {\n      const found = Array.isArray(foundSoFar) ? foundSoFar : [];\n\n      const tObj = asOrNull(this, type);\n      if (tObj !== null && (!queryFunc || queryFunc(tObj) === true)) {\n        found.push(tObj);\n      }\n\n      if (this.content === null) {\n        return [];\n      }\n\n      for (const obj of this.content) {\n        obj.FindAll && obj.FindAll(type)(queryFunc, found);\n      }\n\n      return found;\n    };\n\n  public ResolveReferences(context: Story) {\n    if (this.content !== null) {\n      for (const obj of this.content) {\n        obj.ResolveReferences(context);\n      }\n    }\n  }\n\n  public Error(\n    message: string,\n    source: ParsedObject | null = null,\n    isWarning: boolean = false\n  ): void {\n    if (source === null) {\n      source = this;\n    }\n\n    // Only allow a single parsed object to have a single error *directly* associated with it\n    if (\n      (source._alreadyHadError && !isWarning) ||\n      (source._alreadyHadWarning && isWarning)\n    ) {\n      return;\n    }\n\n    if (this.parent) {\n      this.parent.Error(message, source, isWarning);\n    } else {\n      throw new Error(`No parent object to send error to: ${message}`);\n    }\n\n    if (isWarning) {\n      source._alreadyHadWarning = true;\n    } else {\n      source._alreadyHadError = true;\n    }\n  }\n\n  public readonly Warning = (\n    message: string,\n    source: ParsedObject | null = null\n  ): void => {\n    this.Error(message, source, true);\n  };\n}\n","﻿import { ParsedObject } from \"./Object\";\n\nexport class AuthorWarning extends ParsedObject {\n  constructor(public readonly warningMessage: string) {\n    super();\n  }\n\n  get typeName(): string {\n    return \"AuthorWarning\";\n  }\n\n  public readonly GenerateRuntimeObject = (): null => {\n    this.Warning(this.warningMessage);\n    return null;\n  };\n}\n","export class Path {\n  public static parentId = \"^\";\n\n  public _isRelative: boolean;\n  public _components: Path.Component[];\n  public _componentsString: string | null;\n\n  constructor();\n  constructor(componentsString: string);\n  constructor(head: Path.Component, tail: Path);\n  constructor(head: Path.Component[], relative?: boolean);\n  constructor() {\n    this._components = [];\n    this._componentsString = null;\n    this._isRelative = false;\n\n    if (typeof arguments[0] == \"string\") {\n      let componentsString = arguments[0] as string;\n      this.componentsString = componentsString;\n    } else if (\n      arguments[0] instanceof Path.Component &&\n      arguments[1] instanceof Path\n    ) {\n      let head = arguments[0] as Path.Component;\n      let tail = arguments[1] as Path;\n      this._components.push(head);\n      this._components = this._components.concat(tail._components);\n    } else if (arguments[0] instanceof Array) {\n      let head = arguments[0] as Path.Component[];\n      let relative = !!arguments[1] as boolean;\n      this._components = this._components.concat(head);\n      this._isRelative = relative;\n    }\n  }\n  get isRelative() {\n    return this._isRelative;\n  }\n  get componentCount(): number {\n    return this._components.length;\n  }\n  get head(): Path.Component | null {\n    if (this._components.length > 0) {\n      return this._components[0];\n    } else {\n      return null;\n    }\n  }\n  get tail(): Path {\n    if (this._components.length >= 2) {\n      // careful, the original code uses length-1 here. This is because the second argument of\n      // List.GetRange is a number of elements to extract, wherease Array.slice uses an index\n      let tailComps = this._components.slice(1, this._components.length);\n      return new Path(tailComps);\n    } else {\n      return Path.self;\n    }\n  }\n  get length(): number {\n    return this._components.length;\n  }\n  get lastComponent(): Path.Component | null {\n    let lastComponentIdx = this._components.length - 1;\n    if (lastComponentIdx >= 0) {\n      return this._components[lastComponentIdx];\n    } else {\n      return null;\n    }\n  }\n  get containsNamedComponent(): boolean {\n    for (let i = 0, l = this._components.length; i < l; i++) {\n      if (!this._components[i].isIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static get self(): Path {\n    let path = new Path();\n    path._isRelative = true;\n    return path;\n  }\n\n  public GetComponent(index: number): Path.Component {\n    return this._components[index];\n  }\n  public PathByAppendingPath(pathToAppend: Path): Path {\n    let p = new Path();\n\n    let upwardMoves = 0;\n    for (let i = 0; i < pathToAppend._components.length; ++i) {\n      if (pathToAppend._components[i].isParent) {\n        upwardMoves++;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = 0; i < this._components.length - upwardMoves; ++i) {\n      p._components.push(this._components[i]);\n    }\n\n    for (let i = upwardMoves; i < pathToAppend._components.length; ++i) {\n      p._components.push(pathToAppend._components[i]);\n    }\n\n    return p;\n  }\n  get componentsString(): string {\n    if (this._componentsString == null) {\n      this._componentsString = this._components.join(\".\");\n      if (this.isRelative)\n        this._componentsString = \".\" + this._componentsString;\n    }\n\n    return this._componentsString;\n  }\n  set componentsString(value: string) {\n    this._components.length = 0;\n\n    this._componentsString = value;\n\n    if (this._componentsString == null || this._componentsString == \"\") return;\n\n    if (this._componentsString[0] == \".\") {\n      this._isRelative = true;\n      this._componentsString = this._componentsString.substring(1);\n    }\n\n    let componentStrings = this._componentsString.split(\".\");\n    for (let str of componentStrings) {\n      // we need to distinguish between named components that start with a number, eg \"42somewhere\", and indexed components\n      // the normal parseInt won't do for the detection because it's too relaxed.\n      // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n      if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(str)) {\n        this._components.push(new Path.Component(parseInt(str)));\n      } else {\n        this._components.push(new Path.Component(str));\n      }\n    }\n  }\n  public toString(): string {\n    return this.componentsString;\n  }\n  public Equals(otherPath: Path | null): boolean {\n    if (otherPath == null) return false;\n\n    if (otherPath._components.length != this._components.length) return false;\n\n    if (otherPath.isRelative != this.isRelative) return false;\n\n    // the original code uses SequenceEqual here, so we need to iterate over the components manually.\n    for (let i = 0, l = otherPath._components.length; i < l; i++) {\n      // it's not quite clear whether this test should use Equals or a simple == operator,\n      // see https://github.com/y-lohse/inkjs/issues/22\n      if (!otherPath._components[i].Equals(this._components[i])) return false;\n    }\n\n    return true;\n  }\n  public PathByAppendingComponent(c: Path.Component): Path {\n    let p = new Path();\n    p._components.push(...this._components);\n    p._components.push(c);\n    return p;\n  }\n}\n\nexport namespace Path {\n  export class Component {\n    public readonly index: number;\n    public readonly name: string | null;\n\n    constructor(indexOrName: string | number) {\n      this.index = -1;\n      this.name = null;\n      if (typeof indexOrName == \"string\") {\n        this.name = indexOrName;\n      } else {\n        this.index = indexOrName;\n      }\n    }\n    get isIndex(): boolean {\n      return this.index >= 0;\n    }\n    get isParent(): boolean {\n      return this.name == Path.parentId;\n    }\n\n    public static ToParent(): Component {\n      return new Component(Path.parentId);\n    }\n    public toString(): string | null {\n      if (this.isIndex) {\n        return this.index.toString();\n      } else {\n        return this.name;\n      }\n    }\n    public Equals(otherComp: Component): boolean {\n      if (otherComp != null && otherComp.isIndex == this.isIndex) {\n        if (this.isIndex) {\n          return this.index == otherComp.index;\n        } else {\n          return this.name == otherComp.name;\n        }\n      }\n\n      return false;\n    }\n  }\n}\n","/**\n * In the original C# code, a SystemException would be thrown when passing\n * null to methods expected a valid instance. Javascript has no such\n * concept, but TypeScript will not allow `null` to be passed to methods\n * explicitely requiring a valid type.\n *\n * Whenever TypeScript complain about the possibility of a `null` value,\n * check the offending value and it it's null, throw this exception using\n * `throwNullException(name: string)`.\n */\nexport class NullException extends Error {}\n\n/**\n * Throw a NullException.\n *\n * @param name a short description of the offending value (often its name within the code).\n */\nexport function throwNullException(name: string): never {\n  throw new NullException(`${name} is null or undefined`);\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { Debug } from \"./Debug\";\nimport { asOrNull, asINamedContentOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SearchResult } from \"./SearchResult\";\nimport { DebugMetadata } from \"./DebugMetadata\";\n\nexport class InkObject {\n  public parent: InkObject | null = null;\n\n  get debugMetadata(): DebugMetadata | null {\n    if (this._debugMetadata === null) {\n      if (this.parent) {\n        return this.parent.debugMetadata;\n      }\n    }\n\n    return this._debugMetadata;\n  }\n\n  set debugMetadata(value) {\n    this._debugMetadata = value;\n  }\n\n  get ownDebugMetadata() {\n    return this._debugMetadata;\n  }\n\n  private _debugMetadata: DebugMetadata | null = null;\n\n  public DebugLineNumberOfPath(path: Path) {\n    if (path === null) return null;\n\n    // Try to get a line number from debug metadata\n    let root = this.rootContentContainer;\n    if (root) {\n      let targetContent = root.ContentAtPath(path).obj;\n      if (targetContent) {\n        let dm = targetContent.debugMetadata;\n        if (dm !== null) {\n          return dm.startLineNumber;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  get path() {\n    if (this._path == null) {\n      if (this.parent == null) {\n        this._path = new Path();\n      } else {\n        let comps: Path.Component[] = [];\n\n        let child: InkObject = this;\n        let container = asOrNull(child.parent, Container);\n\n        while (container !== null) {\n          let namedChild = asINamedContentOrNull(child);\n          if (namedChild != null && namedChild.hasValidName) {\n            if (namedChild.name === null)\n              return throwNullException(\"namedChild.name\");\n            comps.unshift(new Path.Component(namedChild.name!));\n          } else {\n            comps.unshift(new Path.Component(container.content.indexOf(child)));\n          }\n\n          child = container;\n          container = asOrNull(container.parent, Container);\n        }\n\n        this._path = new Path(comps);\n      }\n    }\n\n    return this._path;\n  }\n  private _path: Path | null = null;\n\n  public ResolvePath(path: Path | null): SearchResult {\n    if (path === null) return throwNullException(\"path\");\n    if (path.isRelative) {\n      let nearestContainer = asOrNull(this, Container);\n\n      if (nearestContainer === null) {\n        Debug.Assert(\n          this.parent !== null,\n          \"Can't resolve relative path because we don't have a parent\"\n        );\n        nearestContainer = asOrNull(this.parent, Container);\n        Debug.Assert(\n          nearestContainer !== null,\n          \"Expected parent to be a container\"\n        );\n        Debug.Assert(path.GetComponent(0).isParent);\n        path = path.tail;\n      }\n\n      if (nearestContainer === null) {\n        return throwNullException(\"nearestContainer\");\n      }\n      return nearestContainer.ContentAtPath(path);\n    } else {\n      let contentContainer = this.rootContentContainer;\n      if (contentContainer === null) {\n        return throwNullException(\"contentContainer\");\n      }\n      return contentContainer.ContentAtPath(path);\n    }\n  }\n\n  public ConvertPathToRelative(globalPath: Path) {\n    let ownPath = this.path;\n\n    let minPathLength = Math.min(globalPath.length, ownPath.length);\n    let lastSharedPathCompIndex = -1;\n\n    for (let i = 0; i < minPathLength; ++i) {\n      let ownComp = ownPath.GetComponent(i);\n      let otherComp = globalPath.GetComponent(i);\n\n      if (ownComp.Equals(otherComp)) {\n        lastSharedPathCompIndex = i;\n      } else {\n        break;\n      }\n    }\n\n    // No shared path components, so just use global path\n    if (lastSharedPathCompIndex == -1) return globalPath;\n\n    let numUpwardsMoves = ownPath.componentCount - 1 - lastSharedPathCompIndex;\n\n    let newPathComps: Path.Component[] = [];\n\n    for (let up = 0; up < numUpwardsMoves; ++up)\n      newPathComps.push(Path.Component.ToParent());\n\n    for (\n      let down = lastSharedPathCompIndex + 1;\n      down < globalPath.componentCount;\n      ++down\n    )\n      newPathComps.push(globalPath.GetComponent(down));\n\n    let relativePath = new Path(newPathComps, true);\n    return relativePath;\n  }\n\n  public CompactPathString(otherPath: Path) {\n    let globalPathStr = null;\n    let relativePathStr = null;\n\n    if (otherPath.isRelative) {\n      relativePathStr = otherPath.componentsString;\n      globalPathStr = this.path.PathByAppendingPath(otherPath).componentsString;\n    } else {\n      let relativePath = this.ConvertPathToRelative(otherPath);\n      relativePathStr = relativePath.componentsString;\n      globalPathStr = otherPath.componentsString;\n    }\n\n    if (relativePathStr.length < globalPathStr.length) return relativePathStr;\n    else return globalPathStr;\n  }\n\n  get rootContentContainer() {\n    let ancestor: InkObject = this;\n    while (ancestor.parent) {\n      ancestor = ancestor.parent;\n    }\n    return asOrNull(ancestor, Container);\n  }\n\n  public Copy(): InkObject {\n    throw Error(\"Not Implemented: Doesn't support copying\");\n  }\n  // SetChild works slightly diferently in the js implementation.\n  // Since we can't pass an objets property by reference, we instead pass\n  // the object and the property string.\n  // TODO: This method can probably be rewritten with type-safety in mind.\n  public SetChild(obj: any, prop: any, value: any) {\n    if (obj[prop]) obj[prop] = null;\n\n    obj[prop] = value;\n\n    if (obj[prop]) obj[prop].parent = this;\n  }\n\n  public Equals(obj: any) {\n    return obj === this;\n  }\n}\n","export class StringBuilder {\n  private string: string;\n\n  constructor(str?: string) {\n    str = typeof str !== \"undefined\" ? str.toString() : \"\";\n    this.string = str;\n  }\n  get Length(): number {\n    return this.string.length;\n  }\n  public Append(str: string | null) {\n    if (str !== null) {\n      this.string += str;\n    }\n  }\n  public AppendLine(str?: string) {\n    if (typeof str !== \"undefined\") this.Append(str);\n    this.string += \"\\n\";\n  }\n  public AppendFormat(format: string, ...args: any[]) {\n    // taken from http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\n    this.string += format.replace(/{(\\d+)}/g, (match: string, num: number) =>\n      typeof args[num] != \"undefined\" ? args[num] : match\n    );\n  }\n  public toString(): string {\n    return this.string;\n  }\n\n  public Clear() {\n    this.string = \"\";\n  }\n}\n","import { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Story } from \"./Story\";\n\nexport class InkListItem implements IInkListItem {\n  // InkListItem is a struct\n\n  public readonly originName: string | null = null;\n  public readonly itemName: string | null = null;\n\n  constructor(originName: string | null, itemName: string | null);\n  constructor(fullName: string | null);\n  constructor() {\n    if (typeof arguments[1] !== \"undefined\") {\n      let originName = arguments[0] as string | null;\n      let itemName = arguments[1] as string | null;\n\n      this.originName = originName;\n      this.itemName = itemName;\n    } else if (arguments[0]) {\n      let fullName = arguments[0] as string;\n\n      let nameParts = fullName.toString().split(\".\");\n      this.originName = nameParts[0];\n      this.itemName = nameParts[1];\n    }\n  }\n  public static get Null() {\n    return new InkListItem(null, null);\n  }\n  public get isNull() {\n    return this.originName == null && this.itemName == null;\n  }\n  get fullName() {\n    return (\n      (this.originName !== null ? this.originName : \"?\") + \".\" + this.itemName\n    );\n  }\n  public toString(): string {\n    return this.fullName;\n  }\n  public Equals(obj: InkListItem) {\n    if (obj instanceof InkListItem) {\n      let otherItem = obj;\n      return (\n        otherItem.itemName == this.itemName &&\n        otherItem.originName == this.originName\n      );\n    }\n\n    return false;\n  }\n\n  // These methods did not exist in the original C# code. Their purpose is to\n  // make `InkListItem` mimics the value-type semantics of the original\n  // struct. Please refer to the end of this file, for a more in-depth\n  // explanation.\n\n  /**\n   * Returns a shallow clone of the current instance.\n   */\n  public copy() {\n    return new InkListItem(this.originName, this.itemName);\n  }\n  /**\n   * Returns a `SerializedInkListItem` representing the current\n   * instance. The result is intended to be used as a key inside a Map.\n   */\n  public serialized(): SerializedInkListItem {\n    // We are simply using a JSON representation as a value-typed key.\n    return JSON.stringify({\n      originName: this.originName,\n      itemName: this.itemName,\n    });\n  }\n\n  /**\n   * Reconstructs a `InkListItem` from the given SerializedInkListItem.\n   */\n  public static fromSerializedKey(key: SerializedInkListItem): InkListItem {\n    let obj = JSON.parse(key);\n    if (!InkListItem.isLikeInkListItem(obj)) return InkListItem.Null;\n\n    let inkListItem = obj as IInkListItem;\n\n    return new InkListItem(inkListItem.originName, inkListItem.itemName);\n  }\n\n  /**\n   * Determines whether the given item is sufficiently `InkListItem`-like\n   * to be used as a template when reconstructing the InkListItem.\n   */\n  private static isLikeInkListItem(item: any) {\n    if (typeof item !== \"object\") return false;\n    if (!item.hasOwnProperty(\"originName\") || !item.hasOwnProperty(\"itemName\"))\n      return false;\n    if (typeof item.originName !== \"string\" && typeof item.originName !== null)\n      return false;\n    if (typeof item.itemName !== \"string\" && typeof item.itemName !== null)\n      return false;\n\n    return true;\n  }\n}\n\nexport class InkList extends Map<SerializedInkListItem, number> {\n  public origins: ListDefinition[] | null = null;\n  public _originNames: string[] | null = [];\n\n  constructor();\n  constructor(otherList: InkList);\n  constructor(singleOriginListName: string, originStory: Story);\n  constructor(singleElement: KeyValuePair<InkListItem, number>);\n  constructor() {\n    // Trying to be smart here, this emulates the constructor inheritance found\n    // in the original code, but only if otherList is an InkList. IIFE FTW.\n    super(\n      (() => {\n        if (arguments[0] instanceof InkList) {\n          return arguments[0];\n        } else {\n          return [];\n        }\n      })()\n    );\n\n    if (arguments[0] instanceof InkList) {\n      let otherList = arguments[0] as InkList;\n\n      let otherOriginNames = otherList.originNames as string[];\n      if (otherOriginNames !== null)\n        this._originNames = otherOriginNames.slice();\n      if (otherList.origins !== null) {\n        this.origins = otherList.origins.slice();\n      }\n    } else if (typeof arguments[0] === \"string\") {\n      let singleOriginListName = arguments[0] as string;\n      let originStory = arguments[1] as Story;\n      this.SetInitialOriginName(singleOriginListName);\n\n      if (originStory.listDefinitions === null) {\n        return throwNullException(\"originStory.listDefinitions\");\n      }\n      let def = originStory.listDefinitions.TryListGetDefinition(\n        singleOriginListName,\n        null\n      );\n      if (def.exists) {\n        // Throwing now, because if the value is `null` it will\n        // eventually throw down the line.\n        if (def.result === null) {\n          return throwNullException(\"def.result\");\n        }\n        this.origins = [def.result];\n      } else {\n        throw new Error(\n          \"InkList origin could not be found in story when constructing new list: \" +\n            singleOriginListName\n        );\n      }\n    } else if (\n      typeof arguments[0] === \"object\" &&\n      arguments[0].hasOwnProperty(\"Key\") &&\n      arguments[0].hasOwnProperty(\"Value\")\n    ) {\n      let singleElement = arguments[0] as KeyValuePair<InkListItem, number>;\n      this.Add(singleElement.Key, singleElement.Value);\n    }\n  }\n\n  public static FromString(myListItem: string, originStory: Story) {\n    let listValue =\n      originStory.listDefinitions?.FindSingleItemListWithName(myListItem);\n    if (listValue) {\n      if (listValue.value === null) {\n        return throwNullException(\"listValue.value\");\n      }\n      return new InkList(listValue.value);\n    } else {\n      throw new Error(\n        \"Could not find the InkListItem from the string '\" +\n          myListItem +\n          \"' to create an InkList because it doesn't exist in the original list definition in ink.\"\n      );\n    }\n  }\n\n  public AddItem(itemOrItemName: InkListItem | string | null) {\n    if (itemOrItemName instanceof InkListItem) {\n      let item = itemOrItemName;\n\n      if (item.originName == null) {\n        this.AddItem(item.itemName);\n        return;\n      }\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (origin.name == item.originName) {\n          let intVal = origin.TryGetValueForItem(item, 0);\n          if (intVal.exists) {\n            this.Add(item, intVal.result);\n            return;\n          } else {\n            throw new Error(\n              \"Could not add the item \" +\n                item +\n                \" to this list because it doesn't exist in the original list definition in ink.\"\n            );\n          }\n        }\n      }\n\n      throw new Error(\n        \"Failed to add item to list because the item was from a new list definition that wasn't previously known to this list. Only items from previously known lists can be used, so that the int value can be found.\"\n      );\n    } else {\n      let itemName = itemOrItemName as string | null;\n\n      let foundListDef: ListDefinition | null = null;\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (itemName === null) return throwNullException(\"itemName\");\n\n        if (origin.ContainsItemWithName(itemName)) {\n          if (foundListDef != null) {\n            throw new Error(\n              \"Could not add the item \" +\n                itemName +\n                \" to this list because it could come from either \" +\n                origin.name +\n                \" or \" +\n                foundListDef.name\n            );\n          } else {\n            foundListDef = origin;\n          }\n        }\n      }\n\n      if (foundListDef == null)\n        throw new Error(\n          \"Could not add the item \" +\n            itemName +\n            \" to this list because it isn't known to any list definitions previously associated with this list.\"\n        );\n\n      let item = new InkListItem(foundListDef.name, itemName);\n      let itemVal = foundListDef.ValueForItem(item);\n      this.Add(item, itemVal);\n    }\n  }\n  public ContainsItemNamed(itemName: string | null) {\n    for (let [key] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (item.itemName == itemName) return true;\n    }\n\n    return false;\n  }\n  public ContainsKey(key: InkListItem) {\n    return this.has(key.serialized());\n  }\n  public Add(key: InkListItem, value: number) {\n    let serializedKey = key.serialized();\n    if (this.has(serializedKey)) {\n      // Throw an exception to match the C# behavior.\n      throw new Error(`The Map already contains an entry for ${key}`);\n    }\n    this.set(serializedKey, value);\n  }\n  public Remove(key: InkListItem) {\n    return this.delete(key.serialized());\n  }\n  get Count() {\n    return this.size;\n  }\n  get originOfMaxItem(): ListDefinition | null {\n    if (this.origins == null) return null;\n\n    let maxOriginName = this.maxItem.Key.originName;\n    let result = null;\n    this.origins.every((origin) => {\n      if (origin.name == maxOriginName) {\n        result = origin;\n        return false;\n      } else return true;\n    });\n\n    return result;\n  }\n  get originNames(): string[] {\n    if (this.Count > 0) {\n      if (this._originNames == null && this.Count > 0) this._originNames = [];\n      else {\n        if (!this._originNames) this._originNames = [];\n        this._originNames.length = 0;\n      }\n\n      for (let [key] of this) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.originName === null)\n          return throwNullException(\"item.originName\");\n        this._originNames.push(item.originName);\n      }\n    }\n\n    return this._originNames as string[];\n  }\n  public SetInitialOriginName(initialOriginName: string) {\n    this._originNames = [initialOriginName];\n  }\n  public SetInitialOriginNames(initialOriginNames: string[]) {\n    if (initialOriginNames == null) this._originNames = null;\n    else this._originNames = initialOriginNames.slice(); // store a copy\n  }\n  get maxItem() {\n    let max: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (max.Key.isNull || value > max.Value)\n        max = { Key: item, Value: value };\n    }\n\n    return max;\n  }\n  get minItem() {\n    let min: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (min.Key.isNull || value < min.Value) {\n        min = { Key: item, Value: value };\n      }\n    }\n    return min;\n  }\n  get inverse() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          if (!this.ContainsKey(item)) list.Add(item, value);\n        }\n      }\n    }\n    return list;\n  }\n  get all() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          list.set(item.serialized(), value);\n        }\n      }\n    }\n    return list;\n  }\n  public Union(otherList: InkList) {\n    let union = new InkList(this);\n    for (let [key, value] of otherList) {\n      union.set(key, value);\n    }\n    return union;\n  }\n  public Intersect(otherList: InkList) {\n    let intersection = new InkList();\n    for (let [key, value] of this) {\n      if (otherList.has(key)) intersection.set(key, value);\n    }\n\n    return intersection;\n  }\n  public HasIntersection(otherList: InkList): boolean {\n    for (let [key] of this) {\n      if (otherList.has(key)) return true;\n    }\n    return false;\n  }\n  public Without(listToRemove: InkList) {\n    let result = new InkList(this);\n    for (let [key] of listToRemove) {\n      result.delete(key);\n    }\n\n    return result;\n  }\n\n  public Contains(key: string): boolean;\n  public Contains(otherList: InkList): boolean;\n  public Contains(what: string | InkList): boolean {\n    if (typeof what == \"string\") return this.ContainsItemNamed(what);\n    const otherList = what;\n    if (otherList.size == 0 || this.size == 0) return false;\n    for (let [key] of otherList) {\n      if (!this.has(key)) return false;\n    }\n\n    return true;\n  }\n  public GreaterThan(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return this.minItem.Value > otherList.maxItem.Value;\n  }\n  public GreaterThanOrEquals(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return (\n      this.minItem.Value >= otherList.minItem.Value &&\n      this.maxItem.Value >= otherList.maxItem.Value\n    );\n  }\n  public LessThan(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return this.maxItem.Value < otherList.minItem.Value;\n  }\n  public LessThanOrEquals(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return (\n      this.maxItem.Value <= otherList.maxItem.Value &&\n      this.minItem.Value <= otherList.minItem.Value\n    );\n  }\n  public MaxAsList() {\n    if (this.Count > 0) return new InkList(this.maxItem);\n    else return new InkList();\n  }\n  public MinAsList() {\n    if (this.Count > 0) return new InkList(this.minItem);\n    else return new InkList();\n  }\n  public ListWithSubRange(minBound: any, maxBound: any) {\n    if (this.Count == 0) return new InkList();\n\n    let ordered = this.orderedItems;\n\n    let minValue = 0;\n    let maxValue = Number.MAX_SAFE_INTEGER;\n\n    if (Number.isInteger(minBound)) {\n      minValue = minBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        minValue = minBound.minItem.Value;\n    }\n\n    if (Number.isInteger(maxBound)) {\n      maxValue = maxBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        maxValue = maxBound.maxItem.Value;\n    }\n\n    let subList = new InkList();\n    subList.SetInitialOriginNames(this.originNames);\n    for (let item of ordered) {\n      if (item.Value >= minValue && item.Value <= maxValue) {\n        subList.Add(item.Key, item.Value);\n      }\n    }\n\n    return subList;\n  }\n  public Equals(otherInkList: InkList) {\n    if (otherInkList instanceof InkList === false) return false;\n    if (otherInkList.Count != this.Count) return false;\n\n    for (let [key] of this) {\n      if (!otherInkList.has(key)) return false;\n    }\n\n    return true;\n  }\n  // GetHashCode not implemented\n  get orderedItems() {\n    // List<KeyValuePair<InkListItem, int>>\n    let ordered = new Array<KeyValuePair<InkListItem, number>>();\n\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      ordered.push({ Key: item, Value: value });\n    }\n\n    ordered.sort((x, y) => {\n      if (x.Key.originName === null) {\n        return throwNullException(\"x.Key.originName\");\n      }\n      if (y.Key.originName === null) {\n        return throwNullException(\"y.Key.originName\");\n      }\n\n      if (x.Value == y.Value) {\n        return x.Key.originName.localeCompare(y.Key.originName);\n      } else {\n        // TODO: refactor this bit into a numberCompareTo method?\n        if (x.Value < y.Value) return -1;\n        return x.Value > y.Value ? 1 : 0;\n      }\n    });\n\n    return ordered;\n  }\n  public toString() {\n    let ordered = this.orderedItems;\n\n    let sb = new StringBuilder();\n    for (let i = 0; i < ordered.length; i++) {\n      if (i > 0) sb.Append(\", \");\n\n      let item = ordered[i].Key;\n      if (item.itemName === null) return throwNullException(\"item.itemName\");\n      sb.Append(item.itemName);\n    }\n\n    return sb.toString();\n  }\n  // casting a InkList to a Number, for somereason, actually gives a number.\n  // This messes up the type detection when creating a Value from a InkList.\n  // Returning NaN here prevents that.\n  public valueOf() {\n    return NaN;\n  }\n}\n\n/**\n * In the original C# code, `InkListItem` was defined as value type, meaning\n * that two `InkListItem` would be considered equal as long as they held the\n * same values. This doesn't hold true in Javascript, as `InkListItem` is a\n * reference type (Javascript doesn't allow the creation of custom value types).\n *\n * The key equality of Map objects is based on the \"SameValueZero\" algorithm;\n * since `InkListItem` is a value type, two keys will only be considered\n * equal if they are, in fact, the same object. As we are trying to emulate\n * the original behavior as close as possible, this will lead to unforeseen\n * side effects.\n *\n * In order to have a key equality based on value semantics, we'll convert\n * `InkListItem` to a valid string representation and use this representation\n * as a key (strings are value types in Javascript). Rather than using the\n * type `string` directly, we'll alias it to `SerializedInkListItem` and use\n * this type as the key for our Map-based `InkList`.\n *\n * Reducing `InkListItem` to a JSON representation would not be bulletproof\n * in the general case, but for our needs it works well. The major downside of\n * this method is that we will have to to reconstruct the original `InkListItem`\n * every time we'll need to access its properties.\n */\nexport type SerializedInkListItem = string;\n\n/**\n * An interface inherited by `InkListItem`, defining exposed\n * properties. It's mainly used when deserializing a `InkListItem` from its\n * key (`SerializedInkListItem`)\n */\ninterface IInkListItem {\n  readonly originName: string | null;\n  readonly itemName: string | null;\n}\nexport interface KeyValuePair<K, V> {\n  Key: K;\n  Value: V;\n}\n","export class StoryException extends Error {\n  public useEndLineNumber: boolean;\n  public message: string;\n  public name: string;\n\n  constructor(message: string) {\n    super(message);\n    this.useEndLineNumber = false;\n    this.message = message;\n    this.name = \"StoryException\";\n  }\n}\n","/**\n * This interface normalize the `TryGet` behavior found in the original\n * C# project. Any `TryGet` method will return a object conforming to this\n * interface.\n *\n * The original function returns a boolean and has a second parameter called\n * item that is an `out`. Both are needed and we can't just return the item\n * because it'll always be truthy. Instead, we return an object containing\n * whether the result exists (`exists`) and the result itself (`result`).\n *\n * For instance a `TryGet` prototype would look like this:\n```\nTryGetItemWithValue(val: number, item: InkListItem): TryGetResult<InkListItem>{\n```\n *\n * On the other hand, dealing with the result can be done in the following way:\n```\nvar item = item.TryGetItemWithValue(intVal, InkListItem.Null);\nif (item.exists) {\n\tconsole.log(item.result)\n}\n```\n *\n */\nexport interface TryGetResult<T> {\n  result: T;\n  exists: boolean;\n}\n\nexport function tryGetValueFromMap<K, V>(\n  map: Map<K, V> | null,\n  key: K,\n  /* out */ value: V\n): TryGetResult<V> {\n  if (map === null) {\n    return { result: value, exists: false };\n  }\n\n  let val = map.get(key);\n\n  if (typeof val === \"undefined\") {\n    return { result: value, exists: false };\n  } else {\n    return { result: val, exists: true };\n  }\n}\n\nexport function tryParseInt(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseInt(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n\nexport function tryParseFloat(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseFloat(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class SearchResult {\n  public obj: InkObject | null = null;\n  public approximate: boolean = false;\n\n  get correctObj() {\n    return this.approximate ? null : this.obj;\n  }\n\n  get container() {\n    return this.obj instanceof Container ? this.obj : null;\n  }\n\n  public copy() {\n    let searchResult = new SearchResult();\n    searchResult.obj = this.obj;\n    searchResult.approximate = this.approximate;\n\n    return searchResult;\n  }\n}\n","import { StringValue } from \"./Value\";\nimport { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { INamedContent } from \"./INamedContent\";\nimport { InkObject } from \"./Object\";\nimport { SearchResult } from \"./SearchResult\";\nimport { Path } from \"./Path\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { asINamedContentOrNull, asOrNull, asOrThrows } from \"./TypeAssertion\";\n\nexport class Container extends InkObject implements INamedContent {\n  public name: string | null = null;\n\n  public _content: InkObject[] = [];\n  public namedContent: Map<string, INamedContent> = new Map();\n\n  public visitsShouldBeCounted: boolean = false;\n  public turnIndexShouldBeCounted: boolean = false;\n  public countingAtStartOnly: boolean = false;\n\n  public _pathToFirstLeafContent: Path | null = null;\n\n  get hasValidName() {\n    return this.name != null && this.name.length > 0;\n  }\n  get content() {\n    return this._content;\n  }\n  set content(value: InkObject[]) {\n    this.AddContent(value);\n  }\n  get namedOnlyContent() {\n    let namedOnlyContentDict: Map<string, InkObject> | null = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      let inkObject = asOrThrows(value, InkObject);\n      namedOnlyContentDict.set(key, inkObject);\n    }\n\n    for (let c of this.content) {\n      let named = asINamedContentOrNull(c);\n      if (named != null && named.hasValidName) {\n        namedOnlyContentDict.delete(named.name!);\n      }\n    }\n\n    if (namedOnlyContentDict.size == 0) namedOnlyContentDict = null;\n\n    return namedOnlyContentDict;\n  }\n  set namedOnlyContent(value: Map<string, InkObject> | null) {\n    let existingNamedOnly = this.namedOnlyContent;\n    if (existingNamedOnly != null) {\n      for (let [key] of existingNamedOnly) {\n        this.namedContent.delete(key);\n      }\n    }\n\n    if (value == null) return;\n\n    for (let [, val] of value) {\n      let named = asINamedContentOrNull(val);\n      if (named != null) this.AddToNamedContentOnly(named);\n    }\n  }\n  get countFlags(): number {\n    let flags: Container.CountFlags = 0;\n    if (this.visitsShouldBeCounted) flags |= Container.CountFlags.Visits;\n    if (this.turnIndexShouldBeCounted) flags |= Container.CountFlags.Turns;\n    if (this.countingAtStartOnly) flags |= Container.CountFlags.CountStartOnly;\n\n    if (flags == Container.CountFlags.CountStartOnly) {\n      flags = 0;\n    }\n\n    return flags;\n  }\n  set countFlags(value: number) {\n    let flag: Container.CountFlags = value;\n    if ((flag & Container.CountFlags.Visits) > 0)\n      this.visitsShouldBeCounted = true;\n    if ((flag & Container.CountFlags.Turns) > 0)\n      this.turnIndexShouldBeCounted = true;\n    if ((flag & Container.CountFlags.CountStartOnly) > 0)\n      this.countingAtStartOnly = true;\n  }\n  get pathToFirstLeafContent() {\n    if (this._pathToFirstLeafContent == null)\n      this._pathToFirstLeafContent = this.path.PathByAppendingPath(\n        this.internalPathToFirstLeafContent\n      );\n\n    return this._pathToFirstLeafContent;\n  }\n  get internalPathToFirstLeafContent() {\n    let components: Path.Component[] = [];\n    let container: Container = this;\n    while (container instanceof Container) {\n      if (container.content.length > 0) {\n        components.push(new Path.Component(0));\n        container = container.content[0] as Container;\n      }\n    }\n    return new Path(components);\n  }\n\n  public AddContent(contentObjOrList: InkObject | InkObject[]) {\n    if (contentObjOrList instanceof Array) {\n      let contentList = contentObjOrList as InkObject[];\n\n      for (let c of contentList) {\n        this.AddContent(c);\n      }\n    } else {\n      let contentObj = contentObjOrList as InkObject;\n\n      this._content.push(contentObj);\n\n      if (contentObj.parent) {\n        throw new Error(\"content is already in \" + contentObj.parent);\n      }\n\n      contentObj.parent = this;\n\n      this.TryAddNamedContent(contentObj);\n    }\n  }\n  public TryAddNamedContent(contentObj: InkObject) {\n    let namedContentObj = asINamedContentOrNull(contentObj);\n    if (namedContentObj != null && namedContentObj.hasValidName) {\n      this.AddToNamedContentOnly(namedContentObj);\n    }\n  }\n  public AddToNamedContentOnly(namedContentObj: INamedContent) {\n    Debug.AssertType(\n      namedContentObj,\n      InkObject,\n      \"Can only add Runtime.Objects to a Runtime.Container\"\n    );\n    let runtimeObj = asOrThrows(namedContentObj, InkObject);\n    runtimeObj.parent = this;\n\n    if (namedContentObj.name === null)\n      return throwNullException(\"namedContentObj.name\");\n    this.namedContent.set(namedContentObj.name!, namedContentObj);\n  }\n  public ContentAtPath(\n    path: Path,\n    partialPathStart: number = 0,\n    partialPathLength: number = -1\n  ) {\n    if (partialPathLength == -1) partialPathLength = path.length;\n\n    let result = new SearchResult();\n    result.approximate = false;\n\n    let currentContainer: Container | null = this;\n    let currentObj: InkObject = this;\n\n    for (let i = partialPathStart; i < partialPathLength; ++i) {\n      let comp = path.GetComponent(i);\n      if (currentContainer == null) {\n        result.approximate = true;\n        break;\n      }\n\n      let foundObj: InkObject | null =\n        currentContainer.ContentWithPathComponent(comp);\n\n      if (foundObj == null) {\n        result.approximate = true;\n        break;\n      }\n\n      currentObj = foundObj;\n      currentContainer = asOrNull(foundObj, Container);\n    }\n\n    result.obj = currentObj;\n\n    return result;\n  }\n  public InsertContent(contentObj: InkObject, index: number) {\n    this.content.splice(index, 0, contentObj);\n\n    if (contentObj.parent) {\n      throw new Error(\"content is already in \" + contentObj.parent);\n    }\n\n    contentObj.parent = this;\n\n    this.TryAddNamedContent(contentObj);\n  }\n  public AddContentsOfContainer(otherContainer: Container) {\n    this.content.push(...otherContainer.content);\n\n    for (let obj of otherContainer.content) {\n      obj.parent = this;\n      this.TryAddNamedContent(obj);\n    }\n  }\n  public ContentWithPathComponent(component: Path.Component): InkObject | null {\n    if (component.isIndex) {\n      if (component.index >= 0 && component.index < this.content.length) {\n        return this.content[component.index];\n      } else {\n        return null;\n      }\n    } else if (component.isParent) {\n      return this.parent;\n    } else {\n      if (component.name === null) {\n        return throwNullException(\"component.name\");\n      }\n      let foundContent = tryGetValueFromMap(\n        this.namedContent,\n        component.name,\n        null\n      );\n      if (foundContent.exists) {\n        return asOrThrows(foundContent.result, InkObject);\n      } else {\n        return null;\n      }\n    }\n  }\n  public BuildStringOfHierarchy(): string;\n  public BuildStringOfHierarchy(\n    sb: StringBuilder,\n    indentation: number,\n    pointedObj: InkObject | null\n  ): string;\n  public BuildStringOfHierarchy() {\n    let sb: StringBuilder;\n    if (arguments.length == 0) {\n      sb = new StringBuilder();\n      this.BuildStringOfHierarchy(sb, 0, null);\n      return sb.toString();\n    }\n\n    sb = arguments[0] as StringBuilder;\n    let indentation = arguments[1] as number;\n    let pointedObj = arguments[2] as InkObject | null;\n\n    function appendIndentation() {\n      const spacesPerIndent = 4; // Truly const in the original code\n      for (let i = 0; i < spacesPerIndent * indentation; ++i) {\n        sb.Append(\" \");\n      }\n    }\n\n    appendIndentation();\n    sb.Append(\"[\");\n\n    if (this.hasValidName) {\n      sb.AppendFormat(\" ({0})\", this.name);\n    }\n\n    if (this == pointedObj) {\n      sb.Append(\"  <---\");\n    }\n\n    sb.AppendLine();\n\n    indentation++;\n\n    for (let i = 0; i < this.content.length; ++i) {\n      let obj = this.content[i];\n\n      if (obj instanceof Container) {\n        let container = obj as Container;\n\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n      } else {\n        appendIndentation();\n        if (obj instanceof StringValue) {\n          sb.Append('\"');\n          sb.Append(obj.toString().replace(\"\\n\", \"\\\\n\"));\n          sb.Append('\"');\n        } else {\n          sb.Append(obj.toString());\n        }\n      }\n\n      if (i != this.content.length - 1) {\n        sb.Append(\",\");\n      }\n\n      if (!(obj instanceof Container) && obj == pointedObj) {\n        sb.Append(\"  <---\");\n      }\n\n      sb.AppendLine();\n    }\n\n    let onlyNamed: Map<string, INamedContent> = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      if (this.content.indexOf(asOrThrows(value, InkObject)) >= 0) {\n        continue;\n      } else {\n        onlyNamed.set(key, value);\n      }\n    }\n\n    if (onlyNamed.size > 0) {\n      appendIndentation();\n      sb.AppendLine(\"-- named: --\");\n\n      for (let [, value] of onlyNamed) {\n        Debug.AssertType(\n          value,\n          Container,\n          \"Can only print out named Containers\"\n        );\n        let container = value as Container;\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n        sb.AppendLine();\n      }\n    }\n\n    indentation--;\n\n    appendIndentation();\n    sb.Append(\"]\");\n  }\n}\n\nexport namespace Container {\n  export enum CountFlags {\n    Visits = 1,\n    Turns = 2,\n    CountStartOnly = 4,\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class ControlCommand extends InkObject {\n  private _commandType: ControlCommand.CommandType;\n\n  get commandType(): ControlCommand.CommandType {\n    return this._commandType;\n  }\n\n  constructor(\n    commandType: ControlCommand.CommandType = ControlCommand.CommandType.NotSet\n  ) {\n    super();\n    this._commandType = commandType;\n  }\n\n  public Copy() {\n    return new ControlCommand(this.commandType);\n  }\n  public static EvalStart() {\n    return new ControlCommand(ControlCommand.CommandType.EvalStart);\n  }\n  public static EvalOutput() {\n    return new ControlCommand(ControlCommand.CommandType.EvalOutput);\n  }\n  public static EvalEnd() {\n    return new ControlCommand(ControlCommand.CommandType.EvalEnd);\n  }\n  public static Duplicate() {\n    return new ControlCommand(ControlCommand.CommandType.Duplicate);\n  }\n  public static PopEvaluatedValue() {\n    return new ControlCommand(ControlCommand.CommandType.PopEvaluatedValue);\n  }\n  public static PopFunction() {\n    return new ControlCommand(ControlCommand.CommandType.PopFunction);\n  }\n  public static PopTunnel() {\n    return new ControlCommand(ControlCommand.CommandType.PopTunnel);\n  }\n  public static BeginString() {\n    return new ControlCommand(ControlCommand.CommandType.BeginString);\n  }\n  public static EndString() {\n    return new ControlCommand(ControlCommand.CommandType.EndString);\n  }\n  public static NoOp() {\n    return new ControlCommand(ControlCommand.CommandType.NoOp);\n  }\n  public static ChoiceCount() {\n    return new ControlCommand(ControlCommand.CommandType.ChoiceCount);\n  }\n  public static Turns() {\n    return new ControlCommand(ControlCommand.CommandType.Turns);\n  }\n  public static TurnsSince() {\n    return new ControlCommand(ControlCommand.CommandType.TurnsSince);\n  }\n  public static ReadCount() {\n    return new ControlCommand(ControlCommand.CommandType.ReadCount);\n  }\n  public static Random() {\n    return new ControlCommand(ControlCommand.CommandType.Random);\n  }\n  public static SeedRandom() {\n    return new ControlCommand(ControlCommand.CommandType.SeedRandom);\n  }\n  public static VisitIndex() {\n    return new ControlCommand(ControlCommand.CommandType.VisitIndex);\n  }\n  public static SequenceShuffleIndex() {\n    return new ControlCommand(ControlCommand.CommandType.SequenceShuffleIndex);\n  }\n  public static StartThread() {\n    return new ControlCommand(ControlCommand.CommandType.StartThread);\n  }\n  public static Done() {\n    return new ControlCommand(ControlCommand.CommandType.Done);\n  }\n  public static End() {\n    return new ControlCommand(ControlCommand.CommandType.End);\n  }\n  public static ListFromInt() {\n    return new ControlCommand(ControlCommand.CommandType.ListFromInt);\n  }\n  public static ListRange() {\n    return new ControlCommand(ControlCommand.CommandType.ListRange);\n  }\n  public static ListRandom() {\n    return new ControlCommand(ControlCommand.CommandType.ListRandom);\n  }\n  public static BeginTag() {\n    return new ControlCommand(ControlCommand.CommandType.BeginTag);\n  }\n  public static EndTag() {\n    return new ControlCommand(ControlCommand.CommandType.EndTag);\n  }\n  public toString() {\n    return this.commandType.toString();\n  }\n}\n\nexport namespace ControlCommand {\n  export enum CommandType {\n    NotSet = -1,\n    EvalStart, // 0\n    EvalOutput, // 1\n    EvalEnd, // 2\n    Duplicate, // 3\n    PopEvaluatedValue, // 4\n    PopFunction, // 5\n    PopTunnel, // 6\n    BeginString, // 7\n    EndString, // 8\n    NoOp, // 9\n    ChoiceCount, // 10\n    Turns, // 11\n    TurnsSince, // 12\n    ReadCount, // 13\n    Random, // 14\n    SeedRandom, // 15\n    VisitIndex, // 16\n    SequenceShuffleIndex, // 17\n    StartThread, // 18\n    Done, // 19\n    End, // 20\n    ListFromInt, // 21\n    ListRange, // 22\n    ListRandom, // 23\n    BeginTag, // 24\n    EndTag, // 25\n\n    TOTAL_VALUES,\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\n\nexport abstract class Expression extends ParsedObject {\n  public abstract GenerateIntoContainer: (container: RuntimeContainer) => void;\n\n  private _prototypeRuntimeConstantExpression: RuntimeContainer | null = null;\n  public outputWhenComplete: boolean = false;\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n\n    // Tell Runtime to start evaluating the following content as an expression\n    container.AddContent(RuntimeControlCommand.EvalStart());\n\n    this.GenerateIntoContainer(container);\n\n    // Tell Runtime to output the result of the expression evaluation to the output stream\n    if (this.outputWhenComplete) {\n      container.AddContent(RuntimeControlCommand.EvalOutput());\n    }\n\n    // Tell Runtime to stop evaluating the content as an expression\n    container.AddContent(RuntimeControlCommand.EvalEnd());\n\n    return container;\n  };\n\n  // When generating the value of a constant expression,\n  // we can't just keep generating the same constant expression into\n  // different places where the constant value is referenced, since then\n  // the same runtime objects would be used in multiple places, which\n  // is impossible since each runtime object should have one parent.\n  // Instead, we generate a prototype of the runtime object(s), then\n  // copy them each time they're used.\n  public readonly GenerateConstantIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    if (this._prototypeRuntimeConstantExpression === null) {\n      this._prototypeRuntimeConstantExpression = new RuntimeContainer();\n      this.GenerateIntoContainer(this._prototypeRuntimeConstantExpression);\n    }\n\n    for (const runtimeObj of this._prototypeRuntimeConstantExpression.content) {\n      const copy = runtimeObj.Copy();\n      if (copy) {\n        container.AddContent(copy);\n      }\n    }\n  };\n\n  get typeName(): string {\n    return \"Expression\";\n  }\n\n  public Equals(obj: ParsedObject): boolean {\n    return false;\n  }\n\n  public readonly toString = () => \"No string value in JavaScript.\";\n}\n","import { InkObject } from \"./Object\";\n\nexport class Void extends InkObject {}\n","import { Value, ValueType, IntValue, ListValue, BoolValue } from \"./Value\";\nimport { StoryException } from \"./StoryException\";\nimport { Void } from \"./Void\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull, asOrThrows, asBooleanOrThrows } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\n\ntype BinaryOp<T> = (left: T, right: T) => any;\ntype UnaryOp<T> = (val: T) => any;\n\nexport class NativeFunctionCall extends InkObject {\n  public static readonly Add: string = \"+\";\n  public static readonly Subtract: string = \"-\";\n  public static readonly Divide: string = \"/\";\n  public static readonly Multiply: string = \"*\";\n  public static readonly Mod: string = \"%\";\n  public static readonly Negate: string = \"_\";\n  public static readonly Equal: string = \"==\";\n  public static readonly Greater: string = \">\";\n  public static readonly Less: string = \"<\";\n  public static readonly GreaterThanOrEquals: string = \">=\";\n  public static readonly LessThanOrEquals: string = \"<=\";\n  public static readonly NotEquals: string = \"!=\";\n  public static readonly Not: string = \"!\";\n  public static readonly And: string = \"&&\";\n  public static readonly Or: string = \"||\";\n  public static readonly Min: string = \"MIN\";\n  public static readonly Max: string = \"MAX\";\n  public static readonly Pow: string = \"POW\";\n  public static readonly Floor: string = \"FLOOR\";\n  public static readonly Ceiling: string = \"CEILING\";\n  public static readonly Int: string = \"INT\";\n  public static readonly Float: string = \"FLOAT\";\n  public static readonly Has: string = \"?\";\n  public static readonly Hasnt: string = \"!?\";\n  public static readonly Intersect: string = \"^\";\n  public static readonly ListMin: string = \"LIST_MIN\";\n  public static readonly ListMax: string = \"LIST_MAX\";\n  public static readonly All: string = \"LIST_ALL\";\n  public static readonly Count: string = \"LIST_COUNT\";\n  public static readonly ValueOfList: string = \"LIST_VALUE\";\n  public static readonly Invert: string = \"LIST_INVERT\";\n\n  public static CallWithName(functionName: string) {\n    return new NativeFunctionCall(functionName);\n  }\n\n  public static CallExistsWithName(functionName: string) {\n    this.GenerateNativeFunctionsIfNecessary();\n    return this._nativeFunctions!.get(functionName);\n  }\n\n  get name() {\n    if (this._name === null)\n      return throwNullException(\"NativeFunctionCall._name\");\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n    if (!this._isPrototype) {\n      if (NativeFunctionCall._nativeFunctions === null)\n        throwNullException(\"NativeFunctionCall._nativeFunctions\");\n      else\n        this._prototype =\n          NativeFunctionCall._nativeFunctions.get(this._name) || null;\n    }\n  }\n  public _name: string | null = null;\n\n  get numberOfParameters() {\n    if (this._prototype) {\n      return this._prototype.numberOfParameters;\n    } else {\n      return this._numberOfParameters;\n    }\n  }\n  set numberOfParameters(value: number) {\n    this._numberOfParameters = value;\n  }\n  public _numberOfParameters: number = 0;\n\n  public Call(parameters: InkObject[]): InkObject | null {\n    if (this._prototype) {\n      return this._prototype.Call(parameters);\n    }\n\n    if (this.numberOfParameters != parameters.length) {\n      throw new Error(\"Unexpected number of parameters\");\n    }\n\n    let hasList = false;\n    for (let p of parameters) {\n      if (p instanceof Void)\n        throw new StoryException(\n          'Attempting to perform operation on a void value. Did you forget to \"return\" a value from a function you called here?'\n        );\n      if (p instanceof ListValue) hasList = true;\n    }\n\n    if (parameters.length == 2 && hasList) {\n      return this.CallBinaryListOperation(parameters);\n    }\n\n    let coercedParams = this.CoerceValuesToSingleType(parameters);\n    let coercedType = coercedParams[0].valueType;\n\n    if (coercedType == ValueType.Int) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.Float) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.String) {\n      return this.CallType<string>(coercedParams);\n    } else if (coercedType == ValueType.DivertTarget) {\n      return this.CallType<Path>(coercedParams);\n    } else if (coercedType == ValueType.List) {\n      return this.CallType<InkList>(coercedParams);\n    }\n\n    return null;\n  }\n\n  public CallType<T>(parametersOfSingleType: Array<Value<T>>) {\n    let param1 = asOrThrows(parametersOfSingleType[0], Value);\n    let valType = param1.valueType;\n\n    let val1 = param1 as Value<T>;\n\n    let paramCount = parametersOfSingleType.length;\n\n    if (paramCount == 2 || paramCount == 1) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let opForTypeObj = this._operationFuncs.get(valType);\n      if (!opForTypeObj) {\n        const key = ValueType[valType];\n        throw new StoryException(\n          \"Cannot perform operation \" + this.name + \" on \" + key\n        );\n      }\n\n      if (paramCount == 2) {\n        let param2 = asOrThrows(parametersOfSingleType[1], Value);\n\n        let val2 = param2 as Value<T>;\n\n        let opForType = opForTypeObj as BinaryOp<T>;\n\n        if (val1.value === null || val2.value === null)\n          return throwNullException(\"NativeFunctionCall.Call BinaryOp values\");\n        let resultVal = opForType(val1.value, val2.value);\n\n        return Value.Create(resultVal);\n      } else {\n        let opForType = opForTypeObj as UnaryOp<T>;\n\n        if (val1.value === null)\n          return throwNullException(\"NativeFunctionCall.Call UnaryOp value\");\n        let resultVal = opForType(val1.value);\n\n        // This code is different from upstream. Since JavaScript treats\n        // integers and floats as the same numbers, it's impossible\n        // to force an number to be either an integer or a float.\n        //\n        // It can be useful to force a specific number type\n        // (especially for divisions), so the result of INT() & FLOAT()\n        // is coerced to the the proper value type.\n        //\n        // Note that we also force all other unary operation to\n        // return the same value type, although this is only\n        // meaningful for numbers. See `Value.Create`.\n        if (this.name === NativeFunctionCall.Int) {\n          return Value.Create(resultVal, ValueType.Int);\n        } else if (this.name === NativeFunctionCall.Float) {\n          return Value.Create(resultVal, ValueType.Float);\n        } else {\n          return Value.Create(resultVal, param1.valueType);\n        }\n      }\n    } else {\n      throw new Error(\n        \"Unexpected number of parameters to NativeFunctionCall: \" +\n          parametersOfSingleType.length\n      );\n    }\n  }\n\n  public CallBinaryListOperation(parameters: InkObject[]) {\n    if (\n      (this.name == \"+\" || this.name == \"-\") &&\n      parameters[0] instanceof ListValue &&\n      parameters[1] instanceof IntValue\n    )\n      return this.CallListIncrementOperation(parameters);\n\n    let v1 = asOrThrows(parameters[0], Value);\n    let v2 = asOrThrows(parameters[1], Value);\n\n    if (\n      (this.name == \"&&\" || this.name == \"||\") &&\n      (v1.valueType != ValueType.List || v2.valueType != ValueType.List)\n    ) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let op = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n      if (op === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallBinaryListOperation op\"\n        );\n      let result = asBooleanOrThrows(\n        op(v1.isTruthy ? 1 : 0, v2.isTruthy ? 1 : 0)\n      );\n      return new BoolValue(result);\n    }\n\n    if (v1.valueType == ValueType.List && v2.valueType == ValueType.List)\n      return this.CallType<InkList>([v1, v2]);\n\n    throw new StoryException(\n      \"Can not call use \" +\n        this.name +\n        \" operation on \" +\n        ValueType[v1.valueType] +\n        \" and \" +\n        ValueType[v2.valueType]\n    );\n  }\n\n  public CallListIncrementOperation(listIntParams: InkObject[]) {\n    let listVal = asOrThrows(listIntParams[0], ListValue);\n    let intVal = asOrThrows(listIntParams[1], IntValue);\n\n    let resultInkList = new InkList();\n\n    if (listVal.value === null)\n      return throwNullException(\n        \"NativeFunctionCall.CallListIncrementOperation listVal.value\"\n      );\n    for (let [listItemKey, listItemValue] of listVal.value) {\n      let listItem = InkListItem.fromSerializedKey(listItemKey);\n\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let intOp = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n\n      if (intVal.value === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation intVal.value\"\n        );\n      let targetInt = intOp(listItemValue, intVal.value);\n\n      let itemOrigin = null;\n      if (listVal.value.origins === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation listVal.value.origins\"\n        );\n      for (let origin of listVal.value.origins) {\n        if (origin.name == listItem.originName) {\n          itemOrigin = origin;\n          break;\n        }\n      }\n      if (itemOrigin != null) {\n        let incrementedItem = itemOrigin.TryGetItemWithValue(\n          targetInt,\n          InkListItem.Null\n        );\n        if (incrementedItem.exists)\n          resultInkList.Add(incrementedItem.result, targetInt);\n      }\n    }\n\n    return new ListValue(resultInkList);\n  }\n\n  public CoerceValuesToSingleType(parametersIn: InkObject[]) {\n    let valType = ValueType.Int;\n\n    let specialCaseList: null | ListValue = null;\n\n    for (let obj of parametersIn) {\n      let val = asOrThrows(obj, Value);\n      if (val.valueType > valType) {\n        valType = val.valueType;\n      }\n\n      if (val.valueType == ValueType.List) {\n        specialCaseList = asOrNull(val, ListValue);\n      }\n    }\n\n    let parametersOut = [];\n\n    if (ValueType[valType] == ValueType[ValueType.List]) {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        if (val.valueType == ValueType.List) {\n          parametersOut.push(val);\n        } else if (val.valueType == ValueType.Int) {\n          let intVal = parseInt(val.valueObject);\n\n          specialCaseList = asOrThrows(specialCaseList, ListValue);\n          if (specialCaseList.value === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType specialCaseList.value\"\n            );\n          let list = specialCaseList.value.originOfMaxItem;\n\n          if (list === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType list\"\n            );\n          let item = list.TryGetItemWithValue(intVal, InkListItem.Null);\n          if (item.exists) {\n            let castedValue = new ListValue(item.result, intVal);\n            parametersOut.push(castedValue);\n          } else\n            throw new StoryException(\n              \"Could not find List item with the value \" +\n                intVal +\n                \" in \" +\n                list.name\n            );\n        } else {\n          const key = ValueType[val.valueType];\n          throw new StoryException(\n            \"Cannot mix Lists and \" + key + \" values in this operation\"\n          );\n        }\n      }\n    } else {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        let castedValue = val.Cast(valType);\n        parametersOut.push(castedValue);\n      }\n    }\n\n    return parametersOut;\n  }\n\n  constructor(name: string);\n  constructor(name: string, numberOfParameters: number);\n  constructor();\n  constructor() {\n    super();\n\n    if (arguments.length === 0) {\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n    } else if (arguments.length === 1) {\n      let name = arguments[0];\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n      this.name = name;\n    } else if (arguments.length === 2) {\n      let name = arguments[0];\n      let numberOfParameters = arguments[1];\n\n      this._isPrototype = true;\n      this.name = name;\n      this.numberOfParameters = numberOfParameters;\n    }\n  }\n\n  public static Identity<T>(t: T): any {\n    return t;\n  }\n\n  public static GenerateNativeFunctionsIfNecessary() {\n    if (this._nativeFunctions == null) {\n      this._nativeFunctions = new Map();\n\n      // Int operations\n      this.AddIntBinaryOp(this.Add, (x, y) => x + y);\n      this.AddIntBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddIntBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddIntBinaryOp(this.Divide, (x, y) => Math.floor(x / y));\n      this.AddIntBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddIntUnaryOp(this.Negate, (x) => -x);\n\n      this.AddIntBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddIntBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddIntBinaryOp(this.Less, (x, y) => x < y);\n      this.AddIntBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddIntBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddIntBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddIntUnaryOp(this.Not, (x) => x == 0);\n\n      this.AddIntBinaryOp(this.And, (x, y) => x != 0 && y != 0);\n      this.AddIntBinaryOp(this.Or, (x, y) => x != 0 || y != 0);\n\n      this.AddIntBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddIntBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddIntBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddIntUnaryOp(this.Floor, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Ceiling, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Int, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Float, (x) => x);\n\n      // Float operations\n      this.AddFloatBinaryOp(this.Add, (x, y) => x + y);\n      this.AddFloatBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddFloatBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddFloatBinaryOp(this.Divide, (x, y) => x / y);\n      this.AddFloatBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddFloatUnaryOp(this.Negate, (x) => -x);\n\n      this.AddFloatBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddFloatBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddFloatBinaryOp(this.Less, (x, y) => x < y);\n      this.AddFloatBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddFloatBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddFloatBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddFloatUnaryOp(this.Not, (x) => x == 0.0);\n\n      this.AddFloatBinaryOp(this.And, (x, y) => x != 0.0 && y != 0.0);\n      this.AddFloatBinaryOp(this.Or, (x, y) => x != 0.0 || y != 0.0);\n\n      this.AddFloatBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddFloatBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddFloatBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddFloatUnaryOp(this.Floor, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Ceiling, (x) => Math.ceil(x));\n      this.AddFloatUnaryOp(this.Int, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Float, NativeFunctionCall.Identity);\n\n      // String operations\n      this.AddStringBinaryOp(this.Add, (x, y) => x + y); // concat\n      this.AddStringBinaryOp(this.Equal, (x, y) => x === y);\n      this.AddStringBinaryOp(this.NotEquals, (x, y) => !(x === y));\n      this.AddStringBinaryOp(this.Has, (x, y) => x.includes(y));\n      this.AddStringBinaryOp(this.Hasnt, (x, y) => !x.includes(y));\n\n      this.AddListBinaryOp(this.Add, (x, y) => x.Union(y));\n      this.AddListBinaryOp(this.Subtract, (x, y) => x.Without(y));\n      this.AddListBinaryOp(this.Has, (x, y) => x.Contains(y));\n      this.AddListBinaryOp(this.Hasnt, (x, y) => !x.Contains(y));\n      this.AddListBinaryOp(this.Intersect, (x, y) => x.Intersect(y));\n\n      this.AddListBinaryOp(this.Equal, (x, y) => x.Equals(y));\n      this.AddListBinaryOp(this.Greater, (x, y) => x.GreaterThan(y));\n      this.AddListBinaryOp(this.Less, (x, y) => x.LessThan(y));\n      this.AddListBinaryOp(this.GreaterThanOrEquals, (x, y) =>\n        x.GreaterThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.LessThanOrEquals, (x, y) =>\n        x.LessThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.NotEquals, (x, y) => !x.Equals(y));\n\n      this.AddListBinaryOp(this.And, (x, y) => x.Count > 0 && y.Count > 0);\n      this.AddListBinaryOp(this.Or, (x, y) => x.Count > 0 || y.Count > 0);\n\n      this.AddListUnaryOp(this.Not, (x) => (x.Count == 0 ? 1 : 0));\n\n      this.AddListUnaryOp(this.Invert, (x) => x.inverse);\n      this.AddListUnaryOp(this.All, (x) => x.all);\n      this.AddListUnaryOp(this.ListMin, (x) => x.MinAsList());\n      this.AddListUnaryOp(this.ListMax, (x) => x.MaxAsList());\n      this.AddListUnaryOp(this.Count, (x) => x.Count);\n      this.AddListUnaryOp(this.ValueOfList, (x) => x.maxItem.Value);\n\n      let divertTargetsEqual = (d1: Path, d2: Path) => d1.Equals(d2);\n      let divertTargetsNotEqual = (d1: Path, d2: Path) => !d1.Equals(d2);\n      this.AddOpToNativeFunc(\n        this.Equal,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsEqual\n      );\n      this.AddOpToNativeFunc(\n        this.NotEquals,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsNotEqual\n      );\n    }\n  }\n\n  public AddOpFuncForType(\n    valType: ValueType,\n    op: UnaryOp<number | InkList> | BinaryOp<number | string | InkList | Path>\n  ): void {\n    if (this._operationFuncs == null) {\n      this._operationFuncs = new Map();\n    }\n\n    this._operationFuncs.set(valType, op);\n  }\n\n  public static AddOpToNativeFunc(\n    name: string,\n    args: number,\n    valType: ValueType,\n    op: UnaryOp<any> | BinaryOp<any>\n  ): void {\n    if (this._nativeFunctions === null)\n      return throwNullException(\"NativeFunctionCall._nativeFunctions\");\n    let nativeFunc = this._nativeFunctions.get(name);\n    if (!nativeFunc) {\n      nativeFunc = new NativeFunctionCall(name, args);\n      this._nativeFunctions.set(name, nativeFunc);\n    }\n\n    nativeFunc.AddOpFuncForType(valType, op);\n  }\n\n  public static AddIntBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Int, op);\n  }\n  public static AddIntUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Int, op);\n  }\n\n  public static AddFloatBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Float, op);\n  }\n  public static AddFloatUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Float, op);\n  }\n\n  public static AddStringBinaryOp(name: string, op: BinaryOp<string>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.String, op);\n  }\n\n  public static AddListBinaryOp(name: string, op: BinaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.List, op);\n  }\n  public static AddListUnaryOp(name: string, op: UnaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.List, op);\n  }\n\n  public toString() {\n    return 'Native \"' + this.name + '\"';\n  }\n\n  public _prototype: NativeFunctionCall | null = null;\n  public _isPrototype: boolean = false;\n  public _operationFuncs: Map<ValueType, BinaryOp<any> | UnaryOp<any>> | null =\n    null;\n  public static _nativeFunctions: Map<string, NativeFunctionCall> | null = null;\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"./Expression\";\nimport { BoolValue, FloatValue, IntValue } from \"../../../../engine/Value\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\nimport { ParsedObject } from \"../Object\";\n\n// This class is named Number in the C# codebase\n// but this conflict with the built-in Number class\nexport class NumberExpression extends Expression {\n  public value: number | boolean;\n  public subtype: \"int\" | \"float\" | \"bool\";\n\n  constructor(value: number | boolean, subtype: \"int\" | \"float\" | \"bool\") {\n    super();\n\n    if (\n      (typeof value === \"number\" && !Number.isNaN(value)) ||\n      typeof value == \"boolean\"\n    ) {\n      this.value = value;\n      this.subtype = subtype;\n    } else {\n      throw new Error(\"Unexpected object type in NumberExpression.\");\n    }\n  }\n\n  get typeName(): string {\n    return \"Number\";\n  }\n\n  public isInt = (): boolean => this.subtype == \"int\";\n\n  public isFloat = (): boolean => this.subtype == \"float\";\n\n  public isBool = (): boolean => this.subtype == \"bool\";\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    if (this.isInt()) {\n      container.AddContent(new IntValue(this.value as number));\n    } else if (this.isFloat()) {\n      container.AddContent(new FloatValue(this.value as number));\n    } else if (this.isBool()) {\n      container.AddContent(new BoolValue(this.value as boolean));\n    }\n  };\n\n  public readonly toString = (): string => String(this.value);\n\n  public Equals(obj: ParsedObject): boolean {\n    const numberExpression = asOrNull(obj, NumberExpression);\n    if (!numberExpression) return false;\n\n    return (\n      numberExpression.subtype == this.subtype &&\n      numberExpression.value == this.value\n    );\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"./Expression\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { NumberExpression } from \"./NumberExpression\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class UnaryExpression extends Expression {\n  get nativeNameForOp(): string {\n    // Replace \"-\" with \"_\" to make it unique (compared to subtraction)\n    if (this.op === \"-\") {\n      return \"_\";\n    } else if (this.op === \"not\") {\n      return \"!\";\n    }\n\n    return this.op;\n  }\n\n  public innerExpression: Expression;\n\n  // Attempt to flatten inner expression immediately\n  // e.g. convert (-(5)) into (-5)\n  public static readonly WithInner = (\n    inner: Expression,\n    op: string\n  ): Expression => {\n    const innerNumber = asOrNull(inner, NumberExpression);\n\n    if (innerNumber) {\n      if (op === \"-\") {\n        if (innerNumber.isInt()) {\n          return new NumberExpression(-innerNumber.value, \"int\");\n        } else if (innerNumber.isFloat()) {\n          return new NumberExpression(-innerNumber.value, \"float\");\n        }\n      } else if (op == \"!\" || op == \"not\") {\n        if (innerNumber.isInt()) {\n          return new NumberExpression(innerNumber.value == 0, \"bool\");\n        } else if (innerNumber.isFloat()) {\n          return new NumberExpression(innerNumber.value == 0.0, \"bool\");\n        } else if (innerNumber.isBool()) {\n          return new NumberExpression(!innerNumber.value, \"bool\");\n        }\n      }\n\n      throw new Error(\"Unexpected operation or number type\");\n    }\n\n    // Normal fallback\n    const unary = new UnaryExpression(inner, op);\n\n    return unary;\n  };\n\n  constructor(inner: Expression, public readonly op: string) {\n    super();\n\n    this.innerExpression = this.AddContent(inner) as Expression;\n  }\n\n  get typeName(): string {\n    return \"UnaryExpression\";\n  }\n\n  public readonly GenerateIntoContainer = (container: RuntimeContainer) => {\n    this.innerExpression.GenerateIntoContainer(container);\n    container.AddContent(NativeFunctionCall.CallWithName(this.nativeNameForOp));\n  };\n\n  public readonly toString = (): string =>\n    this.nativeNameForOp + this.innerExpression;\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"./Expression\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { Story } from \"../Story\";\nimport { UnaryExpression } from \"./UnaryExpression\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class BinaryExpression extends Expression {\n  public readonly leftExpression: Expression;\n  public readonly rightExpression: Expression;\n\n  constructor(left: Expression, right: Expression, public opName: string) {\n    super();\n\n    this.leftExpression = this.AddContent(left) as Expression;\n    this.rightExpression = this.AddContent(right) as Expression;\n\n    this.opName = opName;\n  }\n\n  get typeName(): string {\n    return \"BinaryExpression\";\n  }\n\n  public readonly GenerateIntoContainer = (container: RuntimeContainer) => {\n    this.leftExpression.GenerateIntoContainer(container);\n    this.rightExpression.GenerateIntoContainer(container);\n    this.opName = this.NativeNameForOp(this.opName);\n    container.AddContent(NativeFunctionCall.CallWithName(this.opName));\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // Check for the following case:\n    //\n    //    (not A) ? B\n    //\n    // Since this easy to accidentally do:\n    //\n    //    not A ? B\n    //\n    // when you intend:\n    //\n    //    not (A ? B)\n    if (this.NativeNameForOp(this.opName) === \"?\") {\n      const leftUnary = asOrNull(this.leftExpression, UnaryExpression);\n      if (\n        leftUnary !== null &&\n        (leftUnary.op === \"not\" || leftUnary.op === \"!\")\n      ) {\n        this.Error(\n          `Using 'not' or '!' here negates '${leftUnary.innerExpression}' rather than the result of the '?' or 'has' operator. You need to add parentheses around the (A ? B) expression.`\n        );\n      }\n    }\n  }\n\n  public readonly NativeNameForOp = (opName: string): string => {\n    if (opName === \"and\") {\n      return \"&&\";\n    } else if (opName === \"or\") {\n      return \"||\";\n    } else if (opName === \"mod\") {\n      return \"%\";\n    } else if (opName === \"has\") {\n      return \"?\";\n    } else if (opName === \"hasnt\") {\n      return \"!?\";\n    }\n\n    return opName;\n  };\n\n  public readonly toString = (): string =>\n    `(${this.leftExpression} ${this.opName} ${this.rightExpression})`;\n}\n","export class CharacterSet {\n  public static readonly FromRange = (\n    start: string,\n    end: string\n  ): CharacterSet => new CharacterSet().AddRange(start, end);\n\n  public set: Set<string> = new Set<string>();\n\n  constructor(arg?: string | string[] | CharacterSet) {\n    if (arg) {\n      this.AddCharacters(arg);\n    }\n  }\n\n  public readonly Add = (arg: string) => this.set.add(arg);\n\n  public readonly AddRange = (start: string, end: string): CharacterSet => {\n    for (let c = start.charCodeAt(0); c <= end.charCodeAt(0); ++c) {\n      this.Add(String.fromCharCode(c));\n    }\n\n    return this;\n  };\n\n  public readonly AddCharacters = (\n    chars: string | string[] | CharacterSet\n  ): CharacterSet => {\n    if (typeof chars === \"string\" || Array.isArray(chars)) {\n      for (const c of chars) {\n        this.Add(c);\n      }\n    } else {\n      for (const c of chars.set) {\n        this.Add(c);\n      }\n    }\n\n    return this;\n  };\n}\n","import { CharacterSet } from \"./CharacterSet\";\n\n/// <summary>\n/// A class representing a character range. Allows for lazy-loading a corresponding <see cref=\"CharacterSet\">character set</see>.\n/// </summary>\nexport class CharacterRange {\n  public static Define = (\n    start: string,\n    end: string,\n    excludes: string[] | CharacterSet = []\n  ): CharacterRange => new CharacterRange(start, end, excludes);\n\n  private _correspondingCharSet: CharacterSet = new CharacterSet();\n  private _excludes = new Set<string>();\n\n  constructor(\n    private _start: string,\n    private _end: string,\n    excludes: string[] | CharacterSet = []\n  ) {\n    if (excludes instanceof CharacterSet) {\n      this._excludes = excludes.set;\n    } else {\n      for (const item of excludes) {\n        this._excludes.add(item);\n      }\n    }\n  }\n\n  get start(): string {\n    return this._start;\n  }\n\n  get end(): string {\n    return this._end;\n  }\n\n  /// <summary>\n  /// Returns a <see cref=\"CharacterSet\">character set</see> instance corresponding to the character range\n  /// represented by the current instance.\n  /// </summary>\n  /// <remarks>\n  /// The internal character set is created once and cached in memory.\n  /// </remarks>\n  /// <returns>The char set.</returns>\n  public readonly ToCharacterSet = (): CharacterSet => {\n    if (this._correspondingCharSet.set.size === 0) {\n      for (\n        let ii = this.start.charCodeAt(0), c = String.fromCharCode(ii);\n        ii <= this.end.charCodeAt(0);\n        ii += 1\n      ) {\n        if (!this._excludes.has(c)) {\n          this._correspondingCharSet.AddCharacters(c);\n        }\n      }\n    }\n\n    return this._correspondingCharSet;\n  };\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ChoicePoint extends InkObject {\n  public _pathOnChoice: Path | null = null;\n  public hasCondition: boolean = false;\n  public hasStartContent: boolean = false;\n  public hasChoiceOnlyContent: boolean = false;\n  public isInvisibleDefault: boolean = false;\n  public onceOnly: boolean = true;\n\n  constructor(onceOnly: boolean = true) {\n    super();\n    this.onceOnly = onceOnly;\n  }\n  get pathOnChoice(): Path | null {\n    if (this._pathOnChoice != null && this._pathOnChoice.isRelative) {\n      let choiceTargetObj = this.choiceTarget;\n      if (choiceTargetObj) {\n        this._pathOnChoice = choiceTargetObj.path;\n      }\n    }\n    return this._pathOnChoice;\n  }\n  set pathOnChoice(value: Path | null) {\n    this._pathOnChoice = value;\n  }\n  get choiceTarget(): Container | null {\n    if (this._pathOnChoice === null)\n      return throwNullException(\"ChoicePoint._pathOnChoice\");\n    return this.ResolvePath(this._pathOnChoice).container;\n  }\n  get pathStringOnChoice(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    return this.CompactPathString(this.pathOnChoice);\n  }\n  set pathStringOnChoice(value: string) {\n    this.pathOnChoice = new Path(value);\n  }\n  get flags(): number {\n    let flags = 0;\n    if (this.hasCondition) flags |= 1;\n    if (this.hasStartContent) flags |= 2;\n    if (this.hasChoiceOnlyContent) flags |= 4;\n    if (this.isInvisibleDefault) flags |= 8;\n    if (this.onceOnly) flags |= 16;\n    return flags;\n  }\n  set flags(value: number) {\n    this.hasCondition = (value & 1) > 0;\n    this.hasStartContent = (value & 2) > 0;\n    this.hasChoiceOnlyContent = (value & 4) > 0;\n    this.isInvisibleDefault = (value & 8) > 0;\n    this.onceOnly = (value & 16) > 0;\n  }\n  public toString(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    // int? targetLineNum = DebugLineNumberOfPath (pathOnChoice);\n    let targetLineNum = null;\n    let targetString = this.pathOnChoice.toString();\n\n    if (targetLineNum != null) {\n      targetString = \" line \" + targetLineNum + \"(\" + targetString + \")\";\n    }\n\n    return \"Choice: -> \" + targetString;\n  }\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\n\nexport class Pointer {\n  public container: Container | null = null;\n  public index: number = -1;\n\n  constructor();\n  constructor(container: Container | null, index: number);\n  constructor() {\n    if (arguments.length === 2) {\n      this.container = arguments[0];\n      this.index = arguments[1];\n    }\n  }\n\n  public Resolve(): InkObject | null {\n    if (this.index < 0) return this.container;\n    if (this.container == null) return null;\n    if (this.container.content.length == 0) return this.container;\n    if (this.index >= this.container.content.length) return null;\n\n    return this.container.content[this.index];\n  }\n\n  get isNull(): boolean {\n    return this.container == null;\n  }\n\n  get path(): Path | null {\n    if (this.isNull) return null;\n\n    if (this.index >= 0)\n      return this.container!.path.PathByAppendingComponent(\n        new Path.Component(this.index)\n      );\n    else return this.container!.path;\n  }\n\n  public toString(): string {\n    if (!this.container) return \"Ink Pointer (null)\";\n\n    return (\n      \"Ink Pointer -> \" +\n      this.container.path.toString() +\n      \" -- index \" +\n      this.index\n    );\n  }\n\n  // This method does not exist in the original C# code, but is here to maintain the\n  // value semantics of Pointer.\n  public copy(): Pointer {\n    return new Pointer(this.container, this.index);\n  }\n\n  public static StartOf(container: Container | null): Pointer {\n    return new Pointer(container, 0);\n  }\n\n  public static get Null(): Pointer {\n    return new Pointer(null, -1);\n  }\n}\n","import { Path } from \"./Path\";\nimport { PushPopType } from \"./PushPop\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { InkObject } from \"./Object\";\nimport { Pointer } from \"./Pointer\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Divert extends InkObject {\n  get targetPath() {\n    if (this._targetPath != null && this._targetPath.isRelative) {\n      let targetObj = this.targetPointer.Resolve();\n      if (targetObj) {\n        this._targetPath = targetObj.path;\n      }\n    }\n\n    return this._targetPath;\n  }\n  set targetPath(value: Path | null) {\n    this._targetPath = value;\n    this._targetPointer = Pointer.Null;\n  }\n\n  public _targetPath: Path | null = null;\n\n  get targetPointer() {\n    if (this._targetPointer.isNull) {\n      let targetObj = this.ResolvePath(this._targetPath).obj;\n\n      if (this._targetPath === null)\n        return throwNullException(\"this._targetPath\");\n      if (this._targetPath.lastComponent === null)\n        return throwNullException(\"this._targetPath.lastComponent\");\n\n      if (this._targetPath.lastComponent.isIndex) {\n        if (targetObj === null) return throwNullException(\"targetObj\");\n        this._targetPointer.container =\n          targetObj.parent instanceof Container ? targetObj.parent : null;\n        this._targetPointer.index = this._targetPath.lastComponent.index;\n      } else {\n        this._targetPointer = Pointer.StartOf(\n          targetObj instanceof Container ? targetObj : null\n        );\n      }\n    }\n\n    return this._targetPointer.copy();\n  }\n\n  public _targetPointer: Pointer = Pointer.Null;\n\n  get targetPathString() {\n    if (this.targetPath == null) return null;\n\n    return this.CompactPathString(this.targetPath);\n  }\n  set targetPathString(value: string | null) {\n    if (value == null) {\n      this.targetPath = null;\n    } else {\n      this.targetPath = new Path(value);\n    }\n  }\n\n  public variableDivertName: string | null = null;\n  get hasVariableTarget() {\n    return this.variableDivertName != null;\n  }\n\n  public pushesToStack: boolean = false;\n  public stackPushType: PushPopType = 0;\n\n  public isExternal: boolean = false;\n  public externalArgs: number = 0;\n\n  public isConditional: boolean = false;\n\n  constructor(stackPushType?: PushPopType) {\n    super();\n    this.pushesToStack = false;\n\n    if (typeof stackPushType !== \"undefined\") {\n      this.pushesToStack = true;\n      this.stackPushType = stackPushType;\n    }\n  }\n\n  public Equals(obj: Divert | null) {\n    let otherDivert = obj;\n    if (otherDivert instanceof Divert) {\n      if (this.hasVariableTarget == otherDivert.hasVariableTarget) {\n        if (this.hasVariableTarget) {\n          return this.variableDivertName == otherDivert.variableDivertName;\n        } else {\n          if (this.targetPath === null)\n            return throwNullException(\"this.targetPath\");\n          return this.targetPath.Equals(otherDivert.targetPath);\n        }\n      }\n    }\n    return false;\n  }\n\n  public toString() {\n    if (this.hasVariableTarget) {\n      return \"Divert(variable: \" + this.variableDivertName + \")\";\n    } else if (this.targetPath == null) {\n      return \"Divert(null)\";\n    } else {\n      let sb = new StringBuilder();\n\n      let targetStr = this.targetPath.toString();\n      // int? targetLineNum = DebugLineNumberOfPath (targetPath);\n      let targetLineNum = null;\n      if (targetLineNum != null) {\n        targetStr = \"line \" + targetLineNum;\n      }\n\n      sb.Append(\"Divert\");\n\n      if (this.isConditional) sb.Append(\"?\");\n\n      if (this.pushesToStack) {\n        if (this.stackPushType == PushPopType.Function) {\n          sb.Append(\" function\");\n        } else {\n          sb.Append(\" tunnel\");\n        }\n      }\n\n      sb.Append(\" -> \");\n      sb.Append(this.targetPathString);\n\n      sb.Append(\" (\");\n      sb.Append(targetStr);\n      sb.Append(\")\");\n\n      return sb.toString();\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class VariableAssignment extends InkObject {\n  public readonly variableName: string | null;\n  public readonly isNewDeclaration: boolean;\n  public isGlobal: boolean;\n\n  constructor(variableName: string | null, isNewDeclaration: boolean) {\n    super();\n    this.variableName = variableName || null;\n    this.isNewDeclaration = !!isNewDeclaration;\n    this.isGlobal = false;\n  }\n\n  public toString(): string {\n    return \"VarAssign to \" + this.variableName;\n  }\n}\n","import { ChoicePoint } from \"../../../engine/ChoicePoint\";\nimport { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ContentList } from \"./ContentList\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { Divert as RuntimeDivert } from \"../../../engine/Divert\";\nimport { DivertTargetValue } from \"../../../engine/Value\";\nimport { INamedContent } from \"../../../engine/INamedContent\";\nimport { IWeavePoint } from \"./IWeavePoint\";\nimport { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Path as RuntimePath } from \"../../../engine/Path\";\nimport { Story } from \"./Story\";\nimport { SymbolType } from \"./SymbolType\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../engine/VariableAssignment\";\nimport { Expression } from \"./Expression/Expression\";\nimport { Identifier } from \"./Identifier\";\n\nexport class Choice extends ParsedObject implements IWeavePoint, INamedContent {\n  private _condition: Expression | null = null;\n  private _innerContentContainer: RuntimeContainer | null = null;\n  private _outerContainer: RuntimeContainer | null = null;\n  private _runtimeChoice: ChoicePoint | null = null;\n  get runtimeChoice(): ChoicePoint {\n    if (!this._runtimeChoice) {\n      throw new Error();\n    }\n\n    return this._runtimeChoice;\n  }\n\n  private _returnToR1: DivertTargetValue | null = null;\n  private _returnToR2: DivertTargetValue | null = null;\n  private _r1Label: RuntimeContainer | null = null;\n  private _r2Label: RuntimeContainer | null = null;\n  private _divertToStartContentOuter: RuntimeDivert | null = null;\n  private _divertToStartContentInner: RuntimeDivert | null = null;\n  private _startContentRuntimeContainer: RuntimeContainer | null = null;\n\n  public startContent: ContentList;\n  public choiceOnlyContent: ContentList;\n  public innerContent: ContentList;\n  public identifier?: Identifier;\n  get name() {\n    return this.identifier?.name || null;\n  }\n  public onceOnly: boolean;\n  public isInvisibleDefault: boolean = false;\n  public indentationDepth: number;\n  public hasWeaveStyleInlineBrackets: boolean = false;\n\n  get condition() {\n    return this._condition;\n  }\n\n  set condition(value) {\n    this._condition = value;\n    if (value) {\n      this.AddContent(value as ParsedObject);\n    }\n  }\n\n  // Required for IWeavePoint interface\n  // Choice's target container. Used by weave to append any extra\n  // nested weave content into.\n  get runtimeContainer() {\n    return this._innerContentContainer;\n  }\n\n  get innerContentContainer() {\n    return this._innerContentContainer;\n  }\n\n  get containerForCounting() {\n    return this._innerContentContainer;\n  }\n\n  // Override runtimePath to point to the Choice's target content (after it's chosen),\n  // as opposed to the default implementation which would point to the choice itself\n  // (or it's outer container), which is what runtimeObject is.\n  get runtimePath(): RuntimePath {\n    if (!this.innerContentContainer || !this.innerContentContainer.path) {\n      throw new Error();\n    }\n\n    return this.innerContentContainer.path;\n  }\n\n  constructor(\n    startContent: ContentList,\n    choiceOnlyContent: ContentList,\n    innerContent: ContentList\n  ) {\n    super();\n\n    this.startContent = startContent;\n    this.choiceOnlyContent = choiceOnlyContent;\n    this.innerContent = innerContent;\n    this.indentationDepth = 1;\n\n    if (startContent) {\n      this.AddContent(this.startContent);\n    }\n\n    if (choiceOnlyContent) {\n      this.AddContent(this.choiceOnlyContent);\n    }\n\n    if (innerContent) {\n      this.AddContent(this.innerContent);\n    }\n\n    this.onceOnly = true; // default\n  }\n\n  get typeName(): string {\n    return \"Choice\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    this._outerContainer = new RuntimeContainer();\n\n    // Content names for different types of choice:\n    //  * start content [choice only content] inner content\n    //  * start content   -> divert\n    //  * start content\n    //  * [choice only content]\n\n    // Hmm, this structure has become slightly insane!\n    //\n    // [\n    //     EvalStart\n    //     assign $r = $r1   -- return target = return label 1\n    //     BeginString\n    //     -> s\n    //     [(r1)]            -- return label 1 (after start content)\n    //     EndString\n    //     BeginString\n    //     ... choice only content\n    //     EndEval\n    //     Condition expression\n    //     choice: -> \"c-0\"\n    //     (s) = [\n    //         start content\n    //         -> r          -- goto return label 1 or 2\n    //     ]\n    //  ]\n    //\n    //  in parent's container: (the inner content for the choice)\n    //\n    //  (c-0) = [\n    //      EvalStart\n    //      assign $r = $r2   -- return target = return label 2\n    //      EndEval\n    //      -> s\n    //      [(r2)]            -- return label 1 (after start content)\n    //      inner content\n    //  ]\n    //\n\n    this._runtimeChoice = new ChoicePoint(this.onceOnly);\n    this._runtimeChoice.isInvisibleDefault = this.isInvisibleDefault;\n\n    if (this.startContent || this.choiceOnlyContent || this.condition) {\n      this._outerContainer.AddContent(RuntimeControlCommand.EvalStart());\n    }\n\n    // Start content is put into a named container that's referenced both\n    // when displaying the choice initially, and when generating the text\n    // when the choice is chosen.\n    if (this.startContent) {\n      // Generate start content and return\n      //  - We can't use a function since it uses a call stack element, which would\n      //    put temporary values out of scope. Instead we manually divert around.\n      //  - $r is a variable divert target contains the return point\n      this._returnToR1 = new DivertTargetValue();\n      this._outerContainer.AddContent(this._returnToR1);\n\n      const varAssign = new RuntimeVariableAssignment(\"$r\", true);\n      this._outerContainer.AddContent(varAssign);\n\n      // Mark the start of the choice text generation, so that the runtime\n      // knows where to rewind to to extract the content from the output stream.\n      this._outerContainer.AddContent(RuntimeControlCommand.BeginString());\n\n      this._divertToStartContentOuter = new RuntimeDivert();\n      this._outerContainer.AddContent(this._divertToStartContentOuter);\n\n      // Start content itself in a named container\n      this._startContentRuntimeContainer =\n        this.startContent.GenerateRuntimeObject() as RuntimeContainer;\n      this._startContentRuntimeContainer.name = \"s\";\n\n      // Effectively, the \"return\" statement - return to the point specified by $r\n      const varDivert = new RuntimeDivert();\n      varDivert.variableDivertName = \"$r\";\n      this._startContentRuntimeContainer.AddContent(varDivert);\n\n      // Add the container\n      this._outerContainer.AddToNamedContentOnly(\n        this._startContentRuntimeContainer\n      );\n\n      // This is the label to return to\n      this._r1Label = new RuntimeContainer();\n      this._r1Label.name = \"$r1\";\n      this._outerContainer.AddContent(this._r1Label);\n\n      this._outerContainer.AddContent(RuntimeControlCommand.EndString());\n\n      this._runtimeChoice.hasStartContent = true;\n    }\n\n    // Choice only content - mark the start, then generate it directly into the outer container\n    if (this.choiceOnlyContent) {\n      this._outerContainer.AddContent(RuntimeControlCommand.BeginString());\n\n      const choiceOnlyRuntimeContent =\n        this.choiceOnlyContent.GenerateRuntimeObject() as RuntimeContainer;\n      this._outerContainer.AddContentsOfContainer(choiceOnlyRuntimeContent);\n\n      this._outerContainer.AddContent(RuntimeControlCommand.EndString());\n\n      this._runtimeChoice.hasChoiceOnlyContent = true;\n    }\n\n    // Generate any condition for this choice\n    if (this.condition) {\n      this.condition.GenerateIntoContainer(this._outerContainer);\n      this._runtimeChoice.hasCondition = true;\n    }\n\n    if (this.startContent || this.choiceOnlyContent || this.condition) {\n      this._outerContainer.AddContent(RuntimeControlCommand.EvalEnd());\n    }\n\n    // Add choice itself\n    this._outerContainer.AddContent(this._runtimeChoice);\n\n    // Container that choice points to for when it's chosen\n    this._innerContentContainer = new RuntimeContainer();\n\n    // Repeat start content by diverting to its container\n    if (this.startContent) {\n      // Set the return point when jumping back into the start content\n      //  - In this case, it's the $r2 point, within the choice content \"c\".\n      this._returnToR2 = new DivertTargetValue();\n      this._innerContentContainer.AddContent(RuntimeControlCommand.EvalStart());\n      this._innerContentContainer.AddContent(this._returnToR2);\n      this._innerContentContainer.AddContent(RuntimeControlCommand.EvalEnd());\n      const varAssign = new RuntimeVariableAssignment(\"$r\", true);\n      this._innerContentContainer.AddContent(varAssign);\n\n      // Main divert into start content\n      this._divertToStartContentInner = new RuntimeDivert();\n      this._innerContentContainer.AddContent(this._divertToStartContentInner);\n\n      // Define label to return to\n      this._r2Label = new RuntimeContainer();\n      this._r2Label.name = \"$r2\";\n      this._innerContentContainer.AddContent(this._r2Label);\n    }\n\n    // Choice's own inner content\n    if (this.innerContent) {\n      const innerChoiceOnlyContent =\n        this.innerContent.GenerateRuntimeObject() as RuntimeContainer;\n      this._innerContentContainer.AddContentsOfContainer(\n        innerChoiceOnlyContent\n      );\n    }\n\n    if (this.story.countAllVisits) {\n      this._innerContentContainer.visitsShouldBeCounted = true;\n    }\n\n    this._innerContentContainer.countingAtStartOnly = true;\n\n    return this._outerContainer;\n  };\n\n  public ResolveReferences(context: Story): void {\n    // Weave style choice - target own content container\n    if (this._innerContentContainer) {\n      this.runtimeChoice.pathOnChoice = this._innerContentContainer.path;\n\n      if (this.onceOnly) {\n        this._innerContentContainer.visitsShouldBeCounted = true;\n      }\n    }\n\n    if (this._returnToR1) {\n      if (!this._r1Label) {\n        throw new Error();\n      }\n\n      this._returnToR1.targetPath = this._r1Label.path;\n    }\n\n    if (this._returnToR2) {\n      if (!this._r2Label) {\n        throw new Error();\n      }\n\n      this._returnToR2.targetPath = this._r2Label.path;\n    }\n\n    if (this._divertToStartContentOuter) {\n      if (!this._startContentRuntimeContainer) {\n        throw new Error();\n      }\n\n      this._divertToStartContentOuter.targetPath =\n        this._startContentRuntimeContainer.path;\n    }\n\n    if (this._divertToStartContentInner) {\n      if (!this._startContentRuntimeContainer) {\n        throw new Error();\n      }\n\n      this._divertToStartContentInner.targetPath =\n        this._startContentRuntimeContainer.path;\n    }\n\n    super.ResolveReferences(context);\n\n    if (this.identifier && (this.identifier?.name || \"\").length > 0) {\n      context.CheckForNamingCollisions(\n        this as ParsedObject,\n        this.identifier,\n        SymbolType.SubFlowAndWeave\n      );\n    }\n  }\n\n  public readonly toString = () => {\n    if (this.choiceOnlyContent !== null) {\n      return `* ${this.startContent}[${this.choiceOnlyContent}]...`;\n    }\n\n    return `* ${this.startContent}...`;\n  };\n}\n","export class StringParserElement {\n  public static _uniqueIdCounter: number = 1000;\n\n  public characterIndex: number = 0;\n  public characterInLineIndex: number = 0;\n  public lineIndex: number = 0;\n  public reportedErrorInScope: boolean = false;\n  public uniqueId: number = 0;\n  public customFlags: number = 0;\n\n  public readonly CopyFrom = (fromElement: StringParserElement): void => {\n    StringParserElement._uniqueIdCounter++;\n    this.uniqueId = StringParserElement._uniqueIdCounter;\n    this.characterIndex = fromElement.characterIndex;\n    this.characterInLineIndex = fromElement.characterInLineIndex;\n    this.lineIndex = fromElement.lineIndex;\n    this.customFlags = fromElement.customFlags;\n    this.reportedErrorInScope = false;\n  };\n\n  // Squash is used when succeeding from a rule,\n  // so only the state information we wanted to carry forward is\n  // retained. e.g. characterIndex and lineIndex are global,\n  // however uniqueId is specific to the individual rule,\n  // and likewise, custom flags are designed for the temporary\n  // state of the individual rule too.\n  public readonly SquashFrom = (fromElement: StringParserElement): void => {\n    this.characterIndex = fromElement.characterIndex;\n    this.characterInLineIndex = fromElement.characterInLineIndex;\n    this.lineIndex = fromElement.lineIndex;\n    this.reportedErrorInScope = fromElement.reportedErrorInScope;\n    this.customFlags = fromElement.customFlags;\n  };\n}\n","import { StringParserElement } from \"./StringParserElement\";\n\nexport class StringParserState {\n  private _stack: StringParserElement[] = [];\n  private _numElements: number = 0;\n\n  get currentElement(): StringParserElement {\n    return this._stack[this._numElements - 1];\n  }\n\n  get lineIndex(): number {\n    return this.currentElement.lineIndex;\n  }\n\n  set lineIndex(value: number) {\n    this.currentElement.lineIndex = value;\n  }\n\n  get characterIndex(): number {\n    return this.currentElement.characterIndex;\n  }\n\n  set characterIndex(value: number) {\n    this.currentElement.characterIndex = value;\n  }\n\n  get characterInLineIndex(): number {\n    return this.currentElement.characterInLineIndex;\n  }\n\n  set characterInLineIndex(value: number) {\n    this.currentElement.characterInLineIndex = value;\n  }\n\n  get customFlags(): number {\n    return this.currentElement.customFlags;\n  }\n\n  set customFlags(value: number) {\n    this.currentElement.customFlags = value;\n  }\n\n  get errorReportedAlreadyInScope(): boolean {\n    return this.currentElement.reportedErrorInScope;\n  }\n\n  get stackHeight(): number {\n    return this._numElements;\n  }\n\n  constructor() {\n    const kExpectedMaxStackDepth = 200;\n    for (let i = 0; i < kExpectedMaxStackDepth; i++) {\n      this._stack[i] = new StringParserElement();\n    }\n    this._numElements = 1;\n  }\n\n  public readonly StringParserState = (): void => {\n    const kExpectedMaxStackDepth: number = 200;\n    this._stack = new Array(kExpectedMaxStackDepth);\n\n    for (let ii = 0; ii < kExpectedMaxStackDepth; ++ii) {\n      this._stack[ii] = new StringParserElement();\n    }\n\n    this._numElements = 1;\n  };\n\n  public readonly Push = (): number => {\n    if (this._numElements >= this._stack.length && this._numElements > 0) {\n      throw new Error(\"Stack overflow in parser state.\");\n    }\n\n    const prevElement = this._stack[this._numElements - 1];\n    const newElement = this._stack[this._numElements];\n    this._numElements++;\n\n    newElement.CopyFrom(prevElement);\n\n    return newElement.uniqueId;\n  };\n\n  public readonly Pop = (expectedRuleId: number): void => {\n    if (this._numElements == 1) {\n      throw new Error(\n        \"Attempting to remove final stack element is illegal! Mismatched Begin/Succceed/Fail?\"\n      );\n    }\n\n    if (this.currentElement.uniqueId != expectedRuleId) {\n      throw new Error(\n        \"Mismatched rule IDs while Poping - do you have mismatched Begin/Succeed/Fail?\"\n      );\n    }\n\n    // Restore state\n    this._numElements -= 1;\n  };\n\n  public Peek = (expectedRuleId: number) => {\n    if (this.currentElement.uniqueId != expectedRuleId) {\n      throw new Error(\n        \"Mismatched rule IDs while Peeking - do you have mismatched Begin/Succeed/Fail?\"\n      );\n    }\n\n    return this._stack[this._numElements - 1];\n  };\n\n  public readonly PeekPenultimate = (): StringParserElement | null => {\n    if (this._numElements >= 2) {\n      return this._stack[this._numElements - 2];\n    }\n\n    return null;\n  };\n\n  // Reduce stack height while maintaining currentElement\n  // Remove second last element: i.e. \"squash last two elements together\"\n  // Used when succeeding from a rule (and ONLY when succeeding, since\n  // the state of the top element is retained).\n  public readonly Squash = (): void => {\n    if (this._numElements < 2) {\n      throw new Error(\n        \"Attempting to remove final stack element is illegal! Mismatched Begin/Succceed/Fail?\"\n      );\n    }\n\n    const penultimateEl = this._stack[this._numElements - 2];\n    const lastEl = this._stack[this._numElements - 1];\n\n    penultimateEl.SquashFrom(lastEl);\n\n    this._numElements -= 1;\n  };\n\n  public readonly NoteErrorReported = (): void => {\n    for (const el of this._stack) {\n      el.reportedErrorInScope = true;\n    }\n  };\n}\n","import { CharacterSet } from \"../CharacterSet\";\nimport { ParsedObject } from \"../ParsedHierarchy/Object\";\nimport { StringParserState } from \"./StringParserState\";\nimport { StringParserElement } from \"./StringParserElement\";\n\nexport const ParseSuccess = Symbol(\"ParseSuccessStruct\");\n\nexport type ParseRule = () => ParseRuleReturn;\n\nexport type ParseRuleReturn =\n  | object\n  | string\n  | null\n  | number\n  | typeof StringParser[\"ParseSuccess\"];\n\nexport type SpecificParseRule<T extends ParseRule> = T;\n\nexport class StringParser {\n  public ParseRule: ParseRule | null = null;\n\n  public static readonly ParseSuccess: typeof ParseSuccess = ParseSuccess;\n  public static readonly numbersCharacterSet = new CharacterSet(\"0123456789\");\n\n  private _chars: string[];\n\n  public errorHandler:\n    | null\n    | ((\n        message: string,\n        index: number,\n        lineIndex?: number,\n        isWarning?: boolean\n      ) => void) = null;\n  public state: StringParserState;\n  public hadError: boolean = false;\n\n  constructor(str: string) {\n    const strPreProc = this.PreProcessInputString(str);\n    this.state = new StringParserState();\n\n    if (str) {\n      this._chars = strPreProc.split(\"\");\n    } else {\n      this._chars = [];\n    }\n\n    this.inputString = strPreProc;\n  }\n\n  get currentCharacter(): string {\n    if (this.index >= 0 && this.remainingLength > 0) {\n      return this._chars[this.index];\n    }\n\n    return \"0\";\n  }\n\n  // Don't do anything by default, but provide ability for subclasses\n  // to manipulate the string before it's used as input (converted to a char array)\n  public PreProcessInputString(str: string): string {\n    return str;\n  }\n\n  //--------------------------------\n  // Parse state\n  //--------------------------------\n\n  public readonly BeginRule = (): number => this.state.Push();\n\n  public readonly FailRule = (expectedRuleId: number): ParseRuleReturn => {\n    this.state.Pop(expectedRuleId);\n    return null;\n  };\n\n  public readonly CancelRule = (expectedRuleId: number): void => {\n    this.state.Pop(expectedRuleId);\n  };\n\n  public readonly SucceedRule = (\n    expectedRuleId: number,\n    result: ParseRuleReturn = null\n  ): ParseRuleReturn => {\n    // Get state at point where this rule stared evaluating\n    const stateAtSucceedRule = this.state.Peek(expectedRuleId);\n    const stateAtBeginRule = this.state.PeekPenultimate();\n\n    // Allow subclass to receive callback\n    if (this.RuleDidSucceed) {\n      this.RuleDidSucceed(result, stateAtBeginRule, stateAtSucceedRule);\n    }\n\n    // Flatten state stack so that we maintain the same values,\n    // but remove one level in the stack.\n    this.state.Squash();\n\n    let finalResult: ParseRuleReturn = result;\n    if (finalResult === null) {\n      finalResult = StringParser.ParseSuccess;\n    }\n\n    return finalResult;\n  };\n\n  public RuleDidSucceed?: (\n    result: ParseRuleReturn,\n    startState: StringParserElement | null,\n    endState: StringParserElement\n  ) => void;\n\n  public readonly Expect = (\n    rule: ParseRule,\n    message: string | null = null,\n    recoveryRule: ParseRule | null = null\n  ): ParseRuleReturn => {\n    let result: ParseRuleReturn = this.ParseObject(rule);\n    if (result === null) {\n      if (message === null) {\n        message = rule.name;\n      }\n\n      let butSaw: string;\n      const lineRemainder: string = this.LineRemainder();\n      if (lineRemainder === null || lineRemainder.length === 0) {\n        butSaw = \"end of line\";\n      } else {\n        butSaw = `'${lineRemainder}'`;\n      }\n\n      this.Error(`Expected ${message} but saw ${butSaw}`);\n\n      if (recoveryRule !== null) {\n        result = recoveryRule();\n      }\n    }\n\n    return result;\n  };\n\n  public Error = (message: string, isWarning: boolean = false): void => {\n    this.ErrorOnLine(message, this.lineIndex + 1, isWarning);\n  };\n\n  public readonly ErrorWithParsedObject = (\n    message: string,\n    result: ParsedObject,\n    isWarning: boolean = false\n  ): void => {\n    this.ErrorOnLine(\n      message,\n      result.debugMetadata ? result.debugMetadata.startLineNumber : -1,\n      isWarning\n    );\n  };\n\n  public readonly ErrorOnLine = (\n    message: string,\n    lineNumber: number,\n    isWarning: boolean\n  ): void => {\n    if (!this.state.errorReportedAlreadyInScope) {\n      const errorType = isWarning ? \"Warning\" : \"Error\";\n\n      if (!this.errorHandler) {\n        throw new Error(`${errorType} on line ${lineNumber}: ${message}`);\n      } else {\n        this.errorHandler(message, this.index, lineNumber - 1, isWarning);\n      }\n\n      this.state.NoteErrorReported();\n    }\n\n    if (!isWarning) {\n      this.hadError = true;\n    }\n  };\n\n  public readonly Warning = (message: string): void =>\n    this.Error(message, true);\n\n  get endOfInput(): boolean {\n    return this.index >= this._chars.length;\n  }\n\n  get remainingString(): string {\n    return this._chars\n      .slice(this.index, this.index + this.remainingLength)\n      .join(\"\");\n  }\n\n  public readonly LineRemainder = (): string =>\n    this.Peek(() => this.ParseUntilCharactersFromString(\"\\n\\r\")) as string;\n\n  get remainingLength() {\n    return this._chars.length - this.index;\n  }\n\n  public inputString: string;\n\n  get lineIndex() {\n    return this.state.lineIndex;\n  }\n\n  set lineIndex(value: number) {\n    this.state.lineIndex = value;\n  }\n\n  set characterInLineIndex(value: number) {\n    this.state.characterInLineIndex = value;\n  }\n\n  get characterInLineIndex() {\n    return this.state.characterInLineIndex;\n  }\n\n  get index(): number {\n    // If we want subclass parsers to be able to set the index directly,\n    // then we would need to know what the lineIndex of the new\n    // index would be - would we have to step through manually\n    // counting the newlines to do so?\n    return this.state.characterIndex;\n  }\n\n  set index(value: number) {\n    this.state.characterIndex = value;\n  }\n\n  public readonly SetFlag = (flag: number, trueOrFalse: boolean): void => {\n    if (trueOrFalse) {\n      this.state.customFlags |= flag;\n    } else {\n      this.state.customFlags &= ~flag;\n    }\n  };\n\n  public readonly GetFlag = (flag: number): boolean =>\n    Boolean(this.state.customFlags & flag);\n\n  //--------------------------------\n  // Structuring\n  //--------------------------------\n\n  public ParseObject = (rule: ParseRule): ParseRuleReturn => {\n    const ruleId: number = this.BeginRule();\n    const stackHeightBefore = this.state.stackHeight;\n    const result = rule();\n\n    if (stackHeightBefore !== this.state.stackHeight) {\n      throw new Error(\"Mismatched Begin/Fail/Succeed rules\");\n    }\n\n    if (result === null) {\n      return this.FailRule(ruleId);\n    }\n\n    this.SucceedRule(ruleId, result);\n\n    return result;\n  };\n\n  public readonly Parse = <T extends ParseRule>(\n    rule: SpecificParseRule<T>\n  ): ParseRuleReturn => {\n    const ruleId: number = this.BeginRule();\n\n    const result: ParseRuleReturn = rule();\n    if (result === null) {\n      this.FailRule(ruleId);\n      return null;\n    }\n\n    this.SucceedRule(ruleId, result);\n\n    return result;\n  };\n\n  public readonly OneOf = (array: ParseRule[]): ParseRuleReturn => {\n    for (const rule of array) {\n      const result = this.ParseObject(rule);\n      if (result !== null) {\n        return result;\n      }\n    }\n\n    return null;\n  };\n\n  public readonly OneOrMore = (rule: ParseRule): ParseRuleReturn[] | null => {\n    const results: ParseRuleReturn[] = [];\n    let result: ParseRuleReturn = null;\n\n    do {\n      result = this.ParseObject(rule);\n      if (result !== null) {\n        results.push(result);\n      }\n    } while (result !== null);\n\n    if (results.length > 0) {\n      return results;\n    }\n\n    return null;\n  };\n\n  public readonly Optional =\n    (rule: ParseRule): ParseRule =>\n    () => {\n      const result = this.ParseObject(rule);\n      if (result === null) return StringParser.ParseSuccess;\n      return result;\n    };\n\n  // Return ParseSuccess instead the real result so that it gets excluded\n  // from result arrays (e.g. Interleave)\n  public readonly Exclude =\n    (rule: ParseRule): ParseRule =>\n    () =>\n      this.ParseObject(rule) && StringParser.ParseSuccess;\n\n  // Combination of both of the above\n  public readonly OptionalExclude =\n    (rule: ParseRule): ParseRule =>\n    () => {\n      this.ParseObject(rule);\n      return StringParser.ParseSuccess;\n    };\n\n  // Convenience method for creating more readable ParseString rules that can be combined\n  // in other structuring rules (like OneOf etc)\n  // e.g. OneOf(String(\"one\"), String(\"two\"))\n  public readonly String =\n    (str: string): ParseRule =>\n    () =>\n      this.ParseString(str);\n\n  private readonly TryAddResultToList = <T>(\n    result: ParseRuleReturn,\n    list: T[],\n    flatten: boolean = true\n  ): void => {\n    if (result === StringParser.ParseSuccess) {\n      return;\n    }\n\n    if (flatten && Array.isArray(result)) {\n      const resultCollection = result as ParseRuleReturn[];\n      if (resultCollection !== null) {\n        for (const obj of resultCollection) {\n          list.push(obj as any);\n        }\n\n        return;\n      }\n    }\n\n    list.push(result as any);\n  };\n\n  public readonly Interleave = <T>(\n    ruleA: ParseRule,\n    ruleB: ParseRule,\n    untilTerminator: ParseRule | null = null,\n    flatten: boolean = true\n  ): T[] => {\n    const ruleId: number = this.BeginRule();\n    const results: T[] = [];\n\n    // First outer padding\n    const firstA = this.ParseObject(ruleA);\n    if (firstA === null) {\n      return this.FailRule(ruleId) as any;\n    } else {\n      this.TryAddResultToList(firstA, results, flatten);\n    }\n\n    let lastMainResult: ParseRuleReturn | null = null;\n    let outerResult: ParseRuleReturn | null = null;\n    do {\n      // \"until\" condition hit?\n      if (untilTerminator !== null && this.Peek(untilTerminator) !== null) {\n        break;\n      }\n\n      // Main inner\n      lastMainResult = this.ParseObject(ruleB);\n      if (lastMainResult === null) {\n        break;\n      } else {\n        this.TryAddResultToList(lastMainResult, results, flatten);\n      }\n\n      // Outer result (i.e. last A in ABA)\n      outerResult = null;\n      if (lastMainResult !== null) {\n        outerResult = this.ParseObject(ruleA);\n\n        if (outerResult === null) {\n          break;\n        } else {\n          this.TryAddResultToList(outerResult, results, flatten);\n        }\n      }\n\n      // Stop if there are no results, or if both are the placeholder \"ParseSuccess\" (i.e. Optional success rather than a true value)\n    } while (\n      (lastMainResult !== null || outerResult !== null) &&\n      !(\n        (lastMainResult as any) === StringParser.ParseSuccess &&\n        outerResult == StringParser.ParseSuccess\n      ) &&\n      this.remainingLength > 0\n    );\n\n    if (results.length === 0) {\n      return this.FailRule(ruleId) as T[];\n    }\n\n    return this.SucceedRule(ruleId, results) as T[];\n  };\n\n  //--------------------------------\n  // Basic string parsing\n  //--------------------------------\n\n  public readonly ParseString = (str: string): string | null => {\n    if (str.length > this.remainingLength) {\n      return null;\n    }\n\n    const ruleId: number = this.BeginRule();\n\n    // Optimisation from profiling:\n    // Store in temporary local variables\n    // since they're properties that would have to access\n    // the rule stack every time otherwise.\n    let i: number = this.index;\n    let cli: number = this.characterInLineIndex;\n    let li: number = this.lineIndex;\n\n    let success: boolean = true;\n    for (let tempIdx = 0; tempIdx < str.length; tempIdx += 1) {\n      const c = str[tempIdx];\n\n      if (this._chars[i] !== c) {\n        success = false;\n        break;\n      }\n      if (c === \"\\n\") {\n        li++;\n        cli = -1;\n      }\n\n      i++;\n      cli++;\n    }\n\n    this.index = i;\n    this.characterInLineIndex = cli;\n    this.lineIndex = li;\n\n    if (success) {\n      return this.SucceedRule(ruleId, str) as any;\n    }\n\n    return this.FailRule(ruleId) as any;\n  };\n\n  public readonly ParseSingleCharacter = (): string => {\n    if (this.remainingLength > 0) {\n      const c = this._chars[this.index];\n      if (c === \"\\n\") {\n        this.lineIndex += 1;\n        this.characterInLineIndex = -1;\n      }\n\n      this.index += 1;\n      this.characterInLineIndex += 1;\n\n      return c;\n    }\n\n    return \"0\";\n  };\n\n  public readonly ParseUntilCharactersFromString = (\n    str: string,\n    maxCount: number = -1\n  ): string | null => this.ParseCharactersFromString(str, false, maxCount);\n\n  public readonly ParseUntilCharactersFromCharSet = (\n    charSet: CharacterSet,\n    maxCount: number = -1\n  ): string | null => this.ParseCharactersFromCharSet(charSet, false, maxCount);\n\n  public readonly ParseCharactersFromString = (\n    str: string,\n    maxCountOrShouldIncludeStrChars: boolean | number = -1,\n    maxCount: number = -1\n  ): string | null => {\n    const charSet = new CharacterSet(str);\n    if (typeof maxCountOrShouldIncludeStrChars === \"number\") {\n      return this.ParseCharactersFromCharSet(\n        charSet,\n        true,\n        maxCountOrShouldIncludeStrChars\n      );\n    }\n\n    return this.ParseCharactersFromCharSet(\n      charSet,\n      maxCountOrShouldIncludeStrChars,\n      maxCount\n    );\n  };\n\n  public readonly ParseCharactersFromCharSet = (\n    charSet: CharacterSet,\n    shouldIncludeChars: boolean = true,\n    maxCount: number = -1\n  ): string | null => {\n    if (maxCount === -1) {\n      maxCount = Number.MAX_SAFE_INTEGER;\n    }\n\n    const startIndex: number = this.index;\n\n    // Optimisation from profiling:\n    // Store in temporary local variables\n    // since they're properties that would have to access\n    // the rule stack every time otherwise.\n    let ii: number = this.index;\n    let cli: number = this.characterInLineIndex;\n    let li: number = this.lineIndex;\n    let count: number = 0;\n    while (\n      ii < this._chars.length &&\n      charSet.set.has(this._chars[ii]) === shouldIncludeChars &&\n      count < maxCount\n    ) {\n      if (this._chars[ii] === \"\\n\") {\n        li += 1;\n        cli = -1;\n      }\n\n      ii += 1;\n      cli += 1;\n      count += 1;\n    }\n\n    this.index = ii;\n    this.characterInLineIndex = cli;\n    this.lineIndex = li;\n\n    const lastCharIndex: number = this.index;\n    if (lastCharIndex > startIndex) {\n      return this._chars.slice(startIndex, this.index).join(\"\");\n    }\n\n    return null;\n  };\n\n  public readonly Peek = (rule: ParseRule): ParseRuleReturn => {\n    const ruleId: number = this.BeginRule();\n    const result: ParseRuleReturn = rule();\n    this.CancelRule(ruleId);\n\n    return result;\n  };\n\n  public ParseUntil(\n    stopRule: ParseRule,\n    pauseCharacters: CharacterSet | null = null,\n    endCharacters: CharacterSet | null = null\n  ): string {\n    const ruleId: number = this.BeginRule();\n    const pauseAndEnd: CharacterSet = new CharacterSet();\n    if (pauseCharacters !== null) {\n      pauseAndEnd.set = new Set([\n        ...pauseAndEnd.set.values(),\n        ...pauseCharacters.set.values(),\n      ]);\n    }\n\n    if (endCharacters !== null) {\n      pauseAndEnd.set = new Set([\n        ...pauseAndEnd.set.values(),\n        ...endCharacters.set.values(),\n      ]);\n    }\n\n    let parsedString = \"\";\n    let ruleResultAtPause: ParseRuleReturn | null = null;\n\n    // Keep attempting to parse strings up to the pause (and end) points.\n    //  - At each of the pause points, attempt to parse according to the rule\n    //  - When the end point is reached (or EOF), we're done\n    do {\n      // TODO: Perhaps if no pause or end characters are passed, we should check *every* character for stopRule?\n      const partialParsedString: string | null =\n        this.ParseUntilCharactersFromCharSet(pauseAndEnd);\n\n      if (partialParsedString) {\n        parsedString += partialParsedString;\n      }\n\n      // Attempt to run the parse rule at this pause point\n      ruleResultAtPause = this.Peek(stopRule);\n\n      // Rule completed - we're done\n      if (ruleResultAtPause !== null) {\n        break;\n      } else {\n        if (this.endOfInput) {\n          break;\n        }\n\n        // Reached a pause point, but rule failed. Step past and continue parsing string\n        const pauseCharacter: string = this.currentCharacter;\n        if (\n          pauseCharacters !== null &&\n          pauseCharacters.set.has(pauseCharacter)\n        ) {\n          parsedString += pauseCharacter;\n          if (pauseCharacter === \"\\n\") {\n            this.lineIndex += 1;\n            this.characterInLineIndex = -1;\n          }\n\n          this.index += 1;\n          this.characterInLineIndex += 1;\n\n          continue;\n        } else {\n          break;\n        }\n      }\n    } while (true);\n\n    if (parsedString.length > 0) {\n      return this.SucceedRule(ruleId, String(parsedString)) as string;\n    }\n\n    return this.FailRule(ruleId) as string;\n  }\n\n  // No need to Begin/End rule since we never parse a newline, so keeping oldIndex is good enough\n  public readonly ParseInt = (): number | null => {\n    const oldIndex: number = this.index;\n    const oldCharacterInLineIndex: number = this.characterInLineIndex;\n    const negative: boolean = this.ParseString(\"-\") !== null;\n\n    // Optional whitespace\n    this.ParseCharactersFromString(\" \\t\");\n\n    const parsedString = this.ParseCharactersFromCharSet(\n      StringParser.numbersCharacterSet\n    );\n    if (parsedString === null) {\n      // Roll back and fail\n      this.index = oldIndex;\n      this.characterInLineIndex = oldCharacterInLineIndex;\n\n      return null;\n    }\n\n    let parsedInt: number;\n    if (!Number.isNaN(Number(parsedString))) {\n      parsedInt = Number(parsedString);\n      return negative ? -parsedInt : parsedInt;\n    }\n\n    this.Error(\n      \"Failed to read integer value: \" +\n        parsedString +\n        \". Perhaps it's out of the range of acceptable numbers ink supports? (\" +\n        Number.MIN_SAFE_INTEGER +\n        \" to \" +\n        Number.MAX_SAFE_INTEGER +\n        \")\"\n    );\n\n    return null;\n  };\n\n  // No need to Begin/End rule since we never parse a newline, so keeping oldIndex is good enough\n  public readonly ParseFloat = (): number | null => {\n    const oldIndex: number = this.index;\n    const oldCharacterInLineIndex: number = this.characterInLineIndex;\n\n    const leadingInt: number | null = this.ParseInt();\n    if (leadingInt !== null) {\n      if (this.ParseString(\".\") !== null) {\n        const afterDecimalPointStr = this.ParseCharactersFromCharSet(\n          StringParser.numbersCharacterSet\n        );\n\n        return Number(`${leadingInt}.${afterDecimalPointStr}`);\n      }\n    }\n\n    // Roll back and fail\n    this.index = oldIndex;\n    this.characterInLineIndex = oldCharacterInLineIndex;\n\n    return null;\n  };\n\n  public readonly ParseNewline = (): string => {\n    const ruleId: number = this.BeginRule();\n\n    // Optional \\r, definite \\n to support Windows (\\r\\n) and Mac/Unix (\\n)\n    // 2nd May 2016: Always collapse \\r\\n to just \\n\n    this.ParseString(\"\\r\");\n\n    if (this.ParseString(\"\\n\") === null) {\n      return this.FailRule(ruleId) as string;\n    }\n\n    return this.SucceedRule(ruleId, \"\\n\") as string;\n  };\n}\n","import { CharacterSet } from \"./CharacterSet\";\nimport { StringParser } from \"./StringParser/StringParser\";\n\n/// <summary>\n/// Pre-pass before main ink parser runs. It actually performs two main tasks:\n///  - comment elimination to simplify the parse rules in the main parser\n///  - Conversion of Windows line endings (\\r\\n) to the simpler Unix style (\\n), so\n///    we don't have to worry about them later.\n/// </summary>\nexport class CommentEliminator extends StringParser {\n  public _commentOrNewlineStartCharacter = new CharacterSet(\"/\\r\\n\");\n  public _commentBlockEndCharacter = new CharacterSet(\"*\");\n  public _newlineCharacters = new CharacterSet(\"\\n\\r\");\n\n  public readonly Process = (): string => {\n    // Make both comments and non-comments optional to handle trivial empty file case (or *only* comments)\n    const stringList: string[] = this.Interleave<string>(\n      this.Optional(this.CommentsAndNewlines),\n      this.Optional(this.MainInk)\n    );\n\n    if (stringList !== null) {\n      return stringList.join(\"\");\n    } else {\n      return \"\";\n    }\n  };\n\n  public readonly MainInk = () =>\n    this.ParseUntil(\n      this.CommentsAndNewlines,\n      this._commentOrNewlineStartCharacter,\n      null\n    );\n\n  public readonly CommentsAndNewlines = () => {\n    let newLines: string[] = this.Interleave<string>(\n      this.Optional(this.ParseNewline),\n      this.Optional(this.ParseSingleComment)\n    );\n\n    if (newLines !== null) {\n      return newLines.join(\"\");\n    }\n\n    return null;\n  };\n\n  // Valid comments always return either an empty string or pure newlines,\n  // which we want to keep so that line numbers stay the same\n  public readonly ParseSingleComment = () =>\n    this.OneOf([this.EndOfLineComment, this.BlockComment]);\n\n  public readonly EndOfLineComment = () => {\n    if (this.ParseString(\"//\") === null) {\n      return null;\n    }\n\n    this.ParseUntilCharactersFromCharSet(this._newlineCharacters);\n\n    return \"\";\n  };\n\n  public readonly BlockComment = () => {\n    if (this.ParseString(\"/*\") === null) {\n      return null;\n    }\n\n    const startLineIndex: number = this.lineIndex;\n    const commentResult = this.ParseUntil(\n      this.String(\"*/\"),\n      this._commentBlockEndCharacter,\n      null\n    );\n\n    if (!this.endOfInput) {\n      this.ParseString(\"*/\");\n    }\n\n    // Count the number of lines that were inside the block, and replicate them as newlines\n    // so that the line indexing still works from the original source\n    if (commentResult != null) {\n      return \"\\n\".repeat(this.lineIndex - startLineIndex);\n    }\n\n    // No comment at all\n    return null;\n  };\n\n  public PreProcessInputString(str: string): string {\n    return str;\n  }\n}\n","import { ConditionalSingleBranch } from \"./ConditionalSingleBranch\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Expression } from \"../Expression/Expression\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\n\nexport class Conditional extends ParsedObject {\n  private _reJoinTarget: RuntimeControlCommand | null = null;\n\n  constructor(\n    public initialCondition: Expression,\n    public branches: ConditionalSingleBranch[]\n  ) {\n    super();\n\n    if (this.initialCondition) {\n      this.AddContent(this.initialCondition);\n    }\n\n    if (this.branches !== null) {\n      this.AddContent(this.branches);\n    }\n  }\n\n  get typeName(): string {\n    return \"Conditional\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n\n    // Initial condition\n    if (this.initialCondition) {\n      container.AddContent(this.initialCondition.runtimeObject);\n    }\n\n    // Individual branches\n    for (const branch of this.branches) {\n      const branchContainer = branch.runtimeObject;\n      container.AddContent(branchContainer);\n    }\n\n    // If it's a switch-like conditional, each branch\n    // will have a \"duplicate\" operation for the original\n    // switched value. If there's no final else clause\n    // and we fall all the way through, we need to clean up.\n    // (An else clause doesn't dup but it *does* pop)\n    if (\n      this.initialCondition !== null &&\n      this.branches[0].ownExpression !== null &&\n      !this.branches[this.branches.length - 1].isElse\n    ) {\n      container.AddContent(RuntimeControlCommand.PopEvaluatedValue());\n    }\n\n    // Target for branches to rejoin to\n    this._reJoinTarget = RuntimeControlCommand.NoOp();\n    container.AddContent(this._reJoinTarget);\n\n    return container;\n  };\n\n  public ResolveReferences(context: Story): void {\n    const pathToReJoin = this._reJoinTarget!.path;\n\n    for (const branch of this.branches) {\n      if (!branch.returnDivert) {\n        throw new Error();\n      }\n\n      branch.returnDivert.targetPath = pathToReJoin;\n    }\n\n    super.ResolveReferences(context);\n  }\n}\n","﻿import { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { StringValue } from \"../../../engine/Value\";\n\nexport class Text extends ParsedObject {\n  constructor(public text: string) {\n    super();\n  }\n  get typeName(): string {\n    return \"Text\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject =>\n    new StringValue(this.text);\n\n  public readonly toString = (): string => this.text;\n}\n","import { Expression } from \"../Expression/Expression\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { Identifier } from \"../Identifier\";\n\nexport class ConstantDeclaration extends ParsedObject {\n  get constantName(): string | undefined {\n    return this.constantIdentifier?.name;\n  }\n  public constantIdentifier: Identifier;\n\n  private _expression: Expression | null = null;\n\n  get expression(): Expression {\n    if (!this._expression) {\n      throw new Error();\n    }\n\n    return this._expression;\n  }\n\n  constructor(name: Identifier, assignedExpression: Expression) {\n    super();\n\n    this.constantIdentifier = name;\n\n    // Defensive programming in case parsing of assignedExpression failed\n    if (assignedExpression) {\n      this._expression = this.AddContent(assignedExpression) as Expression;\n    }\n  }\n\n  get typeName(): string {\n    return \"CONST\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject | null => {\n    // Global declarations don't generate actual procedural\n    // runtime objects, but instead add a global variable to the story itself.\n    // The story then initialises them all in one go at the start of the game.\n    return null;\n  };\n\n  public ResolveReferences(context: Story) {\n    super.ResolveReferences(context);\n    context.CheckForNamingCollisions(\n      this,\n      this.constantIdentifier,\n      SymbolType.Var\n    );\n  }\n}\n","export enum FlowLevel {\n  Story, // 0\n  Knot, // 1\n  Stitch, // 2\n  // not actually a FlowBase, but used for diverts\n  WeavePoint, // 3\n}\n","export enum SequenceType {\n  Stopping = 1, // default\n  Cycle = 2,\n  Shuffle = 4,\n  Once = 8,\n}\n","export enum CustomFlags {\n  ParsingString = 0x1,\n  TagActive = 0x2,\n}\n","export enum StatementLevel {\n  InnerBlock,\n  Stitch,\n  Knot,\n  Top,\n}\n","// TODO: Unify with Compiler.\n\nexport type ErrorHandler = (message: string, type: ErrorType) => void;\n\nexport enum ErrorType {\n  Author,\n  Warning,\n  Error,\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { INamedContent } from \"../../../../engine/INamedContent\";\nimport { IWeavePoint } from \"../IWeavePoint\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { Identifier } from \"../Identifier\";\n\nexport class Gather extends ParsedObject implements INamedContent, IWeavePoint {\n  get name(): string | null {\n    return this.identifier?.name || null;\n  }\n  public identifier?: Identifier;\n\n  get runtimeContainer(): RuntimeContainer {\n    return this.runtimeObject as RuntimeContainer;\n  }\n\n  constructor(\n    identifier: Identifier | null,\n    public readonly indentationDepth: number\n  ) {\n    super();\n\n    if (identifier) this.identifier = identifier;\n  }\n\n  get typeName(): string {\n    return \"Gather\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n    container.name = this.name;\n\n    if (this.story.countAllVisits) {\n      container.visitsShouldBeCounted = true;\n    }\n\n    container.countingAtStartOnly = true;\n\n    // A gather can have null content, e.g. it's just purely a line with \"-\"\n    if (this.content) {\n      for (const c of this.content) {\n        container.AddContent(c.runtimeObject);\n      }\n    }\n\n    return container;\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    if (this.identifier && (this.identifier.name || \"\").length > 0) {\n      context.CheckForNamingCollisions(\n        this,\n        this.identifier,\n        SymbolType.SubFlowAndWeave\n      );\n    }\n  }\n\n  public readonly toString = (): string =>\n    `- ${this.identifier?.name ? \"(\" + this.identifier?.name + \")\" : \"gather\"}`;\n}\n","import { asOrNull, filterUndef } from \"../../../engine/TypeAssertion\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { FlowLevel } from \"./Flow/FlowLevel\";\nimport { Identifier } from \"./Identifier\";\nimport { ParsedObject } from \"./Object\";\nimport { Weave } from \"./Weave\";\n\nexport class Path {\n  private _baseTargetLevel: FlowLevel | null;\n  private components: Identifier[] | null;\n\n  get baseTargetLevel() {\n    if (this.baseLevelIsAmbiguous) {\n      return FlowLevel.Story;\n    }\n\n    return this._baseTargetLevel;\n  }\n\n  get baseLevelIsAmbiguous(): boolean {\n    return !this._baseTargetLevel;\n  }\n\n  get firstComponent(): string | null {\n    if (this.components == null || !this.components.length) {\n      return null;\n    }\n\n    return this.components[0].name;\n  }\n\n  get numberOfComponents(): number {\n    return this.components ? this.components.length : 0;\n  }\n\n  private _dotSeparatedComponents: string | null = null;\n\n  get dotSeparatedComponents(): string {\n    if (this._dotSeparatedComponents == null) {\n      this._dotSeparatedComponents = (this.components ? this.components : [])\n        .map((c) => c.name)\n        .filter(filterUndef)\n        .join(\".\");\n    }\n    return this._dotSeparatedComponents;\n  }\n\n  constructor(\n    argOne: FlowLevel | Identifier[] | Identifier,\n    argTwo?: Identifier[]\n  ) {\n    if (Object.values(FlowLevel).includes(argOne as FlowLevel)) {\n      this._baseTargetLevel = argOne as FlowLevel;\n      this.components = argTwo || [];\n    } else if (Array.isArray(argOne)) {\n      this._baseTargetLevel = null;\n      this.components = argOne || [];\n    } else {\n      this._baseTargetLevel = null;\n      this.components = [argOne as Identifier];\n    }\n  }\n\n  get typeName(): string {\n    return \"Path\";\n  }\n\n  public readonly toString = (): string => {\n    if (this.components === null || this.components.length === 0) {\n      if (this.baseTargetLevel === FlowLevel.WeavePoint) {\n        return \"-> <next gather point>\";\n      }\n\n      return \"<invalid Path>\";\n    }\n\n    return `-> ${this.dotSeparatedComponents}`;\n  };\n\n  public readonly ResolveFromContext = (\n    context: ParsedObject\n  ): ParsedObject | null => {\n    if (this.components == null || this.components.length == 0) {\n      return null;\n    }\n\n    // Find base target of path from current context. e.g.\n    //   ==> BASE.sub.sub\n    let baseTargetObject = this.ResolveBaseTarget(context);\n    if (baseTargetObject === null) {\n      return null;\n    }\n\n    // Given base of path, resolve final target by working deeper into hierarchy\n    //  e.g. ==> base.mid.FINAL\n    if (this.components.length > 1) {\n      return this.ResolveTailComponents(baseTargetObject);\n    }\n\n    return baseTargetObject;\n  };\n\n  // Find the root object from the base, i.e. root from:\n  //    root.sub1.sub2\n  public readonly ResolveBaseTarget = (\n    originalContext: ParsedObject\n  ): ParsedObject | null => {\n    const firstComp = this.firstComponent;\n\n    // Work up the ancestry to find the node that has the named object\n    let ancestorContext: ParsedObject | null = originalContext;\n    while (ancestorContext) {\n      // Only allow deep search when searching deeper from original context.\n      // Don't allow search upward *then* downward, since that's searching *everywhere*!\n      // Allowed examples:\n      //  - From an inner gather of a stitch, you should search up to find a knot called 'x'\n      //    at the root of a story, but not a stitch called 'x' in that knot.\n      //  - However, from within a knot, you should be able to find a gather/choice\n      //    anywhere called 'x'\n      // (that latter example is quite loose, but we allow it)\n      const deepSearch: boolean = ancestorContext === originalContext;\n\n      const foundBase = this.GetChildFromContext(\n        ancestorContext,\n        firstComp,\n        null,\n        deepSearch\n      );\n\n      if (foundBase) {\n        return foundBase;\n      }\n\n      ancestorContext = ancestorContext.parent;\n    }\n\n    return null;\n  };\n\n  // Find the final child from path given root, i.e.:\n  //   root.sub.finalChild\n  public readonly ResolveTailComponents = (\n    rootTarget: ParsedObject\n  ): ParsedObject | null => {\n    let foundComponent: ParsedObject | null = rootTarget;\n\n    if (!this.components) return null;\n\n    for (let ii = 1; ii < this.components.length; ++ii) {\n      const compName = this.components[ii].name;\n\n      let minimumExpectedLevel: FlowLevel;\n      let foundFlow = asOrNull(foundComponent, FlowBase);\n      if (foundFlow !== null) {\n        minimumExpectedLevel = (foundFlow.flowLevel + 1) as FlowLevel;\n      } else {\n        minimumExpectedLevel = FlowLevel.WeavePoint;\n      }\n\n      foundComponent = this.GetChildFromContext(\n        foundComponent,\n        compName,\n        minimumExpectedLevel\n      );\n\n      if (foundComponent === null) {\n        break;\n      }\n    }\n\n    return foundComponent;\n  };\n\n  // See whether \"context\" contains a child with a given name at a given flow level\n  // Can either be a named knot/stitch (a FlowBase) or a weave point within a Weave (Choice or Gather)\n  // This function also ignores any other object types that are neither FlowBase nor Weave.\n  // Called from both ResolveBase (force deep) and ResolveTail for the individual components.\n  public readonly GetChildFromContext = (\n    context: ParsedObject,\n    childName: string | null,\n    minimumLevel: FlowLevel | null,\n    forceDeepSearch: boolean = false\n  ): ParsedObject | null => {\n    // null childLevel means that we don't know where to find it\n    const ambiguousChildLevel: boolean = minimumLevel === null;\n\n    // Search for WeavePoint within Weave\n    const weaveContext = asOrNull(context, Weave);\n    if (\n      childName &&\n      weaveContext !== null &&\n      (ambiguousChildLevel || minimumLevel === FlowLevel.WeavePoint)\n    ) {\n      return weaveContext.WeavePointNamed(childName) as ParsedObject;\n    }\n\n    // Search for content within Flow (either a sub-Flow or a WeavePoint)\n    let flowContext = asOrNull(context, FlowBase);\n    if (childName && flowContext !== null) {\n      // When searching within a Knot, allow a deep searches so that\n      // named weave points (choices and gathers) can be found within any stitch\n      // Otherwise, we just search within the immediate object.\n      const shouldDeepSearch =\n        forceDeepSearch || flowContext.flowLevel === FlowLevel.Knot;\n\n      return flowContext.ContentWithNameAtLevel(\n        childName,\n        minimumLevel,\n        shouldDeepSearch\n      );\n    }\n\n    return null;\n  };\n}\n","import { Expression } from \"./Expression/Expression\";\nimport { ParsedObject } from \"./Object\";\nimport { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Void } from \"../../../engine/Void\";\n\nexport class ReturnType extends ParsedObject {\n  public returnedExpression: Expression | null = null;\n\n  constructor(returnedExpression: Expression | null = null) {\n    super();\n\n    if (returnedExpression) {\n      this.returnedExpression = this.AddContent(\n        returnedExpression\n      ) as Expression;\n    }\n  }\n\n  get typeName(): string {\n    return \"ReturnType\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n\n    if (this.returnedExpression) {\n      // Evaluate expression\n      container.AddContent(this.returnedExpression.runtimeObject);\n    } else {\n      // Return Runtime.Void when there's no expression to evaluate\n      // (This evaluation will just add the Void object to the evaluation stack)\n      container.AddContent(RuntimeControlCommand.EvalStart());\n      container.AddContent(new Void());\n      container.AddContent(RuntimeControlCommand.EvalEnd());\n    }\n\n    // Then pop the call stack\n    // (the evaluated expression will leave the return value on the evaluation stack)\n    container.AddContent(RuntimeControlCommand.PopFunction());\n\n    return container;\n  };\n}\n","// import { FlowBase } from './FlowBase';\n\nexport function ClosestFlowBase(obj: any): any | null {\n  let ancestor = obj.parent;\n  while (ancestor) {\n    if (ancestor.hasOwnProperty(\"iamFlowbase\") && ancestor.iamFlowbase()) {\n      return ancestor as any;\n    }\n\n    ancestor = ancestor.parent;\n  }\n\n  return null;\n}\n","import { DebugMetadata } from \"../../../engine/DebugMetadata\";\n\nexport class Identifier {\n  public name: string;\n  public debugMetadata: DebugMetadata | null = null;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  get typeName(): string {\n    return \"Identifier\";\n  }\n\n  public static Done(): Identifier {\n    return new Identifier(\"DONE\");\n  }\n\n  public readonly toString = (): string => this.name || \"undefined identifer\";\n}\n","import { Argument } from \"../Argument\";\nimport { Choice } from \"../Choice\";\nimport { Divert } from \"../Divert/Divert\";\nimport { DivertTarget } from \"../Divert/DivertTarget\";\nimport { FlowLevel } from \"./FlowLevel\";\nimport { Gather } from \"../Gather/Gather\";\nimport { INamedContent } from \"../../../../engine/INamedContent\";\n// import { Knot } from '../Knot';\nimport { ParsedObject } from \"../Object\";\nimport { Path } from \"../Path\";\nimport { ReturnType } from \"../ReturnType\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../../engine/VariableAssignment\";\n//import { Story } from '../Story';\nimport { SymbolType } from \"../SymbolType\";\nimport { VariableAssignment } from \"../Variable/VariableAssignment\";\nimport { Weave } from \"../Weave\";\nimport { ClosestFlowBase } from \"./ClosestFlowBase\";\nimport { Identifier } from \"../Identifier\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\ntype VariableResolveResult = {\n  found: boolean;\n  isGlobal: boolean;\n  isArgument: boolean;\n  isTemporary: boolean;\n  ownerFlow: FlowBase;\n};\n\n// Base class for Knots and Stitches\nexport abstract class FlowBase extends ParsedObject implements INamedContent {\n  public abstract readonly flowLevel: FlowLevel;\n\n  public _rootWeave: Weave | null = null;\n  public _subFlowsByName: Map<string, FlowBase> = new Map();\n  public _startingSubFlowDivert: RuntimeDivert | null = null;\n  public _startingSubFlowRuntime: RuntimeObject | null = null;\n  public _firstChildFlow: FlowBase | null = null;\n  public variableDeclarations: Map<string, VariableAssignment> = new Map();\n\n  get hasParameters() {\n    return this.args !== null && this.args.length > 0;\n  }\n\n  get subFlowsByName() {\n    return this._subFlowsByName;\n  }\n\n  get typeName(): string {\n    if (this.isFunction) {\n      return \"Function\";\n    }\n\n    return String(this.flowLevel);\n  }\n\n  get name(): string | null {\n    return this.identifier?.name || null;\n  }\n\n  public identifier: Identifier | null = null;\n  public args: Argument[] | null = null;\n\n  constructor(\n    identifier: Identifier | null,\n    topLevelObjects: ParsedObject[] | null = null,\n    args: Argument[] | null = null,\n    public readonly isFunction: boolean = false,\n    isIncludedStory: boolean = false\n  ) {\n    super();\n\n    this.identifier = identifier;\n    this.args = args;\n\n    if (topLevelObjects === null) {\n      topLevelObjects = [];\n    }\n\n    // Used by story to add includes\n    this.PreProcessTopLevelObjects(topLevelObjects);\n\n    topLevelObjects = this.SplitWeaveAndSubFlowContent(\n      topLevelObjects,\n      this.GetType() == \"Story\" && !isIncludedStory\n    );\n\n    this.AddContent(topLevelObjects);\n  }\n\n  public iamFlowbase = () => true;\n\n  public readonly SplitWeaveAndSubFlowContent = (\n    contentObjs: ParsedObject[],\n    isRootStory: boolean\n  ): ParsedObject[] => {\n    const weaveObjs: ParsedObject[] = [];\n    const subFlowObjs: ParsedObject[] = [];\n\n    this._subFlowsByName = new Map();\n\n    for (const obj of contentObjs) {\n      const subFlow = asOrNull(obj, FlowBase);\n      if (subFlow) {\n        if (this._firstChildFlow === null) {\n          this._firstChildFlow = subFlow;\n        }\n\n        subFlowObjs.push(obj);\n        if (subFlow.identifier?.name) {\n          this._subFlowsByName.set(subFlow.identifier?.name, subFlow);\n        }\n      } else {\n        weaveObjs.push(obj);\n      }\n    }\n\n    // Implicit final gather in top level story for ending without warning that you run out of content\n    if (isRootStory) {\n      weaveObjs.push(\n        new Gather(null, 1),\n        new Divert(new Path(Identifier.Done()))\n      );\n    }\n\n    const finalContent: ParsedObject[] = [];\n\n    if (weaveObjs.length > 0) {\n      this._rootWeave = new Weave(weaveObjs, 0);\n      finalContent.push(this._rootWeave);\n    }\n\n    if (subFlowObjs.length > 0) {\n      finalContent.push(...subFlowObjs);\n    }\n    return finalContent;\n  };\n\n  public PreProcessTopLevelObjects(_: ParsedObject[]): void {\n    // empty by default, used by Story to process included file references\n  }\n\n  public VariableResolveResult?: VariableResolveResult | null | undefined;\n\n  public ResolveVariableWithName = (\n    varName: string,\n    fromNode: ParsedObject\n  ): VariableResolveResult => {\n    const result: VariableResolveResult = {} as any;\n\n    // Search in the stitch / knot that owns the node first\n    const ownerFlow = fromNode === null ? this : ClosestFlowBase(fromNode);\n\n    if (ownerFlow) {\n      // Argument\n      if (ownerFlow.args !== null) {\n        for (const arg of ownerFlow.args) {\n          if (arg.identifier?.name === varName) {\n            result.found = true;\n            result.isArgument = true;\n            result.ownerFlow = ownerFlow;\n            return result;\n          }\n        }\n      }\n\n      // Temp\n      if (\n        ownerFlow !== this.story &&\n        ownerFlow.variableDeclarations.has(varName)\n      ) {\n        result.found = true;\n        result.ownerFlow = ownerFlow;\n        result.isTemporary = true;\n\n        return result;\n      }\n    }\n\n    // Global\n    if (this.story.variableDeclarations.has(varName)) {\n      result.found = true;\n      result.ownerFlow = this.story;\n      result.isGlobal = true;\n\n      return result;\n    }\n\n    result.found = false;\n\n    return result;\n  };\n\n  public AddNewVariableDeclaration = (varDecl: VariableAssignment): void => {\n    const varName = varDecl.variableName;\n    if (this.variableDeclarations.has(varName)) {\n      const varab = this.variableDeclarations.get(varName)!;\n      let prevDeclError = \"\";\n      const debugMetadata = varab.debugMetadata;\n      if (debugMetadata) {\n        prevDeclError = ` (${varab.debugMetadata})`;\n      }\n\n      this.Error(\n        `found declaration variable '${varName}' that was already declared${prevDeclError}`,\n        varDecl,\n        false\n      );\n\n      return;\n    }\n\n    this.variableDeclarations.set(varDecl.variableName, varDecl);\n  };\n\n  public ResolveWeavePointNaming = (): void => {\n    // Find all weave points and organise them by name ready for\n    // diverting. Also detect naming collisions.\n    if (this._rootWeave) {\n      this._rootWeave.ResolveWeavePointNaming();\n    }\n\n    for (const [, value] of this._subFlowsByName) {\n      if (value.hasOwnProperty(\"ResolveWeavePointNaming\")) {\n        value.ResolveWeavePointNaming();\n      }\n    }\n  };\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    let foundReturn: ReturnType | null = null;\n    if (this.isFunction) {\n      this.CheckForDisallowedFunctionFlowControl();\n    } else if (\n      this.flowLevel === FlowLevel.Knot ||\n      this.flowLevel === FlowLevel.Stitch\n    ) {\n      // Non-functon: Make sure knots and stitches don't attempt to use Return statement\n      foundReturn = this.Find(ReturnType)();\n\n      if (foundReturn !== null) {\n        this.Error(\n          `Return statements can only be used in knots that are declared as functions: == function ${this.identifier} ==`,\n          foundReturn\n        );\n      }\n    }\n\n    const container = new RuntimeContainer();\n    container.name = this.identifier?.name as string;\n\n    if (this.story.countAllVisits) {\n      container.visitsShouldBeCounted = true;\n    }\n\n    this.GenerateArgumentVariableAssignments(container);\n\n    // Run through content defined for this knot/stitch:\n    //  - First of all, any initial content before a sub-stitch\n    //    or any weave content is added to the main content container\n    //  - The first inner knot/stitch is automatically entered, while\n    //    the others are only accessible by an explicit divert\n    //       - The exception to this rule is if the knot/stitch takes\n    //         parameters, in which case it can't be auto-entered.\n    //  - Any Choices and Gathers (i.e. IWeavePoint) found are\n    //    processsed by GenerateFlowContent.\n    let contentIdx: number = 0;\n    while (this.content !== null && contentIdx < this.content.length) {\n      const obj: ParsedObject = this.content[contentIdx];\n\n      // Inner knots and stitches\n      if (obj instanceof FlowBase) {\n        const childFlow: FlowBase = obj;\n        const childFlowRuntime = childFlow.runtimeObject;\n\n        // First inner stitch - automatically step into it\n        // 20/09/2016 - let's not auto step into knots\n        if (\n          contentIdx === 0 &&\n          !childFlow.hasParameters &&\n          this.flowLevel === FlowLevel.Knot\n        ) {\n          this._startingSubFlowDivert = new RuntimeDivert();\n          container.AddContent(this._startingSubFlowDivert);\n          this._startingSubFlowRuntime = childFlowRuntime;\n        }\n\n        // Check for duplicate knots/stitches with same name\n        const namedChild = childFlowRuntime as RuntimeObject & INamedContent;\n        const existingChild: INamedContent | null =\n          container.namedContent.get(namedChild.name!) || null;\n\n        if (existingChild) {\n          const errorMsg = `${this.GetType()} already contains flow named '${\n            namedChild.name\n          }' (at ${(existingChild as any as RuntimeObject).debugMetadata})`;\n          this.Error(errorMsg, childFlow);\n        }\n\n        container.AddToNamedContentOnly(namedChild);\n      } else if (obj) {\n        // Other content (including entire Weaves that were grouped in the constructor)\n        // At the time of writing, all FlowBases have a maximum of one piece of \"other content\"\n        // and it's always the root Weave\n        container.AddContent(obj.runtimeObject);\n      }\n\n      contentIdx += 1;\n    }\n\n    // CHECK FOR FINAL LOOSE ENDS!\n    // Notes:\n    //  - Functions don't need to terminate - they just implicitly return\n    //  - If return statement was found, don't continue finding warnings for missing control flow,\n    // since it's likely that a return statement has been used instead of a ->-> or something,\n    // or the writer failed to mark the knot as a function.\n    //  - _rootWeave may be null if it's a knot that only has stitches\n    if (\n      this.flowLevel !== FlowLevel.Story &&\n      !this.isFunction &&\n      this._rootWeave !== null &&\n      foundReturn === null\n    ) {\n      this._rootWeave.ValidateTermination(this.WarningInTermination);\n    }\n\n    return container;\n  };\n\n  public readonly GenerateArgumentVariableAssignments = (\n    container: RuntimeContainer\n  ): void => {\n    if (this.args === null || this.args.length === 0) {\n      return;\n    }\n\n    // Assign parameters in reverse since they'll be popped off the evaluation stack\n    // No need to generate EvalStart and EvalEnd since there's nothing being pushed\n    // back onto the evaluation stack.\n    for (let ii = this.args.length - 1; ii >= 0; --ii) {\n      const paramName = this.args[ii].identifier?.name || null;\n      const assign = new RuntimeVariableAssignment(paramName, true);\n      container.AddContent(assign);\n    }\n  };\n\n  public readonly ContentWithNameAtLevel = (\n    name: string,\n    level: FlowLevel | null = null,\n    deepSearch: boolean = false\n  ): ParsedObject | null => {\n    // Referencing self?\n    if (level === this.flowLevel || level === null) {\n      if (name === this.identifier?.name) {\n        return this;\n      }\n    }\n\n    if (level === FlowLevel.WeavePoint || level === null) {\n      let weavePointResult: ParsedObject | null = null;\n\n      if (this._rootWeave) {\n        weavePointResult = this._rootWeave.WeavePointNamed(\n          name\n        ) as ParsedObject;\n        if (weavePointResult) {\n          return weavePointResult;\n        }\n      }\n\n      // Stop now if we only wanted a result if it's a weave point?\n      if (level === FlowLevel.WeavePoint) {\n        return deepSearch ? this.DeepSearchForAnyLevelContent(name) : null;\n      }\n    }\n\n    // If this flow would be incapable of containing the requested level, early out\n    // (e.g. asking for a Knot from a Stitch)\n    if (level !== null && level < this.flowLevel) {\n      return null;\n    }\n\n    let subFlow: FlowBase | null = this._subFlowsByName.get(name) || null;\n\n    if (subFlow && (level === null || level === subFlow.flowLevel)) {\n      return subFlow;\n    }\n\n    return deepSearch ? this.DeepSearchForAnyLevelContent(name) : null;\n  };\n\n  public readonly DeepSearchForAnyLevelContent = (name: string) => {\n    const weaveResultSelf = this.ContentWithNameAtLevel(\n      name,\n      FlowLevel.WeavePoint,\n      false\n    );\n\n    if (weaveResultSelf) {\n      return weaveResultSelf;\n    }\n\n    for (const [, value] of this._subFlowsByName) {\n      const deepResult = value.ContentWithNameAtLevel(name, null, true);\n\n      if (deepResult) {\n        return deepResult;\n      }\n    }\n\n    return null;\n  };\n\n  public ResolveReferences(context: any): void {\n    if (this._startingSubFlowDivert) {\n      if (!this._startingSubFlowRuntime) {\n        throw new Error();\n      }\n\n      this._startingSubFlowDivert.targetPath =\n        this._startingSubFlowRuntime.path;\n    }\n\n    super.ResolveReferences(context);\n\n    // Check validity of parameter names\n    if (this.args !== null) {\n      for (const arg of this.args) {\n        context.CheckForNamingCollisions(\n          this,\n          arg.identifier,\n          SymbolType.Arg,\n          \"argument\"\n        );\n      }\n\n      // Separately, check for duplicate arugment names, since they aren't Parsed.Objects,\n      // so have to be checked independently.\n      for (let ii = 0; ii < this.args.length; ii += 1) {\n        for (let jj = ii + 1; jj < this.args.length; jj += 1) {\n          if (\n            this.args[ii].identifier?.name == this.args[jj].identifier?.name\n          ) {\n            this.Error(\n              `Multiple arguments with the same name: '${this.args[ii].identifier}'`\n            );\n          }\n        }\n      }\n    }\n\n    // Check naming collisions for knots and stitches\n    if (this.flowLevel !== FlowLevel.Story) {\n      // Weave points aren't FlowBases, so this will only be knot or stitch\n      const symbolType =\n        this.flowLevel === FlowLevel.Knot\n          ? SymbolType.Knot\n          : SymbolType.SubFlowAndWeave;\n\n      context.CheckForNamingCollisions(this, this.identifier, symbolType);\n    }\n  }\n\n  public readonly CheckForDisallowedFunctionFlowControl = (): void => {\n    // if (!(this instanceof Knot)) { // cannont use Knot here because of circular dependancy\n    if (this.flowLevel !== FlowLevel.Knot) {\n      this.Error(\n        \"Functions cannot be stitches - i.e. they should be defined as '== function myFunc ==' rather than internal to another knot.\"\n      );\n    }\n\n    // Not allowed sub-flows\n    for (const [key, value] of this._subFlowsByName) {\n      this.Error(\n        `Functions may not contain stitches, but saw '${key}' within the function '${this.identifier}'`,\n        value\n      );\n    }\n\n    if (!this._rootWeave) {\n      throw new Error();\n    }\n\n    const allDiverts = this._rootWeave.FindAll<Divert>(Divert)();\n    for (const divert of allDiverts) {\n      if (!divert.isFunctionCall && !(divert.parent instanceof DivertTarget)) {\n        this.Error(\n          `Functions may not contain diverts, but saw '${divert}'`,\n          divert\n        );\n      }\n    }\n\n    const allChoices = this._rootWeave.FindAll<Choice>(Choice)();\n    for (const choice of allChoices) {\n      this.Error(\n        `Functions may not contain choices, but saw '${choice}'`,\n        choice\n      );\n    }\n  };\n\n  public readonly WarningInTermination = (terminatingObject: ParsedObject) => {\n    let message: string =\n      \"Apparent loose end exists where the flow runs out. Do you need a '-> DONE' statement, choice or divert?\";\n    if (terminatingObject.parent === this._rootWeave && this._firstChildFlow) {\n      message = `${message} Note that if you intend to enter '${this._firstChildFlow.identifier}' next, you need to divert to it explicitly.`;\n    }\n\n    const terminatingDivert = asOrNull(terminatingObject, Divert);\n    if (terminatingDivert && terminatingDivert.isTunnel) {\n      message += ` When final tunnel to '${terminatingDivert.target} ->' returns it won't have anywhere to go.`;\n    }\n\n    this.Warning(message, terminatingObject);\n  };\n\n  public readonly toString = (): string =>\n    `${this.typeName} '${this.identifier}'`;\n}\n","import { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Text } from \"./Text\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\n\nexport class ContentList extends ParsedObject {\n  public dontFlatten: boolean = false;\n\n  get runtimeContainer(): RuntimeContainer {\n    return this.runtimeObject as RuntimeContainer;\n  }\n\n  constructor(objects?: ParsedObject[], ...moreObjects: ParsedObject[]) {\n    super();\n\n    if (objects) {\n      this.AddContent(objects);\n    }\n\n    if (moreObjects) {\n      this.AddContent(moreObjects);\n    }\n  }\n\n  get typeName(): string {\n    return \"ContentList\";\n  }\n\n  public readonly TrimTrailingWhitespace = (): void => {\n    for (let ii = this.content.length - 1; ii >= 0; --ii) {\n      const text = asOrNull(this.content[ii], Text);\n      if (text === null) {\n        break;\n      }\n\n      text.text = text.text.replace(new RegExp(/[ \\t]/g), \"\");\n      if (text.text.length === 0) {\n        this.content.splice(ii, 1);\n      } else {\n        break;\n      }\n    }\n  };\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n    if (this.content !== null) {\n      for (const obj of this.content) {\n        const contentObjRuntime = obj.runtimeObject;\n\n        // Some objects (e.g. author warnings) don't generate runtime objects\n        if (contentObjRuntime) {\n          container.AddContent(contentObjRuntime);\n        }\n      }\n    }\n\n    if (this.dontFlatten) {\n      this.story.DontFlattenContainer(container);\n    }\n\n    return container;\n  };\n\n  public toString = (): string => `ContentList(${this.content.join(\", \")})`;\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\n\nexport class VariableReference extends InkObject {\n  public name: string | null;\n  public pathForCount: Path | null = null;\n\n  get containerForCount() {\n    if (this.pathForCount === null) return null;\n    return this.ResolvePath(this.pathForCount).container;\n  }\n  get pathStringForCount() {\n    if (this.pathForCount === null) return null;\n\n    return this.CompactPathString(this.pathForCount);\n  }\n  set pathStringForCount(value: string | null) {\n    if (value === null) this.pathForCount = null;\n    else this.pathForCount = new Path(value);\n  }\n\n  constructor(name: string | null = null) {\n    super();\n    this.name = name;\n  }\n\n  public toString() {\n    if (this.name != null) {\n      return \"var(\" + this.name + \")\";\n    } else {\n      let pathStr = this.pathStringForCount;\n      return \"read_count(\" + pathStr + \")\";\n    }\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ContentList } from \"../ContentList\";\nimport { Expression } from \"../Expression/Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { ParsedObject } from \"../Object\";\nimport { Path } from \"../Path\";\nimport { Story } from \"../Story\";\nimport { VariableReference as RuntimeVariableReference } from \"../../../../engine/VariableReference\";\nimport { Weave } from \"../Weave\";\nimport { Identifier } from \"../Identifier\";\nimport { asOrNull, filterUndef } from \"../../../../engine/TypeAssertion\";\n\nexport class VariableReference extends Expression {\n  private _runtimeVarRef: RuntimeVariableReference | null = null;\n\n  // - Normal variables have a single item in their \"path\"\n  // - Knot/stitch names for read counts are actual dot-separated paths\n  //   (though this isn't actually used at time of writing)\n  // - List names are dot separated: listName.itemName (or just itemName)\n  get name() {\n    return this.path.join(\".\");\n  }\n\n  get path(): string[] {\n    return this.pathIdentifiers.map((id) => id.name!).filter(filterUndef);\n  }\n\n  get identifier(): Identifier | null {\n    if (!this.pathIdentifiers || this.pathIdentifiers.length == 0) {\n      return null;\n    }\n    const name = this.path.join(\".\");\n    const id = new Identifier(name);\n\n    return id;\n  }\n\n  // Only known after GenerateIntoContainer has run\n  public isConstantReference: boolean = false;\n  public isListItemReference: boolean = false;\n\n  get runtimeVarRef() {\n    return this._runtimeVarRef;\n  }\n\n  constructor(public readonly pathIdentifiers: Identifier[]) {\n    super();\n  }\n\n  get typeName(): string {\n    return \"ref\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    let constantValue: Expression | null | undefined = this.story.constants.get(\n      this.name\n    );\n\n    // If it's a constant reference, just generate the literal expression value\n    // It's okay to access the constants at code generation time, since the\n    // first thing the ExportRuntime function does it search for all the constants\n    // in the story hierarchy, so they're all available.\n    if (constantValue) {\n      constantValue.GenerateConstantIntoContainer(container);\n      this.isConstantReference = true;\n\n      return;\n    }\n\n    this._runtimeVarRef = new RuntimeVariableReference(this.name);\n\n    // List item reference?\n    // Path might be to a list (listName.listItemName or just listItemName)\n    if (this.path.length === 1 || this.path.length === 2) {\n      let listItemName: string = \"\";\n      let listName: string = \"\";\n\n      if (this.path.length === 1) {\n        listItemName = this.path[0];\n      } else {\n        listName = this.path[0];\n        listItemName = this.path[1];\n      }\n\n      const listItem = this.story.ResolveListItem(listName, listItemName, this);\n\n      if (listItem) {\n        this.isListItemReference = true;\n      }\n    }\n\n    container.AddContent(this._runtimeVarRef);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // Work is already done if it's a constant or list item reference\n    if (this.isConstantReference || this.isListItemReference) {\n      return;\n    }\n\n    // Is it a read count?\n    const parsedPath = new Path(this.pathIdentifiers);\n    const targetForCount: ParsedObject | null =\n      parsedPath.ResolveFromContext(this);\n    if (targetForCount) {\n      if (!targetForCount.containerForCounting) {\n        throw new Error();\n      }\n\n      targetForCount.containerForCounting.visitsShouldBeCounted = true;\n\n      // If this is an argument to a function that wants a variable to be\n      // passed by reference, then the Parsed.Divert will have generated a\n      // Runtime.VariablePointerValue instead of allowing this object\n      // to generate its RuntimeVariableReference. This only happens under\n      // error condition since we shouldn't be passing a read count by\n      // reference, but we don't want it to crash!\n      if (this._runtimeVarRef === null) {\n        return;\n      }\n\n      this._runtimeVarRef.pathForCount = targetForCount.runtimePath;\n      this._runtimeVarRef.name = null;\n\n      // Check for very specific writer error: getting read count and\n      // printing it as content rather than as a piece of logic\n      // e.g. Writing {myFunc} instead of {myFunc()}\n      let targetFlow = asOrNull(targetForCount, FlowBase);\n      if (targetFlow && targetFlow.isFunction) {\n        // Is parent context content rather than logic?\n        if (\n          this.parent instanceof Weave ||\n          this.parent instanceof ContentList ||\n          this.parent instanceof FlowBase\n        ) {\n          this.Warning(\n            `'${targetFlow.identifier}' being used as read count rather than being called as function. Perhaps you intended to write ${targetFlow.identifier}()`\n          );\n        }\n      }\n\n      return;\n    }\n\n    // Couldn't find this multi-part path at all, whether as a divert\n    // target or as a list item reference.\n    if (this.path.length > 1) {\n      let errorMsg = `Could not find target for read count: ${parsedPath}`;\n      if (this.path.length <= 2) {\n        errorMsg += `, or couldn't find list item with the name ${this.path.join(\n          \",\"\n        )}`;\n      }\n\n      this.Error(errorMsg);\n\n      return;\n    }\n\n    if (!context.ResolveVariableWithName(this.name, this).found) {\n      this.Error(`Unresolved variable: ${this.name}`, this);\n    }\n  }\n\n  public readonly toString = (): string => `{${this.path.join(\".\")}}`;\n}\n","﻿import { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { Divert } from \"./Divert/Divert\";\nimport { Divert as RuntimeDivert } from \"../../../engine/Divert\";\nimport { DivertTarget } from \"./Divert/DivertTarget\";\nimport { Expression } from \"./Expression/Expression\";\nimport { InkList as RuntimeInkList } from \"../../../engine/InkList\";\nimport { ListValue } from \"../../../engine/Value\";\nimport { NativeFunctionCall } from \"../../../engine/NativeFunctionCall\";\nimport { NumberExpression } from \"./Expression/NumberExpression\";\nimport { Path } from \"./Path\";\nimport { Story } from \"./Story\";\nimport { StringValue } from \"../../../engine/Value\";\nimport { VariableReference } from \"./Variable/VariableReference\";\nimport { Identifier } from \"./Identifier\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\n\nexport class FunctionCall extends Expression {\n  public static readonly IsBuiltIn = (name: string): boolean => {\n    if (NativeFunctionCall.CallExistsWithName(name)) {\n      return true;\n    }\n\n    return (\n      name === \"CHOICE_COUNT\" ||\n      name === \"TURNS_SINCE\" ||\n      name === \"TURNS\" ||\n      name === \"RANDOM\" ||\n      name === \"SEED_RANDOM\" ||\n      name === \"LIST_VALUE\" ||\n      name === \"LIST_RANDOM\" ||\n      name === \"READ_COUNT\"\n    );\n  };\n\n  private _proxyDivert: Divert;\n  get proxyDivert(): Divert {\n    return this._proxyDivert;\n  }\n  private _divertTargetToCount: DivertTarget | null = null;\n  private _variableReferenceToCount: VariableReference | null = null;\n\n  get name(): string {\n    return (this._proxyDivert.target as Path).firstComponent || \"\";\n  }\n\n  get args(): Expression[] {\n    return this._proxyDivert.args;\n  }\n\n  get runtimeDivert(): RuntimeDivert {\n    return this._proxyDivert.runtimeDivert;\n  }\n\n  get isChoiceCount(): boolean {\n    return this.name === \"CHOICE_COUNT\";\n  }\n\n  get isTurns(): boolean {\n    return this.name === \"TURNS\";\n  }\n\n  get isTurnsSince(): boolean {\n    return this.name === \"TURNS_SINCE\";\n  }\n\n  get isRandom(): boolean {\n    return this.name === \"RANDOM\";\n  }\n\n  get isSeedRandom(): boolean {\n    return this.name === \"SEED_RANDOM\";\n  }\n\n  get isListRange(): boolean {\n    return this.name === \"LIST_RANGE\";\n  }\n\n  get isListRandom(): boolean {\n    return this.name === \"LIST_RANDOM\";\n  }\n\n  get isReadCount(): boolean {\n    return this.name === \"READ_COUNT\";\n  }\n\n  public shouldPopReturnedValue: boolean = false;\n\n  constructor(functionName: Identifier, args: Expression[]) {\n    super();\n\n    this._proxyDivert = new Divert(new Path(functionName), args);\n    this._proxyDivert.isFunctionCall = true;\n    this.AddContent(this._proxyDivert);\n  }\n\n  get typeName(): string {\n    return \"FunctionCall\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    const foundList = this.story.ResolveList(this.name);\n\n    let usingProxyDivert: boolean = false;\n\n    if (this.isChoiceCount) {\n      if (this.args.length > 0) {\n        this.Error(\"The CHOICE_COUNT() function shouldn't take any arguments\");\n      }\n\n      container.AddContent(RuntimeControlCommand.ChoiceCount());\n    } else if (this.isTurns) {\n      if (this.args.length > 0) {\n        this.Error(\"The TURNS() function shouldn't take any arguments\");\n      }\n\n      container.AddContent(RuntimeControlCommand.Turns());\n    } else if (this.isTurnsSince || this.isReadCount) {\n      const divertTarget = asOrNull(this.args[0], DivertTarget);\n      const variableDivertTarget = asOrNull(this.args[0], VariableReference);\n\n      if (\n        this.args.length !== 1 ||\n        (divertTarget === null && variableDivertTarget === null)\n      ) {\n        this.Error(\n          `The ${this.name}() function should take one argument: a divert target to the target knot, stitch, gather or choice you want to check. e.g. TURNS_SINCE(-> myKnot)`\n        );\n        return;\n      }\n\n      if (divertTarget) {\n        this._divertTargetToCount = divertTarget;\n        this.AddContent(this._divertTargetToCount);\n\n        this._divertTargetToCount.GenerateIntoContainer(container);\n      } else if (variableDivertTarget) {\n        this._variableReferenceToCount = variableDivertTarget;\n        this.AddContent(this._variableReferenceToCount);\n\n        this._variableReferenceToCount.GenerateIntoContainer(container);\n      }\n\n      if (this.isTurnsSince) {\n        container.AddContent(RuntimeControlCommand.TurnsSince());\n      } else {\n        container.AddContent(RuntimeControlCommand.ReadCount());\n      }\n    } else if (this.isRandom) {\n      if (this.args.length !== 2) {\n        this.Error(\n          \"RANDOM should take 2 parameters: a minimum and a maximum integer\"\n        );\n      }\n\n      // We can type check single values, but not complex expressions\n      for (let ii = 0; ii < this.args.length; ii += 1) {\n        const num = asOrNull(this.args[ii], NumberExpression);\n        if (num && !num.isInt()) {\n          const paramName: string = ii === 0 ? \"minimum\" : \"maximum\";\n          this.Error(`RANDOM's ${paramName} parameter should be an integer`);\n        }\n\n        this.args[ii].GenerateIntoContainer(container);\n      }\n\n      container.AddContent(RuntimeControlCommand.Random());\n    } else if (this.isSeedRandom) {\n      if (this.args.length !== 1) {\n        this.Error(\"SEED_RANDOM should take 1 parameter - an integer seed\");\n      }\n\n      const num = asOrNull(this.args[0], NumberExpression);\n      if (num && !num.isInt()) {\n        this.Error(\"SEED_RANDOM's parameter should be an integer seed\");\n      }\n\n      this.args[0].GenerateIntoContainer(container);\n\n      container.AddContent(RuntimeControlCommand.SeedRandom());\n    } else if (this.isListRange) {\n      if (this.args.length !== 3) {\n        this.Error(\n          \"LIST_RANGE should take 3 parameters - a list, a min and a max\"\n        );\n      }\n\n      for (let ii = 0; ii < this.args.length; ii += 1) {\n        this.args[ii].GenerateIntoContainer(container);\n      }\n\n      container.AddContent(RuntimeControlCommand.ListRange());\n    } else if (this.isListRandom) {\n      if (this.args.length !== 1) {\n        this.Error(\"LIST_RANDOM should take 1 parameter - a list\");\n      }\n\n      this.args[0].GenerateIntoContainer(container);\n\n      container.AddContent(RuntimeControlCommand.ListRandom());\n    } else if (NativeFunctionCall.CallExistsWithName(this.name)) {\n      const nativeCall = NativeFunctionCall.CallWithName(this.name);\n      if (nativeCall.numberOfParameters !== this.args.length) {\n        let msg = `${name} should take ${nativeCall.numberOfParameters} parameter`;\n        if (nativeCall.numberOfParameters > 1) {\n          msg += \"s\";\n        }\n\n        this.Error(msg);\n      }\n\n      for (let ii = 0; ii < this.args.length; ii += 1) {\n        this.args[ii].GenerateIntoContainer(container);\n      }\n\n      container.AddContent(NativeFunctionCall.CallWithName(this.name));\n    } else if (foundList !== null) {\n      if (this.args.length > 1) {\n        this.Error(\n          \"Can currently only construct a list from one integer (or an empty list from a given list definition)\"\n        );\n      }\n\n      // List item from given int\n      if (this.args.length === 1) {\n        container.AddContent(new StringValue(this.name));\n        this.args[0].GenerateIntoContainer(container);\n        container.AddContent(RuntimeControlCommand.ListFromInt());\n      } else {\n        // Empty list with given origin.\n        const list = new RuntimeInkList();\n        list.SetInitialOriginName(this.name);\n        container.AddContent(new ListValue(list));\n      }\n    } else {\n      // Normal function call\n      container.AddContent(this._proxyDivert.runtimeObject);\n      usingProxyDivert = true;\n    }\n\n    // Don't attempt to resolve as a divert if we're not doing a normal function call\n    if (!usingProxyDivert) {\n      this.content.splice(this.content.indexOf(this._proxyDivert), 1);\n    }\n\n    // Function calls that are used alone on a tilda-based line:\n    //  ~ func()\n    // Should tidy up any returned value from the evaluation stack,\n    // since it's unused.\n    if (this.shouldPopReturnedValue) {\n      container.AddContent(RuntimeControlCommand.PopEvaluatedValue());\n    }\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // If we aren't using the proxy divert after all (e.g. if\n    // it's a native function call), but we still have arguments,\n    // we need to make sure they get resolved since the proxy divert\n    // is no longer in the content array.\n    if (!this.content.includes(this._proxyDivert) && this.args !== null) {\n      for (const arg of this.args) {\n        arg.ResolveReferences(context);\n      }\n    }\n\n    if (this._divertTargetToCount) {\n      const divert = this._divertTargetToCount.divert;\n      const attemptingTurnCountOfVariableTarget =\n        divert.runtimeDivert.variableDivertName != null;\n\n      if (attemptingTurnCountOfVariableTarget) {\n        this.Error(\n          `When getting the TURNS_SINCE() of a variable target, remove the '->' - i.e. it should just be TURNS_SINCE(${divert.runtimeDivert.variableDivertName})`\n        );\n\n        return;\n      }\n\n      const targetObject = divert.targetContent;\n      if (targetObject === null) {\n        if (!attemptingTurnCountOfVariableTarget) {\n          this.Error(\n            `Failed to find target for TURNS_SINCE: '${divert.target}'`\n          );\n        }\n      } else {\n        if (!targetObject.containerForCounting) {\n          throw new Error();\n        }\n\n        targetObject.containerForCounting.turnIndexShouldBeCounted = true;\n      }\n    } else if (this._variableReferenceToCount) {\n      const runtimeVarRef = this._variableReferenceToCount.runtimeVarRef;\n      if (!runtimeVarRef) {\n        throw new Error();\n      }\n\n      if (runtimeVarRef.pathForCount !== null) {\n        this.Error(\n          `Should be '${name}'(-> '${this._variableReferenceToCount.name}). Usage without the '->' only makes sense for variable targets.`\n        );\n      }\n    }\n  }\n\n  public readonly toString = (): string => {\n    const strArgs = this.args.join(\", \");\n    return `${this.name}(${strArgs})`;\n  };\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"./Expression\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\n\nexport class MultipleConditionExpression extends Expression {\n  get subExpressions(): Expression[] {\n    return this.content as Expression[];\n  }\n\n  constructor(conditionExpressions: Expression[]) {\n    super();\n\n    this.AddContent(conditionExpressions);\n  }\n\n  get typeName(): string {\n    return \"MultipleConditionExpression\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    //    A && B && C && D\n    // => (((A B &&) C &&) D &&) etc\n    let isFirst: boolean = true;\n    for (const conditionExpr of this.subExpressions) {\n      conditionExpr.GenerateIntoContainer(container);\n\n      if (!isFirst) {\n        container.AddContent(NativeFunctionCall.CallWithName(\"&&\"));\n      }\n\n      isFirst = false;\n    }\n  };\n}\n","﻿import { BinaryExpression } from \"../Expression/BinaryExpression\";\nimport { Choice } from \"../Choice\";\nimport { Conditional } from \"../Conditional/Conditional\";\nimport { ConditionalSingleBranch } from \"../Conditional/ConditionalSingleBranch\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ParsedObject } from \"../Object\";\nimport { Divert } from \"./Divert\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { DivertTargetValue } from \"../../../../engine/Value\";\nimport { Expression } from \"../Expression/Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { FunctionCall } from \"../FunctionCall\";\nimport { MultipleConditionExpression } from \"../Expression/MultipleConditionExpression\";\nimport { Story } from \"../Story\";\nimport { VariableReference } from \"../Variable/VariableReference\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class DivertTarget extends Expression {\n  private _runtimeDivert: RuntimeDivert | null = null;\n  get runtimeDivert(): RuntimeDivert {\n    if (!this._runtimeDivert) {\n      throw new Error();\n    }\n\n    return this._runtimeDivert;\n  }\n\n  private _runtimeDivertTargetValue: DivertTargetValue | null = null;\n  get runtimeDivertTargetValue(): DivertTargetValue {\n    if (!this._runtimeDivertTargetValue) {\n      throw new Error();\n    }\n\n    return this._runtimeDivertTargetValue;\n  }\n\n  public divert: Divert;\n\n  constructor(divert: Divert) {\n    super();\n\n    this.divert = this.AddContent(divert) as Divert;\n  }\n\n  get typeName(): string {\n    return \"DivertTarget\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    this.divert.GenerateRuntimeObject();\n\n    this._runtimeDivert = this.divert.runtimeDivert as RuntimeDivert;\n    this._runtimeDivertTargetValue = new DivertTargetValue();\n\n    container.AddContent(this.runtimeDivertTargetValue);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    if (this.divert.isDone || this.divert.isEnd) {\n      this.Error(\n        `Can't use -> DONE or -> END as variable divert targets`,\n        this\n      );\n\n      return;\n    }\n\n    let usageContext: ParsedObject | null = this;\n    while (usageContext && usageContext instanceof Expression) {\n      let badUsage: boolean = false;\n      let foundUsage: boolean = false;\n\n      const usageParent: any = (usageContext as Expression).parent;\n      if (usageParent instanceof BinaryExpression) {\n        // Only allowed to compare for equality\n\n        const binaryExprParent = usageParent;\n        if (\n          binaryExprParent.opName !== \"==\" &&\n          binaryExprParent.opName !== \"!=\"\n        ) {\n          badUsage = true;\n        } else {\n          if (\n            !(\n              binaryExprParent.leftExpression instanceof DivertTarget ||\n              binaryExprParent.leftExpression instanceof VariableReference\n            )\n          ) {\n            badUsage = true;\n          } else if (\n            !(\n              binaryExprParent.rightExpression instanceof DivertTarget ||\n              binaryExprParent.rightExpression instanceof VariableReference\n            )\n          ) {\n            badUsage = true;\n          }\n        }\n\n        foundUsage = true;\n      } else if (usageParent instanceof FunctionCall) {\n        const funcCall = usageParent;\n        if (!funcCall.isTurnsSince && !funcCall.isReadCount) {\n          badUsage = true;\n        }\n\n        foundUsage = true;\n      } else if (usageParent instanceof Expression) {\n        badUsage = true;\n        foundUsage = true;\n      } else if (usageParent instanceof MultipleConditionExpression) {\n        badUsage = true;\n        foundUsage = true;\n      } else if (\n        usageParent instanceof Choice &&\n        (usageParent as Choice).condition === usageContext\n      ) {\n        badUsage = true;\n        foundUsage = true;\n      } else if (\n        usageParent instanceof Conditional ||\n        usageParent instanceof ConditionalSingleBranch\n      ) {\n        badUsage = true;\n        foundUsage = true;\n      }\n\n      if (badUsage) {\n        this.Error(\n          `Can't use a divert target like that. Did you intend to call '${this.divert.target}' as a function: likeThis(), or check the read count: likeThis, with no arrows?`,\n          this\n        );\n      }\n\n      if (foundUsage) {\n        break;\n      }\n\n      usageContext = usageParent;\n    }\n\n    // Example ink for this case:\n    //\n    //     VAR x = -> blah\n    //\n    // ...which means that \"blah\" is expected to be a literal stitch target rather\n    // than a variable name. We can't really intelligently recover from this (e.g. if blah happens to\n    // contain a divert target itself) since really we should be generating a variable reference\n    // rather than a concrete DivertTarget, so we list it as an error.\n    if (this.runtimeDivert.hasVariableTarget) {\n      if (!this.divert.target) {\n        throw new Error();\n      }\n\n      this.Error(\n        `Since '${this.divert.target.dotSeparatedComponents}' is a variable, it shouldn't be preceded by '->' here.`\n      );\n    }\n\n    // Main resolve\n    this.runtimeDivert.targetPath &&\n      (this.runtimeDivertTargetValue.targetPath =\n        this.runtimeDivert.targetPath);\n\n    // Tell hard coded (yet variable) divert targets that they also need to be counted\n    // TODO: Only detect DivertTargets that are values rather than being used directly for\n    // read or turn counts. Should be able to detect this by looking for other uses of containerForCounting\n    let targetContent = this.divert.targetContent;\n    if (targetContent !== null) {\n      let target = targetContent.containerForCounting;\n      if (target !== null) {\n        // Purpose is known: used directly in TURNS_SINCE(-> divTarg)\n        const parentFunc = asOrNull(this.parent, FunctionCall);\n        if (parentFunc && parentFunc.isTurnsSince) {\n          target.turnIndexShouldBeCounted = true;\n        } else {\n          // Unknown purpose, count everything\n          target.visitsShouldBeCounted = true;\n          target.turnIndexShouldBeCounted = true;\n        }\n      }\n\n      // Unfortunately not possible:\n      // https://github.com/inkle/ink/issues/538\n      //\n      // VAR func = -> double\n      //\n      // === function double(ref x)\n      //    ~ x = x * 2\n      //\n      // Because when generating the parameters for a function\n      // to be called, it needs to know ahead of time when\n      // compiling whether to pass a variable reference or value.\n      //\n      let targetFlow = asOrNull(targetContent, FlowBase);\n      if (targetFlow != null && targetFlow.args !== null) {\n        for (const arg of targetFlow.args) {\n          if (arg.isByReference) {\n            this.Error(\n              `Can't store a divert target to a knot or function that has by-reference arguments ('${targetFlow.identifier}' has 'ref ${arg.identifier}').`\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // Equals override necessary in order to check for CONST multiple definition equality\n  public readonly Equals = (obj: ParsedObject): boolean => {\n    const otherDivTarget = asOrNull(obj, DivertTarget);\n    if (\n      !otherDivTarget ||\n      !this.divert.target ||\n      !otherDivTarget.divert.target\n    ) {\n      return false;\n    }\n\n    const targetStr = this.divert.target.dotSeparatedComponents;\n    const otherTargetStr = otherDivTarget.divert.target.dotSeparatedComponents;\n\n    return targetStr === otherTargetStr;\n  };\n}\n","import { Argument } from \"../Argument\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { DivertTarget } from \"./DivertTarget\";\nimport { Expression } from \"../Expression/Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { FunctionCall } from \"../FunctionCall\";\nimport { ParsedObject } from \"../Object\";\nimport { Path } from \"../Path\";\nimport { Path as RuntimePath } from \"../../../../engine/Path\";\nimport { PushPopType } from \"../../../../engine/PushPop\";\nimport { Story } from \"../Story\";\nimport { VariablePointerValue } from \"../../../../engine/Value\";\nimport { VariableReference } from \"../Variable/VariableReference\";\nimport { ClosestFlowBase } from \"../Flow/ClosestFlowBase\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class Divert extends ParsedObject {\n  public readonly args: Expression[] = [];\n\n  public readonly target: Path | null = null;\n  public targetContent: ParsedObject | null = null;\n  private _runtimeDivert: RuntimeDivert | null = null;\n  get runtimeDivert(): RuntimeDivert {\n    if (!this._runtimeDivert) {\n      throw new Error();\n    }\n\n    return this._runtimeDivert;\n  }\n\n  set runtimeDivert(value: RuntimeDivert) {\n    this._runtimeDivert = value;\n  }\n\n  public isFunctionCall: boolean = false;\n  public isEmpty: boolean = false;\n  public isTunnel: boolean = false;\n  public isThread: boolean = false;\n\n  get isEnd(): boolean {\n    return Boolean(this.target && this.target.dotSeparatedComponents === \"END\");\n  }\n\n  get isDone(): boolean {\n    return Boolean(\n      this.target && this.target.dotSeparatedComponents === \"DONE\"\n    );\n  }\n\n  constructor(target?: Path | null | undefined, args?: Expression[]) {\n    super();\n\n    if (target) {\n      this.target = target;\n    }\n\n    if (args) {\n      this.args = args;\n      this.AddContent(args);\n    }\n  }\n\n  get typeName(): string {\n    return \"Divert\";\n  }\n\n  public readonly GenerateRuntimeObject = () => {\n    // End = end flow immediately\n    // Done = return from thread or instruct the flow that it's safe to exit\n    if (this.isEnd) {\n      return RuntimeControlCommand.End();\n    } else if (this.isDone) {\n      return RuntimeControlCommand.Done();\n    }\n\n    this.runtimeDivert = new RuntimeDivert();\n\n    // Normally we resolve the target content during the\n    // Resolve phase, since we expect all runtime objects to\n    // be available in order to find the final runtime path for\n    // the destination. However, we need to resolve the target\n    // (albeit without the runtime target) early so that\n    // we can get information about the arguments - whether\n    // they're by reference - since it affects the code we\n    // generate here.\n    this.ResolveTargetContent();\n\n    this.CheckArgumentValidity();\n\n    // Passing arguments to the knot\n    const requiresArgCodeGen = this.args !== null && this.args.length > 0;\n    if (\n      requiresArgCodeGen ||\n      this.isFunctionCall ||\n      this.isTunnel ||\n      this.isThread\n    ) {\n      const container = new RuntimeContainer();\n\n      // Generate code for argument evaluation\n      // This argument generation is coded defensively - it should\n      // attempt to generate the code for all the parameters, even if\n      // they don't match the expected arguments. This is so that the\n      // parameter objects themselves are generated correctly and don't\n      // get into a state of attempting to resolve references etc\n      // without being generated.\n      if (requiresArgCodeGen) {\n        // Function calls already in an evaluation context\n        if (!this.isFunctionCall) {\n          container.AddContent(RuntimeControlCommand.EvalStart());\n        }\n\n        let targetArguments: Argument[] | null = null;\n        if (this.targetContent) {\n          targetArguments = (this.targetContent as FlowBase).args;\n        }\n\n        for (let ii = 0; ii < this.args.length; ++ii) {\n          const argToPass: Expression = this.args[ii];\n          let argExpected: Argument | null = null;\n          if (targetArguments && ii < targetArguments.length) {\n            argExpected = targetArguments[ii];\n          }\n\n          // Pass by reference: argument needs to be a variable reference\n          if (argExpected && argExpected.isByReference) {\n            const varRef = asOrNull(argToPass, VariableReference);\n            if (!varRef) {\n              this.Error(\n                `Expected variable name to pass by reference to 'ref ${argExpected.identifier}' but saw ${argToPass}`\n              );\n\n              break;\n            }\n\n            // Check that we're not attempting to pass a read count by reference\n            const targetPath = new Path(varRef.pathIdentifiers);\n            const targetForCount: ParsedObject | null =\n              targetPath.ResolveFromContext(this);\n            if (targetForCount) {\n              this.Error(\n                `can't pass a read count by reference. '${\n                  targetPath.dotSeparatedComponents\n                }' is a knot/stitch/label, but '${\n                  this.target!.dotSeparatedComponents\n                }' requires the name of a VAR to be passed.`\n              );\n\n              break;\n            }\n\n            const varPointer = new VariablePointerValue(varRef.name);\n            container.AddContent(varPointer);\n          } else {\n            // Normal value being passed: evaluate it as normal\n            argToPass.GenerateIntoContainer(container);\n          }\n        }\n\n        // Function calls were already in an evaluation context\n        if (!this.isFunctionCall) {\n          container.AddContent(RuntimeControlCommand.EvalEnd());\n        }\n      }\n\n      // Starting a thread? A bit like a push to the call stack below... but not.\n      // It sort of puts the call stack on a thread stack (argh!) - forks the full flow.\n      if (this.isThread) {\n        container.AddContent(RuntimeControlCommand.StartThread());\n      } else if (this.isFunctionCall || this.isTunnel) {\n        // If this divert is a function call, tunnel, we push to the call stack\n        // so we can return again\n        this.runtimeDivert.pushesToStack = true;\n        this.runtimeDivert.stackPushType = this.isFunctionCall\n          ? PushPopType.Function\n          : PushPopType.Tunnel;\n      }\n\n      // Jump into the \"function\" (knot/stitch)\n      container.AddContent(this.runtimeDivert);\n\n      return container;\n    }\n\n    // Simple divert\n    return this.runtimeDivert;\n  };\n\n  // When the divert is to a target that's actually a variable name\n  // rather than an explicit knot/stitch name, try interpretting it\n  // as such by getting the variable name.\n  public readonly PathAsVariableName = () =>\n    this.target ? this.target.firstComponent : null;\n\n  public readonly ResolveTargetContent = (): void => {\n    if (this.isEmpty || this.isEnd) {\n      return;\n    }\n\n    if (this.targetContent === null) {\n      // Is target of this divert a variable name that will be de-referenced\n      // at runtime? If so, there won't be any further reference resolution\n      // we can do at this point.\n      let variableTargetName = this.PathAsVariableName();\n      if (variableTargetName !== null) {\n        const flowBaseScope = asOrNull(ClosestFlowBase(this), FlowBase);\n        if (flowBaseScope) {\n          const resolveResult = flowBaseScope.ResolveVariableWithName(\n            variableTargetName,\n            this\n          );\n\n          if (resolveResult.found) {\n            // Make sure that the flow was typed correctly, given that we know that this\n            // is meant to be a divert target\n            if (\n              resolveResult.isArgument &&\n              resolveResult.ownerFlow &&\n              resolveResult.ownerFlow.args\n            ) {\n              let argument = resolveResult.ownerFlow.args.find(\n                (a) => a.identifier?.name == variableTargetName\n              );\n\n              if (argument && !argument.isDivertTarget) {\n                this.Error(\n                  `Since '${argument.identifier}' is used as a variable divert target (on ${this.debugMetadata}), it should be marked as: -> ${argument.identifier}`,\n                  resolveResult.ownerFlow\n                );\n              }\n            }\n\n            this.runtimeDivert.variableDivertName = variableTargetName;\n            return;\n          }\n        }\n      }\n\n      if (!this.target) {\n        throw new Error();\n      }\n\n      this.targetContent = this.target.ResolveFromContext(this);\n    }\n  };\n\n  public ResolveReferences(context: Story): void {\n    if (this.isEmpty || this.isEnd || this.isDone) {\n      return;\n    } else if (!this.runtimeDivert) {\n      throw new Error();\n    }\n\n    if (this.targetContent) {\n      this.runtimeDivert.targetPath = this.targetContent.runtimePath;\n    }\n\n    // Resolve children (the arguments)\n    super.ResolveReferences(context);\n\n    // May be null if it's a built in function (e.g. TURNS_SINCE)\n    // or if it's a variable target.\n    let targetFlow = asOrNull(this.targetContent, FlowBase);\n    if (targetFlow) {\n      if (!targetFlow.isFunction && this.isFunctionCall) {\n        super.Error(\n          `${targetFlow.identifier} hasn't been marked as a function, but it's being called as one. Do you need to delcare the knot as '== function ${targetFlow.identifier} =='?`\n        );\n      } else if (\n        targetFlow.isFunction &&\n        !this.isFunctionCall &&\n        !(this.parent instanceof DivertTarget)\n      ) {\n        super.Error(\n          targetFlow.identifier +\n            \" can't be diverted to. It can only be called as a function since it's been marked as such: '\" +\n            targetFlow.identifier +\n            \"(...)'\"\n        );\n      }\n    }\n\n    // Check validity of target content\n    const targetWasFound = this.targetContent !== null;\n    let isBuiltIn: boolean = false;\n    let isExternal: boolean = false;\n\n    if (!this.target) {\n      throw new Error();\n    } else if (this.target.numberOfComponents === 1) {\n      if (!this.target.firstComponent) {\n        throw new Error();\n      }\n\n      // BuiltIn means TURNS_SINCE, CHOICE_COUNT, RANDOM or SEED_RANDOM\n      isBuiltIn = FunctionCall.IsBuiltIn(this.target.firstComponent);\n\n      // Client-bound function?\n      isExternal = context.IsExternal(this.target.firstComponent);\n\n      if (isBuiltIn || isExternal) {\n        if (!this.isFunctionCall) {\n          super.Error(\n            `${this.target.firstComponent} must be called as a function: ~ ${this.target.firstComponent}()`\n          );\n        }\n\n        if (isExternal) {\n          this.runtimeDivert.isExternal = true;\n          if (this.args !== null) {\n            this.runtimeDivert.externalArgs = this.args.length;\n          }\n\n          this.runtimeDivert.pushesToStack = false;\n          this.runtimeDivert.targetPath = new RuntimePath(\n            this.target.firstComponent\n          );\n\n          this.CheckExternalArgumentValidity(context);\n        }\n\n        return;\n      }\n    }\n\n    // Variable target?\n    if (this.runtimeDivert.variableDivertName != null) {\n      return;\n    }\n\n    if (!targetWasFound && !isBuiltIn && !isExternal) {\n      this.Error(`target not found: '${this.target}'`);\n    }\n  }\n\n  // Returns false if there's an error\n  public readonly CheckArgumentValidity = (): void => {\n    if (this.isEmpty) {\n      return;\n    }\n\n    // Argument passing: Check for errors in number of arguments\n    let numArgs = 0;\n    if (this.args !== null && this.args.length > 0) {\n      numArgs = this.args.length;\n    }\n\n    // Missing content?\n    // Can't check arguments properly. It'll be due to some\n    // other error though, so although there's a problem and\n    // we report false, we don't need to report a specific error.\n    // It may also be because it's a valid call to an external\n    // function, that we check at the resolve stage.\n    if (this.targetContent === null) {\n      return;\n    }\n\n    const targetFlow = asOrNull(this.targetContent, FlowBase);\n\n    // No error, crikey!\n    if (numArgs === 0 && (targetFlow === null || !targetFlow.hasParameters)) {\n      return;\n    } else if (targetFlow === null && numArgs > 0) {\n      this.Error(\n        \"target needs to be a knot or stitch in order to pass arguments\"\n      );\n      return;\n    } else if (\n      targetFlow !== null &&\n      (targetFlow.args === null || (!targetFlow.args && numArgs > 0))\n    ) {\n      this.Error(`target (${targetFlow.name}) doesn't take parameters`);\n      return;\n    } else if (this.parent instanceof DivertTarget) {\n      if (numArgs > 0) {\n        this.Error(`can't store arguments in a divert target variable`);\n      }\n\n      return;\n    }\n\n    const paramCount = targetFlow!.args!.length;\n    if (paramCount !== numArgs) {\n      let butClause: string;\n      if (numArgs === 0) {\n        butClause = \"but there weren't any passed to it\";\n      } else if (numArgs < paramCount) {\n        butClause = `but only got ${numArgs}`;\n      } else {\n        butClause = `but got ${numArgs}`;\n      }\n\n      this.Error(\n        `to '${\n          targetFlow!.identifier\n        }' requires ${paramCount} arguments, ${butClause}`\n      );\n\n      return;\n    }\n\n    // Light type-checking for divert target arguments\n    for (let ii = 0; ii < paramCount; ++ii) {\n      const flowArg: Argument = targetFlow!.args![ii];\n      const divArgExpr: Expression = this.args[ii];\n\n      // Expecting a divert target as an argument, let's do some basic type checking\n      if (flowArg.isDivertTarget) {\n        // Not passing a divert target or any kind of variable reference?\n        let varRef = asOrNull(divArgExpr, VariableReference);\n        if (!(divArgExpr instanceof DivertTarget) && varRef === null) {\n          this.Error(\n            `Target '${\n              targetFlow!.identifier\n            }' expects a divert target for the parameter named -> ${\n              flowArg.identifier\n            } but saw ${divArgExpr}`,\n            divArgExpr\n          );\n        } else if (varRef) {\n          // Passing 'a' instead of '-> a'?\n          // i.e. read count instead of divert target\n          // Unfortunately have to manually resolve here since we're still in code gen\n          const knotCountPath = new Path(varRef.pathIdentifiers);\n          const targetForCount: ParsedObject | null =\n            knotCountPath.ResolveFromContext(varRef);\n          if (targetForCount) {\n            this.Error(\n              `Passing read count of '${knotCountPath.dotSeparatedComponents}' instead of a divert target. You probably meant '${knotCountPath}'`\n            );\n          }\n        }\n      }\n    }\n\n    if (targetFlow === null) {\n      this.Error(\n        \"Can't call as a function or with arguments unless it's a knot or stitch\"\n      );\n      return;\n    }\n\n    return;\n  };\n\n  public readonly CheckExternalArgumentValidity = (context: Story): void => {\n    const externalName: string | null = this.target\n      ? this.target.firstComponent\n      : null;\n    const external = context.externals.get(externalName as any);\n    if (!external) {\n      throw new Error(\"external not found\");\n    }\n\n    const externalArgCount: number = external.argumentNames.length;\n    let ownArgCount = 0;\n    if (this.args) {\n      ownArgCount = this.args.length;\n    }\n\n    if (ownArgCount !== externalArgCount) {\n      this.Error(\n        `incorrect number of arguments sent to external function '${externalName}'. Expected ${externalArgCount} but got ${ownArgCount}`\n      );\n    }\n  };\n\n  public Error(\n    message: string,\n    source: ParsedObject | null = null,\n    isWarning: boolean = false\n  ): void {\n    // Could be getting an error from a nested Divert\n    if (source !== this && source) {\n      super.Error(message, source);\n      return;\n    }\n\n    if (this.isFunctionCall) {\n      super.Error(`Function call ${message}`, source, isWarning);\n    } else {\n      super.Error(`Divert ${message}`, source, isWarning);\n    }\n  }\n\n  public toString = (): string => {\n    let returnString = \"\";\n    if (this.target !== null) {\n      returnString += this.target.toString();\n    } else {\n      return \"-> <empty divert>\";\n    }\n\n    if (this.isTunnel) {\n      returnString += \" ->\";\n    }\n    if (this.isFunctionCall) {\n      returnString += \" ()\";\n    }\n\n    return returnString;\n  };\n}\n","import { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\n\nexport class GatherPointToResolve {\n  constructor(\n    public divert: RuntimeDivert,\n    public targetRuntimeObj: RuntimeObject\n  ) {}\n}\n","import { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\n\nexport class SequenceDivertToResolve {\n  constructor(\n    public divert: RuntimeDivert,\n    public targetContent: RuntimeObject\n  ) {}\n}\n","import { ContentList } from \"../ContentList\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { IntValue } from \"../../../../engine/Value\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { SequenceDivertToResolve } from \"./SequenceDivertToResolve\";\nimport { SequenceType } from \"./SequenceType\";\nimport { Story } from \"../Story\";\nimport { Weave } from \"../Weave\";\n\nexport class Sequence extends ParsedObject {\n  private _sequenceDivertsToResolve: SequenceDivertToResolve[] = [];\n\n  public sequenceElements: ParsedObject[];\n\n  constructor(\n    elementContentLists: ContentList[],\n    public readonly sequenceType: SequenceType\n  ) {\n    super();\n\n    this.sequenceType = sequenceType;\n    this.sequenceElements = [];\n\n    for (const elementContentList of elementContentLists) {\n      const contentObjs = elementContentList.content;\n      let seqElObject: ParsedObject | null = null;\n\n      // Don't attempt to create a weave for the sequence element\n      // if the content list is empty. Weaves don't like it!\n      if (contentObjs === null || contentObjs.length === 0) {\n        seqElObject = elementContentList;\n      } else {\n        seqElObject = new Weave(contentObjs);\n      }\n\n      this.sequenceElements.push(seqElObject);\n      this.AddContent(seqElObject);\n    }\n  }\n\n  get typeName(): string {\n    return \"Sequence\";\n  }\n\n  // Generate runtime code that looks like:\n  //\n  //   chosenIndex = MIN(sequence counter, num elements) e.g. for \"Stopping\"\n  //   if chosenIndex == 0, divert to s0\n  //   if chosenIndex == 1, divert to s1  [etc]\n  //\n  //   - s0:\n  //      <content for sequence element>\n  //      divert to no-op\n  //   - s1:\n  //      <content for sequence element>\n  //      divert to no-op\n  //   - s2:\n  //      empty branch if using \"once\"\n  //      divert to no-op\n  //\n  //    no-op\n  //\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n    container.visitsShouldBeCounted = true;\n    container.countingAtStartOnly = true;\n\n    this._sequenceDivertsToResolve = [];\n\n    // Get sequence read count\n    container.AddContent(RuntimeControlCommand.EvalStart());\n    container.AddContent(RuntimeControlCommand.VisitIndex());\n\n    const once: boolean = (this.sequenceType & SequenceType.Once) > 0;\n    const cycle: boolean = (this.sequenceType & SequenceType.Cycle) > 0;\n    const stopping: boolean = (this.sequenceType & SequenceType.Stopping) > 0;\n    const shuffle: boolean = (this.sequenceType & SequenceType.Shuffle) > 0;\n\n    let seqBranchCount = this.sequenceElements.length;\n    if (once) {\n      seqBranchCount += 1;\n    }\n\n    // Chosen sequence index:\n    //  - Stopping: take the MIN(read count, num elements - 1)\n    //  - Once: take the MIN(read count, num elements)\n    //    (the last one being empty)\n    if (stopping || once) {\n      //var limit = stopping ? seqBranchCount-1 : seqBranchCount;\n      container.AddContent(new IntValue(seqBranchCount - 1));\n      container.AddContent(NativeFunctionCall.CallWithName(\"MIN\"));\n    } else if (cycle) {\n      // - Cycle: take (read count % num elements)\n      container.AddContent(new IntValue(this.sequenceElements.length));\n      container.AddContent(NativeFunctionCall.CallWithName(\"%\"));\n    }\n\n    // Shuffle\n    if (shuffle) {\n      // Create point to return to when sequence is complete\n      const postShuffleNoOp = RuntimeControlCommand.NoOp();\n\n      // When visitIndex == lastIdx, we skip the shuffle\n      if (once || stopping) {\n        // if( visitIndex == lastIdx ) -> skipShuffle\n        const lastIdx = stopping\n          ? this.sequenceElements.length - 1\n          : this.sequenceElements.length;\n\n        container.AddContent(RuntimeControlCommand.Duplicate());\n        container.AddContent(new IntValue(lastIdx));\n        container.AddContent(NativeFunctionCall.CallWithName(\"==\"));\n\n        const skipShuffleDivert = new RuntimeDivert();\n        skipShuffleDivert.isConditional = true;\n        container.AddContent(skipShuffleDivert);\n\n        this.AddDivertToResolve(skipShuffleDivert, postShuffleNoOp);\n      }\n\n      // This one's a bit more complex! Choose the index at runtime.\n      let elementCountToShuffle = this.sequenceElements.length;\n      if (stopping) {\n        elementCountToShuffle -= 1;\n      }\n\n      container.AddContent(new IntValue(elementCountToShuffle));\n      container.AddContent(RuntimeControlCommand.SequenceShuffleIndex());\n      if (once || stopping) {\n        container.AddContent(postShuffleNoOp);\n      }\n    }\n\n    container.AddContent(RuntimeControlCommand.EvalEnd());\n\n    // Create point to return to when sequence is complete\n    const postSequenceNoOp = RuntimeControlCommand.NoOp();\n\n    // Each of the main sequence branches, and one extra empty branch if\n    // we have a \"once\" sequence.\n    for (let elIndex = 0; elIndex < seqBranchCount; elIndex += 1) {\n      // This sequence element:\n      //  if( chosenIndex == this index ) divert to this sequence element\n      // duplicate chosen sequence index, since it'll be consumed by \"==\"\n      container.AddContent(RuntimeControlCommand.EvalStart());\n      container.AddContent(RuntimeControlCommand.Duplicate());\n      container.AddContent(new IntValue(elIndex));\n      container.AddContent(NativeFunctionCall.CallWithName(\"==\"));\n      container.AddContent(RuntimeControlCommand.EvalEnd());\n\n      // Divert branch for this sequence element\n      const sequenceDivert = new RuntimeDivert();\n      sequenceDivert.isConditional = true;\n      container.AddContent(sequenceDivert);\n\n      let contentContainerForSequenceBranch: RuntimeContainer;\n\n      // Generate content for this sequence element\n      if (elIndex < this.sequenceElements.length) {\n        const el = this.sequenceElements[elIndex];\n        contentContainerForSequenceBranch =\n          el.runtimeObject as RuntimeContainer;\n      } else {\n        // Final empty branch for \"once\" sequences\n        contentContainerForSequenceBranch = new RuntimeContainer();\n      }\n\n      contentContainerForSequenceBranch.name = `s${elIndex}`;\n      contentContainerForSequenceBranch.InsertContent(\n        RuntimeControlCommand.PopEvaluatedValue(),\n        0\n      );\n\n      // When sequence element is complete, divert back to end of sequence\n      const seqBranchCompleteDivert = new RuntimeDivert();\n      contentContainerForSequenceBranch.AddContent(seqBranchCompleteDivert);\n      container.AddToNamedContentOnly(contentContainerForSequenceBranch);\n\n      // Save the diverts for reference resolution later (in ResolveReferences)\n      this.AddDivertToResolve(\n        sequenceDivert,\n        contentContainerForSequenceBranch\n      );\n      this.AddDivertToResolve(seqBranchCompleteDivert, postSequenceNoOp);\n    }\n\n    container.AddContent(postSequenceNoOp);\n\n    return container;\n  };\n\n  public readonly AddDivertToResolve = (\n    divert: RuntimeDivert,\n    targetContent: RuntimeObject\n  ) => {\n    this._sequenceDivertsToResolve.push(\n      new SequenceDivertToResolve(divert, targetContent)\n    );\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    for (const toResolve of this._sequenceDivertsToResolve) {\n      toResolve.divert.targetPath = toResolve.targetContent.path;\n    }\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { Divert } from \"./Divert/Divert\";\nimport { Divert as RuntimeDivert } from \"../../../engine/Divert\";\nimport { DivertTargetValue } from \"../../../engine/Value\";\nimport { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Story } from \"./Story\";\nimport { Void } from \"../../../engine/Void\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\nimport { VariableReference } from \"../../../engine/VariableReference\";\n\nexport class TunnelOnwards extends ParsedObject {\n  private _overrideDivertTarget: DivertTargetValue | null = null;\n\n  private _divertAfter: Divert | null = null;\n  get divertAfter() {\n    return this._divertAfter;\n  }\n\n  set divertAfter(value) {\n    this._divertAfter = value;\n    if (this._divertAfter) {\n      this.AddContent(this._divertAfter);\n    }\n  }\n\n  get typeName(): string {\n    return \"TunnelOnwards\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n\n    // Set override path for tunnel onwards (or nothing)\n    container.AddContent(RuntimeControlCommand.EvalStart());\n\n    if (this.divertAfter) {\n      // Generate runtime object's generated code and steal the arguments runtime code\n      const returnRuntimeObj = this.divertAfter.GenerateRuntimeObject();\n      const returnRuntimeContainer = returnRuntimeObj as RuntimeContainer;\n      if (returnRuntimeContainer) {\n        // Steal all code for generating arguments from the divert\n        const args = this.divertAfter.args;\n        if (args !== null && args.length > 0) {\n          // Steal everything betwen eval start and eval end\n          let evalStart = -1;\n          let evalEnd = -1;\n          for (\n            let ii = 0;\n            ii < returnRuntimeContainer.content.length;\n            ii += 1\n          ) {\n            const cmd = returnRuntimeContainer.content[\n              ii\n            ] as RuntimeControlCommand;\n            if (cmd) {\n              if (\n                evalStart == -1 &&\n                cmd.commandType === RuntimeControlCommand.CommandType.EvalStart\n              ) {\n                evalStart = ii;\n              } else if (\n                cmd.commandType === RuntimeControlCommand.CommandType.EvalEnd\n              ) {\n                evalEnd = ii;\n              }\n            }\n          }\n\n          for (let ii = evalStart + 1; ii < evalEnd; ii += 1) {\n            const obj = returnRuntimeContainer.content[ii];\n            obj.parent = null; // prevent error of being moved between owners\n            container.AddContent(returnRuntimeContainer.content[ii]);\n          }\n        }\n      }\n      // Supply the divert target for the tunnel onwards target, either variable or more commonly, the explicit name\n      // var returnDivertObj = returnRuntimeObj as Runtime.Divert;\n      let returnDivertObj = asOrNull(returnRuntimeObj, RuntimeDivert);\n      if (returnDivertObj != null && returnDivertObj.hasVariableTarget) {\n        let runtimeVarRef = new VariableReference(\n          returnDivertObj.variableDivertName\n        );\n        container.AddContent(runtimeVarRef);\n      } else {\n        this._overrideDivertTarget = new DivertTargetValue();\n        container.AddContent(this._overrideDivertTarget);\n      }\n    } else {\n      // No divert after tunnel onwards\n      container.AddContent(new Void());\n    }\n\n    container.AddContent(RuntimeControlCommand.EvalEnd());\n    container.AddContent(RuntimeControlCommand.PopTunnel());\n\n    return container;\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    if (this.divertAfter && this.divertAfter.targetContent) {\n      this._overrideDivertTarget!.targetPath =\n        this.divertAfter.targetContent.runtimePath;\n    }\n  }\n\n  public toString = (): string => {\n    return ` -> ${this._divertAfter}`;\n  };\n}\n","import { InkListItem, SerializedInkListItem } from \"./InkList\";\nimport { TryGetResult } from \"./TryGetResult\";\n\nexport class ListDefinition {\n  public _name: string;\n  public _items: Map<SerializedInkListItem, number> | null;\n  public _itemNameToValues: Map<string, number>;\n\n  constructor(name: string, items: Map<string, number> | null) {\n    this._name = name || \"\";\n    this._items = null;\n    this._itemNameToValues = items || new Map();\n  }\n  get name() {\n    return this._name;\n  }\n  get items() {\n    if (this._items == null) {\n      this._items = new Map();\n      for (let [key, value] of this._itemNameToValues) {\n        let item = new InkListItem(this.name, key);\n        this._items.set(item.serialized(), value);\n      }\n    }\n\n    return this._items;\n  }\n\n  public ValueForItem(item: InkListItem) {\n    if (!item.itemName) return 0;\n\n    let intVal = this._itemNameToValues.get(item.itemName);\n    if (typeof intVal !== \"undefined\") return intVal;\n    else return 0;\n  }\n  public ContainsItem(item: InkListItem) {\n    if (!item.itemName) return false;\n    if (item.originName != this.name) return false;\n\n    return this._itemNameToValues.has(item.itemName);\n  }\n  public ContainsItemWithName(itemName: string) {\n    return this._itemNameToValues.has(itemName);\n  }\n  public TryGetItemWithValue(\n    val: number,\n    /* out */ item: InkListItem\n  ): TryGetResult<InkListItem> {\n    for (let [key, value] of this._itemNameToValues) {\n      if (value == val) {\n        item = new InkListItem(this.name, key);\n        return { result: item, exists: true };\n      }\n    }\n\n    item = InkListItem.Null;\n    return { result: item, exists: false };\n  }\n  public TryGetValueForItem(\n    item: InkListItem,\n    /* out */ intVal: number\n  ): TryGetResult<number> {\n    if (!item.itemName) return { result: 0, exists: false };\n    let value = this._itemNameToValues.get(item.itemName);\n\n    if (!value) return { result: 0, exists: false };\n    return { result: value, exists: true };\n  }\n}\n","import { InkList as RuntimeInkList } from \"../../../../engine/InkList\";\nimport { InkListItem as RuntimeInkListItem } from \"../../../../engine/InkList\";\nimport { ListDefinition as RuntimeListDefinition } from \"../../../../engine/ListDefinition\";\nimport { ListElementDefinition } from \"./ListElementDefinition\";\nimport { ListValue } from \"../../../../engine/Value\";\nimport { ParsedObject } from \"../Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { VariableAssignment } from \"../Variable/VariableAssignment\";\nimport { Identifier } from \"../Identifier\";\n\nexport class ListDefinition extends ParsedObject {\n  public identifier: Identifier | null = null;\n  public variableAssignment: VariableAssignment | null = null;\n\n  get typeName() {\n    return \"ListDefinition\";\n  }\n\n  private _elementsByName: Map<string, ListElementDefinition> | null = null;\n\n  get runtimeListDefinition(): RuntimeListDefinition {\n    const allItems: Map<string, number> = new Map();\n    for (const e of this.itemDefinitions) {\n      if (!allItems.has(e.name!)) {\n        allItems.set(e.name!, e.seriesValue);\n      } else {\n        this.Error(\n          `List '${this.identifier}' contains duplicate items called '${e.name}'`\n        );\n      }\n    }\n\n    return new RuntimeListDefinition(this.identifier?.name || \"\", allItems);\n  }\n\n  public readonly ItemNamed = (\n    itemName: string\n  ): ListElementDefinition | null => {\n    if (this._elementsByName === null) {\n      this._elementsByName = new Map();\n\n      for (const el of this.itemDefinitions) {\n        this._elementsByName.set(el.name!, el);\n      }\n    }\n\n    const foundElement = this._elementsByName.get(itemName) || null;\n\n    return foundElement;\n  };\n\n  constructor(public itemDefinitions: ListElementDefinition[]) {\n    super();\n\n    let currentValue = 1;\n    for (const e of this.itemDefinitions) {\n      if (e.explicitValue !== null) {\n        currentValue = e.explicitValue;\n      }\n\n      e.seriesValue = currentValue;\n\n      currentValue += 1;\n    }\n\n    this.AddContent(itemDefinitions as any);\n  }\n\n  public readonly GenerateRuntimeObject = (): ListValue => {\n    const initialValues = new RuntimeInkList();\n    for (const itemDef of this.itemDefinitions) {\n      if (itemDef.inInitialList) {\n        const item = new RuntimeInkListItem(\n          this.identifier?.name || null,\n          itemDef.name || null\n        );\n        initialValues.Add(item, itemDef.seriesValue);\n      }\n    }\n\n    // Set origin name, so\n    initialValues.SetInitialOriginName(this.identifier?.name || \"\");\n\n    return new ListValue(initialValues);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n    context.CheckForNamingCollisions(this, this.identifier!, SymbolType.List);\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"../Expression/Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { ClosestFlowBase } from \"../Flow/ClosestFlowBase\";\nimport { ListDefinition } from \"../List/ListDefinition\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../../engine/VariableAssignment\";\nimport { VariableReference } from \"./VariableReference\";\nimport { Identifier } from \"../Identifier\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class VariableAssignment extends ParsedObject {\n  private _runtimeAssignment: RuntimeVariableAssignment | null = null;\n\n  get variableName(): string {\n    return this.variableIdentifier.name!;\n  }\n  public readonly variableIdentifier: Identifier;\n  public readonly expression: Expression | null = null;\n  public readonly listDefinition: ListDefinition | null = null;\n  public readonly isGlobalDeclaration: boolean;\n  public readonly isNewTemporaryDeclaration: boolean;\n\n  get typeName() {\n    if (this.isNewTemporaryDeclaration) {\n      return \"temp\";\n    } else if (this.isGlobalDeclaration) {\n      if (this.listDefinition !== null) {\n        return \"LIST\";\n      }\n      return \"VAR\";\n    }\n\n    return \"variable assignment\";\n  }\n\n  get isDeclaration(): boolean {\n    return this.isGlobalDeclaration || this.isNewTemporaryDeclaration;\n  }\n\n  constructor({\n    assignedExpression,\n    isGlobalDeclaration,\n    isTemporaryNewDeclaration,\n    listDef,\n    variableIdentifier,\n  }: {\n    readonly assignedExpression?: Expression;\n    readonly isGlobalDeclaration?: boolean;\n    readonly isTemporaryNewDeclaration?: boolean;\n    readonly listDef?: ListDefinition;\n    readonly variableIdentifier: Identifier;\n  }) {\n    super();\n\n    this.variableIdentifier = variableIdentifier;\n    this.isGlobalDeclaration = Boolean(isGlobalDeclaration);\n    this.isNewTemporaryDeclaration = Boolean(isTemporaryNewDeclaration);\n\n    // Defensive programming in case parsing of assignedExpression failed\n    if (listDef instanceof ListDefinition) {\n      this.listDefinition = this.AddContent(listDef) as ListDefinition;\n      this.listDefinition.variableAssignment = this;\n\n      // List definitions are always global\n      this.isGlobalDeclaration = true;\n    } else if (assignedExpression) {\n      this.expression = this.AddContent(assignedExpression) as Expression;\n    }\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject | null => {\n    let newDeclScope: FlowBase | null | undefined = null;\n    if (this.isGlobalDeclaration) {\n      newDeclScope = this.story;\n    } else if (this.isNewTemporaryDeclaration) {\n      newDeclScope = ClosestFlowBase(this);\n    }\n\n    if (newDeclScope) {\n      newDeclScope.AddNewVariableDeclaration(this);\n    }\n\n    // Global declarations don't generate actual procedural\n    // runtime objects, but instead add a global variable to the story itself.\n    // The story then initialises them all in one go at the start of the game.\n    if (this.isGlobalDeclaration) {\n      return null;\n    }\n\n    const container = new RuntimeContainer();\n\n    // The expression's runtimeObject is actually another nested container\n    if (this.expression) {\n      container.AddContent(this.expression.runtimeObject);\n    } else if (this.listDefinition) {\n      container.AddContent(this.listDefinition.runtimeObject);\n    }\n\n    this._runtimeAssignment = new RuntimeVariableAssignment(\n      this.variableName,\n      this.isNewTemporaryDeclaration\n    );\n\n    container.AddContent(this._runtimeAssignment);\n\n    return container;\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // List definitions are checked for conflicts separately\n    if (this.isDeclaration && this.listDefinition === null) {\n      context.CheckForNamingCollisions(\n        this,\n        this.variableIdentifier,\n        this.isGlobalDeclaration ? SymbolType.Var : SymbolType.Temp\n      );\n    }\n\n    // Initial VAR x = [intialValue] declaration, not re-assignment\n    if (this.isGlobalDeclaration) {\n      const variableReference = asOrNull(this.expression, VariableReference);\n      if (\n        variableReference &&\n        !variableReference.isConstantReference &&\n        !variableReference.isListItemReference\n      ) {\n        this.Error(\n          \"global variable assignments cannot refer to other variables, only literal values, constants and list items\"\n        );\n      }\n    }\n\n    if (!this.isNewTemporaryDeclaration) {\n      const resolvedVarAssignment = context.ResolveVariableWithName(\n        this.variableName,\n        this\n      );\n\n      if (!resolvedVarAssignment.found) {\n        if (this.variableName in this.story.constants) {\n          this.Error(\n            `Can't re-assign to a constant (do you need to use VAR when declaring '${this.variableName}'?)`,\n            this\n          );\n        } else {\n          this.Error(\n            `Variable could not be found to assign to: '${this.variableName}'`,\n            this\n          );\n        }\n      }\n\n      // A runtime assignment may not have been generated if it's the initial global declaration,\n      // since these are hoisted out and handled specially in Story.ExportRuntime.\n      if (this._runtimeAssignment) {\n        this._runtimeAssignment.isGlobal = resolvedVarAssignment.isGlobal;\n      }\n    }\n  }\n\n  public readonly toString = (): string =>\n    `${\n      this.isGlobalDeclaration\n        ? \"VAR\"\n        : this.isNewTemporaryDeclaration\n        ? \"~ temp\"\n        : \"\"\n    } ${this.variableName}`;\n}\n","import { AuthorWarning } from \"./AuthorWarning\";\nimport { Choice } from \"./Choice\";\nimport { Conditional } from \"./Conditional/Conditional\";\nimport { ConstantDeclaration } from \"./Declaration/ConstantDeclaration\";\nimport { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { Divert } from \"./Divert/Divert\";\nimport { Divert as RuntimeDivert } from \"../../../engine/Divert\";\nimport { DivertTarget } from \"./Divert/DivertTarget\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { Gather } from \"./Gather/Gather\";\nimport { GatherPointToResolve } from \"./Gather/GatherPointToResolve\";\nimport { IWeavePoint } from \"./IWeavePoint\";\nimport { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Sequence } from \"./Sequence/Sequence\";\nimport { Story } from \"./Story\";\nimport { Text } from \"./Text\";\nimport { TunnelOnwards } from \"./TunnelOnwards\";\nimport { VariableAssignment } from \"./Variable/VariableAssignment\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\n\ntype BadTerminationHandler = (terminatingObj: ParsedObject) => void;\n\n// Used by the FlowBase when constructing the weave flow from\n// a flat list of content objects.\nexport class Weave extends ParsedObject {\n  // Containers can be chained as multiple gather points\n  // get created as the same indentation level.\n  // rootContainer is always the first in the chain, while\n  // currentContainer is the latest.\n  get rootContainer(): RuntimeContainer {\n    if (!this._rootContainer) {\n      this._rootContainer = this.GenerateRuntimeObject();\n    }\n\n    return this._rootContainer;\n  }\n\n  // Keep track of previous weave point (Choice or Gather)\n  // at the current indentation level:\n  //  - to add ordinary content to be nested under it\n  //  - to add nested content under it when it's indented\n  //  - to remove it from the list of loose ends when\n  //     - it has indented content since it's no longer a loose end\n  //     - it's a gather and it has a choice added to it\n  public previousWeavePoint: IWeavePoint | null = null;\n  public addContentToPreviousWeavePoint: boolean = false;\n\n  // Used for determining whether the next Gather should auto-enter\n  public hasSeenChoiceInSection: boolean = false;\n\n  public currentContainer: RuntimeContainer | null = null;\n  public baseIndentIndex: number;\n\n  private _unnamedGatherCount: number = 0;\n  private _choiceCount: number = 0;\n  private _rootContainer: RuntimeContainer | null = null;\n  private _namedWeavePoints: Map<string, IWeavePoint> = new Map();\n  get namedWeavePoints() {\n    return this._namedWeavePoints;\n  }\n\n  // Loose ends are:\n  //  - Choices or Gathers that need to be joined up\n  //  - Explicit Divert to gather points (i.e. \"->\" without a target)\n  public looseEnds: IWeavePoint[] = [];\n\n  public gatherPointsToResolve: GatherPointToResolve[] = [];\n\n  get lastParsedSignificantObject(): ParsedObject | null {\n    if (this.content.length === 0) {\n      return null;\n    }\n\n    // Don't count extraneous newlines or VAR/CONST declarations,\n    // since they're \"empty\" statements outside of the main flow.\n    let lastObject: ParsedObject | null = null;\n    for (let ii = this.content.length - 1; ii >= 0; --ii) {\n      lastObject = this.content[ii];\n\n      let lastText = asOrNull(lastObject, Text);\n      if (lastText && lastText.text === \"\\n\") {\n        continue;\n      }\n\n      if (this.IsGlobalDeclaration(lastObject)) {\n        continue;\n      }\n\n      break;\n    }\n\n    const lastWeave = asOrNull(lastObject, Weave);\n    if (lastWeave) {\n      lastObject = lastWeave.lastParsedSignificantObject;\n    }\n\n    return lastObject;\n  }\n\n  constructor(cont: ParsedObject[], indentIndex: number = -1) {\n    super();\n\n    if (indentIndex == -1) {\n      this.baseIndentIndex = this.DetermineBaseIndentationFromContent(cont);\n    } else {\n      this.baseIndentIndex = indentIndex;\n    }\n\n    this.AddContent(cont);\n\n    this.ConstructWeaveHierarchyFromIndentation();\n  }\n\n  get typeName(): string {\n    return \"Weave\";\n  }\n\n  public readonly ResolveWeavePointNaming = (): void => {\n    const namedWeavePoints = [\n      ...this.FindAll<IWeavePoint>(Gather)(\n        (w) => !(w.name === null || w.name === undefined)\n      ),\n      ...this.FindAll<IWeavePoint>(Choice)(\n        (w) => !(w.name === null || w.name === undefined)\n      ),\n    ];\n    this._namedWeavePoints = new Map();\n\n    for (const weavePoint of namedWeavePoints) {\n      // Check for weave point naming collisions\n      const existingWeavePoint: IWeavePoint | null | undefined =\n        this.namedWeavePoints.get(weavePoint.identifier?.name || \"\");\n\n      if (existingWeavePoint) {\n        const typeName =\n          existingWeavePoint instanceof Gather ? \"gather\" : \"choice\";\n        const existingObj: ParsedObject = existingWeavePoint;\n\n        this.Error(\n          `A ${typeName} with the same label name '${\n            weavePoint.name\n          }' already exists in this context on line ${\n            existingObj.debugMetadata\n              ? existingObj.debugMetadata.startLineNumber\n              : \"NO DEBUG METADATA AVAILABLE\"\n          }`,\n          weavePoint as ParsedObject\n        );\n      }\n      if (weavePoint.identifier?.name) {\n        this.namedWeavePoints.set(weavePoint.identifier?.name, weavePoint);\n      }\n    }\n  };\n\n  public readonly ConstructWeaveHierarchyFromIndentation = (): void => {\n    // Find nested indentation and convert to a proper object hierarchy\n    // (i.e. indented content is replaced with a Weave object that contains\n    // that nested content)\n    let contentIdx = 0;\n    while (contentIdx < this.content.length) {\n      const obj: ParsedObject = this.content[contentIdx];\n\n      // Choice or Gather\n      if (obj instanceof Choice || obj instanceof Gather) {\n        const weavePoint: IWeavePoint = obj;\n        const weaveIndentIdx = weavePoint.indentationDepth - 1;\n\n        // Inner level indentation - recurse\n        if (weaveIndentIdx > this.baseIndentIndex) {\n          // Step through content until indent jumps out again\n          let innerWeaveStartIdx = contentIdx;\n          while (contentIdx < this.content.length) {\n            const innerWeaveObj =\n              asOrNull(this.content[contentIdx], Choice) ||\n              asOrNull(this.content[contentIdx], Gather);\n            if (innerWeaveObj !== null) {\n              const innerIndentIdx = innerWeaveObj.indentationDepth - 1;\n              if (innerIndentIdx <= this.baseIndentIndex) {\n                break;\n              }\n            }\n\n            contentIdx += 1;\n          }\n\n          const weaveContentCount = contentIdx - innerWeaveStartIdx;\n          const weaveContent = this.content.slice(\n            innerWeaveStartIdx,\n            innerWeaveStartIdx + weaveContentCount\n          );\n\n          this.content.splice(innerWeaveStartIdx, weaveContentCount);\n\n          const weave = new Weave(weaveContent, weaveIndentIdx);\n          this.InsertContent(innerWeaveStartIdx, weave);\n\n          // Continue iteration from this point\n          contentIdx = innerWeaveStartIdx;\n        }\n      }\n\n      contentIdx += 1;\n    }\n  };\n\n  // When the indentation wasn't told to us at construction time using\n  // a choice point with a known indentation level, we may be told to\n  // determine the indentation level by incrementing from our closest ancestor.\n  public readonly DetermineBaseIndentationFromContent = (\n    contentList: ParsedObject[]\n  ): number => {\n    for (const obj of contentList) {\n      if (obj instanceof Choice || obj instanceof Gather) {\n        return obj.indentationDepth - 1;\n      }\n    }\n\n    // No weave points, so it doesn't matter\n    return 0;\n  };\n\n  public readonly GenerateRuntimeObject = (): RuntimeContainer => {\n    this._rootContainer = new RuntimeContainer();\n    this.currentContainer = this._rootContainer;\n    this.looseEnds = [];\n    this.gatherPointsToResolve = [];\n\n    // Iterate through content for the block at this level of indentation\n    //  - Normal content is nested under Choices and Gathers\n    //  - Blocks that are further indented cause recursion\n    //  - Keep track of loose ends so that they can be diverted to Gathers\n    for (const obj of this.content) {\n      // Choice or Gather\n      if (obj instanceof Choice || obj instanceof Gather) {\n        this.AddRuntimeForWeavePoint(obj as IWeavePoint);\n      } else {\n        // Non-weave point\n        if (obj instanceof Weave) {\n          // Nested weave\n          const weave = obj;\n          this.AddRuntimeForNestedWeave(weave);\n          this.gatherPointsToResolve.splice(\n            0,\n            0,\n            ...weave.gatherPointsToResolve\n          );\n        } else {\n          // Other object\n          // May be complex object that contains statements - e.g. a multi-line conditional\n          this.AddGeneralRuntimeContent(obj.runtimeObject);\n        }\n      }\n    }\n\n    // Pass any loose ends up the hierarhcy\n    this.PassLooseEndsToAncestors();\n\n    return this._rootContainer;\n  };\n\n  // Found gather point:\n  //  - gather any loose ends\n  //  - set the gather as the main container to dump new content in\n  public readonly AddRuntimeForGather = (gather: Gather): void => {\n    // Determine whether this Gather should be auto-entered:\n    //  - It is auto-entered if there were no choices in the last section\n    //  - A section is \"since the previous gather\" - so reset now\n    const autoEnter = !this.hasSeenChoiceInSection;\n    this.hasSeenChoiceInSection = false;\n\n    const gatherContainer = gather.runtimeContainer;\n\n    if (!gather.name) {\n      // Use disallowed character so it's impossible to have a name collision\n      gatherContainer.name = `g-${this._unnamedGatherCount}`;\n      this._unnamedGatherCount += 1;\n    }\n\n    if (autoEnter) {\n      if (!this.currentContainer) {\n        throw new Error();\n      }\n\n      // Auto-enter: include in main content\n      this.currentContainer.AddContent(gatherContainer);\n    } else {\n      // Don't auto-enter:\n      // Add this gather to the main content, but only accessible\n      // by name so that it isn't stepped into automatically, but only via\n      // a divert from a loose end.\n      this.rootContainer.AddToNamedContentOnly(gatherContainer);\n    }\n\n    // Consume loose ends: divert them to this gather\n    for (const looseEndWeavePoint of this.looseEnds) {\n      const looseEnd = looseEndWeavePoint as ParsedObject;\n\n      // Skip gather loose ends that are at the same level\n      // since they'll be handled by the auto-enter code below\n      // that only jumps into the gather if (current runtime choices == 0)\n      if (looseEnd instanceof Gather) {\n        const prevGather = looseEnd;\n        if (prevGather.indentationDepth == gather.indentationDepth) {\n          continue;\n        }\n      }\n\n      let divert: RuntimeDivert | null = null;\n      if (looseEnd instanceof Divert) {\n        divert = looseEnd.runtimeObject as RuntimeDivert;\n      } else {\n        divert = new RuntimeDivert();\n        const looseWeavePoint = looseEnd as IWeavePoint;\n        if (!looseWeavePoint.runtimeContainer) {\n          throw new Error();\n        }\n\n        looseWeavePoint.runtimeContainer.AddContent(divert);\n      }\n\n      // Pass back knowledge of this loose end being diverted\n      // to the FlowBase so that it can maintain a list of them,\n      // and resolve the divert references later\n      this.gatherPointsToResolve.push(\n        new GatherPointToResolve(divert, gatherContainer)\n      );\n    }\n\n    this.looseEnds = [];\n\n    // Replace the current container itself\n    this.currentContainer = gatherContainer;\n  };\n\n  public readonly AddRuntimeForWeavePoint = (weavePoint: IWeavePoint): void => {\n    // Current level Gather\n    if (weavePoint instanceof Gather) {\n      this.AddRuntimeForGather(weavePoint);\n    }\n\n    // Current level choice\n    else if (weavePoint instanceof Choice) {\n      if (!this.currentContainer) {\n        throw new Error();\n      }\n\n      // Gathers that contain choices are no longer loose ends\n      // (same as when weave points get nested content)\n      if (this.previousWeavePoint instanceof Gather) {\n        this.looseEnds.splice(\n          this.looseEnds.indexOf(this.previousWeavePoint),\n          1\n        );\n      }\n\n      // Add choice point content\n      const choice = weavePoint; //, Choice);\n\n      this.currentContainer.AddContent(choice.runtimeObject);\n      if (!choice.innerContentContainer) {\n        throw new Error();\n      } //guaranteed not to happen\n\n      // Add choice's inner content to self\n      choice.innerContentContainer.name = `c-${this._choiceCount}`;\n      this.currentContainer.AddToNamedContentOnly(choice.innerContentContainer);\n      this._choiceCount += 1;\n\n      this.hasSeenChoiceInSection = true;\n    }\n\n    // Keep track of loose ends\n    this.addContentToPreviousWeavePoint = false; // default\n    if (this.WeavePointHasLooseEnd(weavePoint)) {\n      this.looseEnds.push(weavePoint);\n\n      const looseChoice = asOrNull(weavePoint, Choice);\n      if (looseChoice) {\n        this.addContentToPreviousWeavePoint = true;\n      }\n    }\n\n    this.previousWeavePoint = weavePoint;\n  };\n\n  // Add nested block at a greater indentation level\n  public readonly AddRuntimeForNestedWeave = (nestedResult: Weave): void => {\n    // Add this inner block to current container\n    // (i.e. within the main container, or within the last defined Choice/Gather)\n    this.AddGeneralRuntimeContent(nestedResult.rootContainer);\n\n    // Now there's a deeper indentation level, the previous weave point doesn't\n    // count as a loose end (since it will have content to go to)\n    if (this.previousWeavePoint !== null) {\n      this.looseEnds.splice(this.looseEnds.indexOf(this.previousWeavePoint), 1);\n\n      this.addContentToPreviousWeavePoint = false;\n    }\n  };\n\n  // Normal content gets added into the latest Choice or Gather by default,\n  // unless there hasn't been one yet.\n  public readonly AddGeneralRuntimeContent = (content: RuntimeObject): void => {\n    // Content is allowed to evaluate runtimeObject to null\n    // (e.g. AuthorWarning, which doesn't make it into the runtime)\n    if (content === null) {\n      return;\n    }\n\n    if (this.addContentToPreviousWeavePoint) {\n      if (\n        !this.previousWeavePoint ||\n        !this.previousWeavePoint.runtimeContainer\n      ) {\n        throw new Error();\n      }\n\n      this.previousWeavePoint.runtimeContainer.AddContent(content);\n    } else {\n      if (!this.currentContainer) {\n        throw new Error();\n      }\n\n      this.currentContainer.AddContent(content);\n    }\n  };\n\n  public readonly PassLooseEndsToAncestors = () => {\n    if (this.looseEnds.length === 0) {\n      return;\n    }\n\n    // Search for Weave ancestor to pass loose ends to for gathering.\n    // There are two types depending on whether the current weave\n    // is separated by a conditional or sequence.\n    //  - An \"inner\" weave is one that is directly connected to the current\n    //    weave - i.e. you don't have to pass through a conditional or\n    //    sequence to get to it. We're allowed to pass all loose ends to\n    //    one of these.\n    //  - An \"outer\" weave is one that is outside of a conditional/sequence\n    //    that the current weave is nested within. We're only allowed to\n    //    pass gathers (i.e. 'normal flow') loose ends up there, not normal\n    //    choices. The rule is that choices have to be diverted explicitly\n    //    by the author since it's ambiguous where flow should go otherwise.\n    //\n    // e.g.:\n    //\n    //   - top                       <- e.g. outer weave\n    //   {true:\n    //       * choice                <- e.g. inner weave\n    //         * * choice 2\n    //             more content      <- e.g. current weave\n    //       * choice 2\n    //   }\n    //   - more of outer weave\n    //\n    let closestInnerWeaveAncestor: Weave | null = null;\n    let closestOuterWeaveAncestor: Weave | null = null;\n\n    // Find inner and outer ancestor weaves as defined above.\n    let nested = false;\n    for (\n      let ancestor = this.parent;\n      ancestor !== null;\n      ancestor = ancestor.parent\n    ) {\n      // Found ancestor?\n      const weaveAncestor = asOrNull(ancestor, Weave);\n      if (weaveAncestor) {\n        if (!nested && closestInnerWeaveAncestor === null) {\n          closestInnerWeaveAncestor = weaveAncestor;\n        }\n\n        if (nested && closestOuterWeaveAncestor === null) {\n          closestOuterWeaveAncestor = weaveAncestor;\n        }\n      }\n\n      // Weaves nested within Sequences or Conditionals are\n      // \"sealed\" - any loose ends require explicit diverts.\n      if (ancestor instanceof Sequence || ancestor instanceof Conditional) {\n        nested = true;\n      }\n    }\n\n    // No weave to pass loose ends to at all?\n    if (\n      closestInnerWeaveAncestor === null &&\n      closestOuterWeaveAncestor === null\n    ) {\n      return;\n    }\n\n    // Follow loose end passing logic as defined above\n    for (let ii = this.looseEnds.length - 1; ii >= 0; ii -= 1) {\n      const looseEnd = this.looseEnds[ii];\n      let received = false;\n\n      if (nested) {\n        // This weave is nested within a conditional or sequence:\n        //  - choices can only be passed up to direct ancestor (\"inner\") weaves\n        //  - gathers can be passed up to either, but favour the closer (inner) weave\n        //    if there is one\n        if (looseEnd instanceof Choice && closestInnerWeaveAncestor !== null) {\n          closestInnerWeaveAncestor.ReceiveLooseEnd(looseEnd);\n          received = true;\n        } else if (!(looseEnd instanceof Choice)) {\n          const receivingWeave =\n            closestInnerWeaveAncestor || closestOuterWeaveAncestor;\n          if (receivingWeave !== null) {\n            receivingWeave.ReceiveLooseEnd(looseEnd);\n            received = true;\n          }\n        }\n      } else {\n        // No nesting, all loose ends can be safely passed up\n        if (closestInnerWeaveAncestor?.hasOwnProperty(\"ReceiveLooseEnd\")) {\n          closestInnerWeaveAncestor!.ReceiveLooseEnd(looseEnd);\n        }\n        received = true;\n      }\n\n      if (received) {\n        this.looseEnds.splice(ii, 1);\n      }\n    }\n  };\n\n  public readonly ReceiveLooseEnd = (childWeaveLooseEnd: IWeavePoint): void => {\n    this.looseEnds.push(childWeaveLooseEnd);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // Check that choices nested within conditionals and sequences are terminated\n    if (this.looseEnds !== null && this.looseEnds.length > 0) {\n      let isNestedWeave = false;\n      for (\n        let ancestor = this.parent;\n        ancestor !== null;\n        ancestor = ancestor.parent\n      ) {\n        if (ancestor instanceof Sequence || ancestor instanceof Conditional) {\n          isNestedWeave = true;\n          break;\n        }\n      }\n\n      if (isNestedWeave) {\n        this.ValidateTermination(this.BadNestedTerminationHandler);\n      }\n    }\n\n    for (const gatherPoint of this.gatherPointsToResolve) {\n      gatherPoint.divert.targetPath = gatherPoint.targetRuntimeObj.path;\n    }\n\n    this.CheckForWeavePointNamingCollisions();\n  }\n\n  public readonly WeavePointNamed = (name: string): IWeavePoint | null => {\n    if (!this.namedWeavePoints) {\n      return null;\n    }\n\n    let weavePointResult: IWeavePoint | null | undefined =\n      this.namedWeavePoints.get(name);\n    if (weavePointResult) {\n      return weavePointResult;\n    }\n\n    return null;\n  };\n\n  // Global VARs and CONSTs are treated as \"outside of the flow\"\n  // when iterating over content that follows loose ends\n  public readonly IsGlobalDeclaration = (obj: ParsedObject) => {\n    const varAss = asOrNull(obj, VariableAssignment);\n    if (varAss && varAss.isGlobalDeclaration && varAss.isDeclaration) {\n      return true;\n    }\n\n    const constDecl = asOrNull(obj, ConstantDeclaration);\n    if (constDecl) {\n      return true;\n    }\n\n    return false;\n  };\n\n  // While analysing final loose ends, we look to see whether there\n  // are any diverts etc which choices etc divert from\n  public readonly ContentThatFollowsWeavePoint = (\n    weavePoint: IWeavePoint\n  ): ParsedObject[] => {\n    const returned = [];\n    const obj = weavePoint as ParsedObject;\n\n    // Inner content first (e.g. for a choice)\n    if (obj.content !== null) {\n      for (const contentObj of obj.content) {\n        // Global VARs and CONSTs are treated as \"outside of the flow\"\n        if (this.IsGlobalDeclaration(contentObj)) {\n          continue;\n        }\n\n        returned.push(contentObj);\n      }\n    }\n\n    const parentWeave = asOrNull(obj.parent, Weave);\n    if (parentWeave === null) {\n      throw new Error(\"Expected weave point parent to be weave?\");\n    }\n\n    const weavePointIdx = parentWeave.content.indexOf(obj);\n    for (let ii = weavePointIdx + 1; ii < parentWeave.content.length; ii += 1) {\n      const laterObj = parentWeave.content[ii];\n\n      // Global VARs and CONSTs are treated as \"outside of the flow\"\n      if (this.IsGlobalDeclaration(laterObj)) {\n        continue;\n      }\n\n      // End of the current flow\n      // if (laterObj instanceof IWeavePoint) // cannot test on interface in ts\n      if (laterObj instanceof Choice || laterObj instanceof Gather) {\n        break;\n      }\n\n      // Other weaves will be have their own loose ends\n      if (laterObj instanceof Weave) {\n        break;\n      }\n\n      returned.push(laterObj);\n    }\n\n    return returned;\n  };\n\n  public readonly ValidateTermination = (\n    badTerminationHandler: BadTerminationHandler\n  ): void => {\n    // Don't worry if the last object in the flow is a \"TODO\",\n    // even if there are other loose ends in other places\n    if (this.lastParsedSignificantObject instanceof AuthorWarning) {\n      return;\n    }\n\n    // By now, any sub-weaves will have passed loose ends up to the root weave (this).\n    // So there are 2 possible situations:\n    //  - There are loose ends from somewhere in the flow.\n    //    These aren't necessarily \"real\" loose ends - they're weave points\n    //    that don't connect to any lower weave points, so we just\n    //    have to check that they terminate properly.\n    //  - This weave is just a list of content with no actual weave points,\n    //    so we just need to check that the list of content terminates.\n\n    const hasLooseEnds: boolean =\n      this.looseEnds !== null && this.looseEnds.length > 0;\n\n    if (hasLooseEnds) {\n      for (const looseEnd of this.looseEnds) {\n        const looseEndFlow = this.ContentThatFollowsWeavePoint(looseEnd);\n        this.ValidateFlowOfObjectsTerminates(\n          looseEndFlow,\n          looseEnd as ParsedObject,\n          badTerminationHandler\n        );\n      }\n    } else {\n      // No loose ends... is there any inner weaving at all?\n      // If not, make sure the single content stream is terminated correctly\n      //\n      // If there's any actual weaving, assume that content is\n      // terminated correctly since we would've had a loose end otherwise\n      for (const obj of this.content) {\n        if (obj instanceof Choice || obj instanceof Divert) {\n          return;\n        }\n      }\n\n      // Straight linear flow? Check it terminates\n      this.ValidateFlowOfObjectsTerminates(\n        this.content,\n        this,\n        badTerminationHandler\n      );\n    }\n  };\n\n  readonly BadNestedTerminationHandler: BadTerminationHandler = (\n    terminatingObj\n  ) => {\n    let conditional: Conditional | null = null;\n    for (\n      let ancestor = terminatingObj.parent;\n      ancestor !== null;\n      ancestor = ancestor.parent\n    ) {\n      if (ancestor instanceof Sequence || ancestor instanceof Conditional) {\n        conditional = asOrNull(ancestor, Conditional);\n        break;\n      }\n    }\n\n    let errorMsg =\n      \"Choices nested in conditionals or sequences need to explicitly divert afterwards.\";\n\n    // Tutorialise proper choice syntax if this looks like a single choice within a condition, e.g.\n    // { condition:\n    //      * choice\n    // }\n    if (conditional !== null) {\n      let numChoices = conditional.FindAll<Choice>(Choice)().length;\n      if (numChoices === 1) {\n        errorMsg = `Choices with conditions should be written: '* {condition} choice'. Otherwise, ${errorMsg.toLowerCase()}`;\n      }\n    }\n\n    this.Error(errorMsg, terminatingObj);\n  };\n\n  public readonly ValidateFlowOfObjectsTerminates = (\n    objFlow: ParsedObject[],\n    defaultObj: ParsedObject,\n    badTerminationHandler: BadTerminationHandler\n  ) => {\n    let terminated = false;\n    let terminatingObj: ParsedObject = defaultObj;\n    for (const flowObj of objFlow) {\n      const divert = flowObj.Find(Divert)(\n        (d) =>\n          !d.isThread &&\n          !d.isTunnel &&\n          !d.isFunctionCall &&\n          !(d.parent instanceof DivertTarget)\n      );\n\n      if (divert !== null) {\n        terminated = true;\n      }\n\n      if (flowObj.Find(TunnelOnwards)() != null) {\n        terminated = true;\n        break;\n      }\n\n      terminatingObj = flowObj;\n    }\n\n    if (!terminated) {\n      // Author has left a note to self here - clearly we don't need\n      // to leave them with another warning since they know what they're doing.\n      if (terminatingObj instanceof AuthorWarning) {\n        return;\n      }\n\n      badTerminationHandler(terminatingObj);\n    }\n  };\n\n  public readonly WeavePointHasLooseEnd = (\n    weavePoint: IWeavePoint\n  ): boolean => {\n    // No content, must be a loose end.\n    if (weavePoint.content === null) {\n      return true;\n    }\n\n    // If a weave point is diverted from, it doesn't have a loose end.\n    // Detect a divert object within a weavePoint's main content\n    // Work backwards since we're really interested in the end,\n    // although it doesn't actually make a difference!\n    // (content after a divert will simply be inaccessible)\n    for (let ii = weavePoint.content.length - 1; ii >= 0; --ii) {\n      let innerDivert = asOrNull(weavePoint.content[ii], Divert);\n      if (innerDivert) {\n        const willReturn =\n          innerDivert.isThread ||\n          innerDivert.isTunnel ||\n          innerDivert.isFunctionCall;\n        if (!willReturn) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  // Enforce rule that weave points must not have the same\n  // name as any stitches or knots upwards in the hierarchy\n  public readonly CheckForWeavePointNamingCollisions = (): void => {\n    if (!this.namedWeavePoints) {\n      return;\n    }\n\n    const ancestorFlows = [];\n    for (const obj of this.ancestry) {\n      const flow = asOrNull(obj, FlowBase);\n      if (flow) {\n        ancestorFlows.push(flow);\n      } else {\n        break;\n      }\n    }\n\n    for (const [weavePointName, weavePoint] of this.namedWeavePoints) {\n      for (const flow of ancestorFlows) {\n        // Shallow search\n        const otherContentWithName =\n          flow.ContentWithNameAtLevel(weavePointName);\n        if (otherContentWithName && otherContentWithName !== weavePoint) {\n          const errorMsg = `${weavePoint.GetType()} '${weavePointName}' has the same label name as a ${otherContentWithName.GetType()} (on ${\n            otherContentWithName.debugMetadata\n          })`;\n          this.Error(errorMsg, weavePoint);\n        }\n      }\n    }\n  };\n}\n","﻿import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { Expression } from \"../Expression/Expression\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { StringValue } from \"../../../../engine/Value\";\nimport { Story } from \"../Story\";\nimport { Text } from \"../Text\";\nimport { Weave } from \"../Weave\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class ConditionalSingleBranch extends ParsedObject {\n  public _contentContainer: RuntimeContainer | null = null;\n  public _conditionalDivert: RuntimeDivert | null = null;\n  public _ownExpression: Expression | null = null;\n  public _innerWeave: Weave | null = null;\n  // bool condition, e.g.:\n  // { 5 == 4:\n  //   - the true branch\n  //   - the false branch\n  // }\n  public isTrueBranch: boolean = false;\n\n  // When each branch has its own expression like a switch statement,\n  // this is non-null. e.g.\n  // { x:\n  //    - 4: the value of x is four (ownExpression is the value 4)\n  //    - 3: the value of x is three\n  // }\n  get ownExpression() {\n    return this._ownExpression;\n  }\n\n  set ownExpression(value) {\n    this._ownExpression = value;\n    if (this._ownExpression) {\n      this.AddContent(this._ownExpression);\n    }\n  }\n\n  // In the above example, match equality of x with 4 for the first branch.\n  // This is as opposed to simply evaluating boolean equality for each branch,\n  // example when shouldMatchEquality is FALSE:\n  // {\n  //    3 > 2:  This will happen\n  //    2 > 3:  This won't happen\n  // }\n  public matchingEquality: boolean = false;\n\n  public isElse: boolean = false;\n  public isInline: boolean = false;\n\n  public returnDivert: RuntimeDivert | null = null;\n\n  constructor(content?: ParsedObject[] | null | undefined) {\n    super();\n\n    // Branches are allowed to be empty\n    if (content) {\n      this._innerWeave = new Weave(content);\n      this.AddContent(this._innerWeave);\n    }\n  }\n\n  get typeName(): string {\n    return \"ConditionalSingleBranch\";\n  }\n\n  // Runtime content can be summarised as follows:\n  //  - Evaluate an expression if necessary to branch on\n  //  - Branch to a named container if true\n  //       - Divert back to main flow\n  //         (owner Conditional is in control of this target point)\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    // Check for common mistake, of putting \"else:\" instead of \"- else:\"\n    if (this._innerWeave) {\n      for (const c of this._innerWeave.content) {\n        const text = asOrNull(c, Text);\n        if (text) {\n          // Don't need to trim at the start since the parser handles that already\n          if (text.text.startsWith(\"else:\")) {\n            this.Warning(\n              \"Saw the text 'else:' which is being treated as content. Did you mean '- else:'?\",\n              text\n            );\n          }\n        }\n      }\n    }\n\n    const container = new RuntimeContainer();\n\n    // Are we testing against a condition that's used for more than just this\n    // branch? If so, the first thing we need to do is replicate the value that's\n    // on the evaluation stack so that we don't fully consume it, in case other\n    // branches need to use it.\n    const duplicatesStackValue: boolean = this.matchingEquality && !this.isElse;\n\n    if (duplicatesStackValue) {\n      container.AddContent(RuntimeControlCommand.Duplicate());\n    }\n\n    this._conditionalDivert = new RuntimeDivert();\n\n    // else clause is unconditional catch-all, otherwise the divert is conditional\n    this._conditionalDivert.isConditional = !this.isElse;\n\n    // Need extra evaluation?\n    if (!this.isTrueBranch && !this.isElse) {\n      const needsEval: boolean = this.ownExpression !== null;\n      if (needsEval) {\n        container.AddContent(RuntimeControlCommand.EvalStart());\n      }\n\n      if (this.ownExpression) {\n        this.ownExpression.GenerateIntoContainer(container);\n      }\n\n      // Uses existing duplicated value\n      if (this.matchingEquality) {\n        container.AddContent(NativeFunctionCall.CallWithName(\"==\"));\n      }\n\n      if (needsEval) {\n        container.AddContent(RuntimeControlCommand.EvalEnd());\n      }\n    }\n\n    // Will pop from stack if conditional\n    container.AddContent(this._conditionalDivert);\n\n    this._contentContainer = this.GenerateRuntimeForContent();\n    this._contentContainer.name = \"b\";\n\n    // Multi-line conditionals get a newline at the start of each branch\n    // (as opposed to the start of the multi-line conditional since the condition\n    //  may evaluate to false.)\n    if (!this.isInline) {\n      this._contentContainer.InsertContent(new StringValue(\"\\n\"), 0);\n    }\n\n    if (duplicatesStackValue || (this.isElse && this.matchingEquality)) {\n      this._contentContainer.InsertContent(\n        RuntimeControlCommand.PopEvaluatedValue(),\n        0\n      );\n    }\n\n    container.AddToNamedContentOnly(this._contentContainer);\n\n    this.returnDivert = new RuntimeDivert();\n    this._contentContainer.AddContent(this.returnDivert);\n\n    return container;\n  };\n\n  public readonly GenerateRuntimeForContent = (): RuntimeContainer => {\n    // Empty branch - create empty container\n    if (this._innerWeave === null) {\n      return new RuntimeContainer();\n    }\n\n    return this._innerWeave.rootContainer;\n  };\n\n  public ResolveReferences(context: Story): void {\n    if (!this._conditionalDivert || !this._contentContainer) {\n      throw new Error();\n    }\n\n    this._conditionalDivert.targetPath = this._contentContainer.path;\n    super.ResolveReferences(context);\n  }\n}\n","export class DebugMetadata {\n  public startLineNumber: number = 0;\n  public endLineNumber: number = 0;\n  public startCharacterNumber: number = 0;\n  public endCharacterNumber: number = 0;\n  public fileName: string | null = null;\n  public sourceName: string | null = null;\n\n  public Merge(dm: DebugMetadata) {\n    let newDebugMetadata = new DebugMetadata();\n\n    newDebugMetadata.fileName = this.fileName;\n    newDebugMetadata.sourceName = this.sourceName;\n\n    if (this.startLineNumber < dm.startLineNumber) {\n      newDebugMetadata.startLineNumber = this.startLineNumber;\n      newDebugMetadata.startCharacterNumber = this.startCharacterNumber;\n    } else if (this.startLineNumber > dm.startLineNumber) {\n      newDebugMetadata.startLineNumber = dm.startLineNumber;\n      newDebugMetadata.startCharacterNumber = dm.startCharacterNumber;\n    } else {\n      newDebugMetadata.startLineNumber = this.startLineNumber;\n      newDebugMetadata.startCharacterNumber = Math.min(\n        this.startCharacterNumber,\n        dm.startCharacterNumber\n      );\n    }\n\n    if (this.endLineNumber > dm.endLineNumber) {\n      newDebugMetadata.endLineNumber = this.endLineNumber;\n      newDebugMetadata.endCharacterNumber = this.endCharacterNumber;\n    } else if (this.endLineNumber < dm.endLineNumber) {\n      newDebugMetadata.endLineNumber = dm.endLineNumber;\n      newDebugMetadata.endCharacterNumber = dm.endCharacterNumber;\n    } else {\n      newDebugMetadata.endLineNumber = this.endLineNumber;\n      newDebugMetadata.endCharacterNumber = Math.max(\n        this.endCharacterNumber,\n        dm.endCharacterNumber\n      );\n    }\n\n    return newDebugMetadata;\n  }\n\n  public toString() {\n    if (this.fileName !== null) {\n      return `line ${this.startLineNumber} of ${this.fileName}\"`;\n    } else {\n      return \"line \" + this.startLineNumber;\n    }\n  }\n}\n","import { INamedContent } from \"../../../../engine/INamedContent\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Identifier } from \"../Identifier\";\n\nexport class ExternalDeclaration extends ParsedObject implements INamedContent {\n  public get name(): string | null {\n    return this.identifier?.name || null;\n  }\n\n  constructor(\n    public readonly identifier: Identifier,\n    public readonly argumentNames: string[]\n  ) {\n    super();\n  }\n\n  get typeName(): string {\n    return \"EXTERNAL\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject | null => {\n    this.story.AddExternal(this);\n\n    // No runtime code exists for an external, only metadata\n    return null;\n  };\n\n  public toString(): string {\n    return `EXTERNAL ${this.identifier?.name}`;\n  }\n}\n","import { Argument } from \"./ParsedHierarchy/Argument\";\nimport { Identifier } from \"./ParsedHierarchy/Identifier\";\n\nexport class FlowDecl {\n  constructor(\n    public readonly name: Identifier,\n    public readonly args: Argument[],\n    public readonly isFunction: boolean\n  ) {}\n}\n","import { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\n\nexport class Wrap<T extends RuntimeObject> extends ParsedObject {\n  constructor(private _objToWrap: T) {\n    super();\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => this._objToWrap;\n}\n","import { Glue as RuntimeGlue } from \"../../../engine/Glue\";\nimport { Wrap } from \"./Wrap\";\n\nexport class Glue extends Wrap<RuntimeGlue> {\n  constructor(glue: RuntimeGlue) {\n    super(glue);\n  }\n\n  get typeName(): string {\n    return \"Glue\";\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class Glue extends InkObject {\n  public toString() {\n    return \"Glue\";\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ContentList } from \"../ContentList\";\nimport { Expression } from \"./Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { IntValue } from \"../../../../engine/Value\";\nimport { Story } from \"../Story\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../../engine/VariableAssignment\";\nimport { VariableReference as RuntimeVariableReference } from \"../../../../engine/VariableReference\";\nimport { Weave } from \"../Weave\";\nimport { Identifier } from \"../Identifier\";\n\nexport class IncDecExpression extends Expression {\n  private _runtimeAssignment: RuntimeVariableAssignment | null = null;\n\n  public isInc: boolean;\n  public expression: Expression | null = null;\n\n  constructor(\n    public readonly varIdentifier: Identifier | null,\n    isIncOrExpression: boolean | Expression,\n    isInc?: boolean\n  ) {\n    super();\n\n    if (isIncOrExpression instanceof Expression) {\n      this.expression = isIncOrExpression;\n      this.AddContent(this.expression);\n      this.isInc = Boolean(isInc);\n    } else {\n      this.isInc = isIncOrExpression as boolean;\n    }\n  }\n\n  get typeName(): string {\n    return \"IncDecExpression\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    // x = x + y\n    // ^^^ ^ ^ ^\n    //  4  1 3 2\n    // Reverse polish notation: (x 1 +) (assign to x)\n\n    // 1.\n    container.AddContent(\n      new RuntimeVariableReference(this.varIdentifier?.name || null)\n    );\n\n    // 2.\n    // - Expression used in the form ~ x += y\n    // - Simple version: ~ x++\n    if (this.expression) {\n      this.expression.GenerateIntoContainer(container);\n    } else {\n      container.AddContent(new IntValue(1));\n    }\n\n    // 3.\n    container.AddContent(\n      NativeFunctionCall.CallWithName(this.isInc ? \"+\" : \"-\")\n    );\n\n    // 4.\n    this._runtimeAssignment = new RuntimeVariableAssignment(\n      this.varIdentifier?.name || null,\n      false\n    );\n    container.AddContent(this._runtimeAssignment);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    const varResolveResult = context.ResolveVariableWithName(\n      this.varIdentifier?.name || \"\",\n      this\n    );\n\n    if (!varResolveResult.found) {\n      this.Error(\n        `variable for ${this.incrementDecrementWord} could not be found: '${this.varIdentifier}' after searching: {this.descriptionOfScope}`\n      );\n    }\n\n    if (!this._runtimeAssignment) {\n      throw new Error();\n    }\n\n    this._runtimeAssignment.isGlobal = varResolveResult.isGlobal;\n\n    if (\n      !(this.parent instanceof Weave) &&\n      !(this.parent instanceof FlowBase) &&\n      !(this.parent instanceof ContentList)\n    ) {\n      this.Error(`Can't use ${this.incrementDecrementWord} as sub-expression`);\n    }\n  }\n\n  get incrementDecrementWord(): \"increment\" | \"decrement\" {\n    if (this.isInc) {\n      return \"increment\";\n    }\n\n    return \"decrement\";\n  }\n\n  public readonly toString = (): string => {\n    if (this.expression) {\n      return `${this.varIdentifier?.name}${this.isInc ? \" += \" : \" -= \"}${\n        this.expression\n      }`;\n    }\n\n    return `${this.varIdentifier?.name}` + (this.isInc ? \"++\" : \"--\");\n  };\n}\n","import { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Story } from \"./Story\";\n\nexport class IncludedFile extends ParsedObject {\n  constructor(public readonly includedStory: Story | null) {\n    super();\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject | null => {\n    // Left to the main story to process\n    return null;\n  };\n}\n","export class InfixOperator {\n  constructor(\n    public readonly type: string,\n    public readonly precedence: number,\n    public readonly requireWhitespace: boolean\n  ) {}\n\n  public readonly toString = (): string => this.type;\n}\n","import { Argument } from \"./Argument\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { FlowLevel } from \"./Flow/FlowLevel\";\nimport { Identifier } from \"./Identifier\";\nimport { ParsedObject } from \"./Object\";\nimport { Story } from \"./Story\";\n\nexport class Knot extends FlowBase {\n  get flowLevel(): FlowLevel {\n    return FlowLevel.Knot;\n  }\n\n  constructor(\n    name: Identifier,\n    topLevelObjects: ParsedObject[],\n    args: Argument[],\n    isFunction: boolean\n  ) {\n    super(name, topLevelObjects, args, isFunction);\n  }\n\n  get typeName(): string {\n    return this.isFunction ? \"Function\" : \"Knot\";\n  }\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    let parentStory = this.story;\n\n    // Enforce rule that stitches must not have the same\n    // name as any knots that exist in the story\n    for (const stitchName in this.subFlowsByName) {\n      const knotWithStitchName = parentStory.ContentWithNameAtLevel(\n        stitchName,\n        FlowLevel.Knot,\n        false\n      );\n\n      if (knotWithStitchName) {\n        const stitch = this.subFlowsByName.get(stitchName);\n        const errorMsg = `Stitch '${\n          stitch ? stitch.name : \"NO STITCH FOUND\"\n        }' has the same name as a knot (on ${\n          knotWithStitchName.debugMetadata\n        })`;\n        this.Error(errorMsg, stitch);\n      }\n    }\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"../Expression/Expression\";\nimport { InkList as RuntimeInkList } from \"../../../../engine/InkList\";\nimport { InkListItem as RuntimeInkListItem } from \"../../../../engine/InkList\";\nimport { ListElementDefinition } from \"./ListElementDefinition\";\nimport { ListValue } from \"../../../../engine/Value\";\nimport { Identifier } from \"../Identifier\";\n\nexport class List extends Expression {\n  constructor(public readonly itemIdentifierList: Identifier[]) {\n    super();\n  }\n\n  get typeName(): string {\n    return \"List\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    const runtimeRawList = new RuntimeInkList();\n\n    if (this.itemIdentifierList != null) {\n      for (const itemIdentifier of this.itemIdentifierList) {\n        const nameParts = itemIdentifier?.name?.split(\".\") || [];\n\n        let listName: string | null = null;\n        let listItemName: string = \"\";\n        if (nameParts.length > 1) {\n          listName = nameParts[0];\n          listItemName = nameParts[1];\n        } else {\n          listItemName = nameParts[0];\n        }\n\n        const listItem = this.story.ResolveListItem(\n          listName,\n          listItemName,\n          this\n        ) as ListElementDefinition;\n\n        if (listItem === null) {\n          if (listName === null) {\n            this.Error(\n              `Could not find list definition that contains item '${itemIdentifier}'`\n            );\n          } else {\n            this.Error(`Could not find list item ${itemIdentifier}`);\n          }\n        } else {\n          if (listItem.parent == null) {\n            this.Error(\n              `Could not find list definition for item ${itemIdentifier}`\n            );\n            return;\n          }\n          if (!listName) {\n            listName = listItem.parent.identifier?.name || null;\n          }\n\n          const item = new RuntimeInkListItem(listName, listItem.name || null);\n\n          if (runtimeRawList.has(item.serialized())) {\n            this.Warning(`Duplicate of item '${itemIdentifier}' in list.`);\n          } else {\n            runtimeRawList.Add(item, listItem.seriesValue);\n          }\n        }\n      }\n    }\n\n    container.AddContent(new ListValue(runtimeRawList));\n  };\n}\n","import { ListDefinition } from \"./ListDefinition\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { Identifier } from \"../Identifier\";\n\nexport class ListElementDefinition extends ParsedObject {\n  public seriesValue: number = 0;\n\n  public parent: ListDefinition | null = null;\n\n  get fullName(): string {\n    const parentList = this.parent;\n    if (parentList === null) {\n      throw new Error(\"Can't get full name without a parent list.\");\n    }\n\n    return `${parentList.identifier?.name}.${this.name}`;\n  }\n\n  get typeName(): string {\n    return \"ListElement\";\n  }\n\n  get name(): string | null {\n    return this.indentifier?.name || null;\n  }\n\n  constructor(\n    public readonly indentifier: Identifier,\n    public readonly inInitialList: boolean,\n    public readonly explicitValue: number | null = null\n  ) {\n    super();\n    this.parent = super.parent as ListDefinition;\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    throw new Error(\"Not implemented.\");\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n    context.CheckForNamingCollisions(\n      this,\n      this.indentifier,\n      SymbolType.ListItem\n    );\n  }\n\n  public readonly toString = (): string => this.fullName;\n}\n","import { Argument } from \"./Argument\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { FlowLevel } from \"./Flow/FlowLevel\";\nimport { Identifier } from \"./Identifier\";\nimport { ParsedObject } from \"./Object\";\n\nexport class Stitch extends FlowBase {\n  get flowLevel(): FlowLevel {\n    return FlowLevel.Stitch;\n  }\n\n  constructor(\n    name: Identifier,\n    topLevelObjects: ParsedObject[],\n    args: Argument[],\n    isFunction: boolean\n  ) {\n    super(name, topLevelObjects, args, isFunction);\n  }\n\n  get typeName(): string {\n    return \"Stitch\";\n  }\n\n  public toString = (): string => {\n    return `${\n      this.parent !== null ? this.parent + \" > \" : \"\"\n    }${super.toString()}`;\n  };\n}\n","import { InkObject } from \"./Object\";\n\n// New version of tags is dynamic - it constructs the tags\n// at runtime based on BeginTag and EndTag control commands.\n// Plain text that's in the output stream is turned into tags\n// when you do story.currentTags.\n// The only place this is used is when flattening tags down\n// to string in advance, during dynamic string generation if\n// there's a tag embedded in it. See how ControlCommand.EndString\n// is implemented in Story.cs for more details + comment\nexport class Tag extends InkObject {\n  public readonly text: string;\n\n  constructor(tagText: string) {\n    super();\n    this.text = tagText.toString() || \"\";\n  }\n\n  public toString(): string {\n    return \"# \" + this.text;\n  }\n}\n","import { Path } from \"./Path\";\nimport { CallStack } from \"./CallStack\";\nimport { throwNullException } from \"./NullException\";\nimport { InkObject } from \"./Object\";\n\nexport class Choice extends InkObject {\n  public text: string = \"\";\n  public index: number = 0;\n  public threadAtGeneration: CallStack.Thread | null = null;\n  public sourcePath: string = \"\";\n  public targetPath: Path | null = null;\n  public isInvisibleDefault: boolean = false;\n  public tags: string[] | null = null;\n  public originalThreadIndex: number = 0;\n\n  get pathStringOnChoice(): string {\n    if (this.targetPath === null)\n      return throwNullException(\"Choice.targetPath\");\n    return this.targetPath.toString();\n  }\n  set pathStringOnChoice(value: string) {\n    this.targetPath = new Path(value);\n  }\n}\n","import { InkListItem } from \"./InkList\";\nimport { ListValue } from \"./Value\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { TryGetResult } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ListDefinitionsOrigin {\n  protected _lists: Map<string, ListDefinition>;\n  protected _allUnambiguousListValueCache: Map<string, ListValue>;\n\n  constructor(lists: ListDefinition[]) {\n    this._lists = new Map();\n    this._allUnambiguousListValueCache = new Map();\n\n    for (let list of lists) {\n      this._lists.set(list.name, list);\n\n      for (let [key, val] of list.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        let listValue = new ListValue(item, val);\n\n        if (!item.itemName) {\n          throw new Error(\"item.itemName is null or undefined.\");\n        }\n\n        this._allUnambiguousListValueCache.set(item.itemName, listValue);\n        this._allUnambiguousListValueCache.set(item.fullName, listValue);\n      }\n    }\n  }\n  get lists(): ListDefinition[] {\n    let listOfLists: ListDefinition[] = [];\n\n    for (let [, value] of this._lists) {\n      listOfLists.push(value);\n    }\n\n    return listOfLists;\n  }\n  public TryListGetDefinition(\n    name: string | null,\n    /* out */ def: ListDefinition | null\n  ): TryGetResult<ListDefinition | null> {\n    if (name === null) {\n      return { result: def, exists: false };\n    }\n    // initially, this function returns a boolean and the second parameter is an out.\n    let definition = this._lists.get(name);\n    if (!definition) return { result: def, exists: false };\n\n    return { result: definition, exists: true };\n  }\n  public FindSingleItemListWithName(name: string | null) {\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let val = this._allUnambiguousListValueCache.get(name);\n\n    if (typeof val !== \"undefined\") {\n      return val;\n    }\n\n    return null;\n  }\n}\n","import { Container } from \"./Container\";\nimport {\n  Value,\n  IntValue,\n  FloatValue,\n  StringValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n  BoolValue,\n} from \"./Value\";\nimport { Glue } from \"./Glue\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { Divert } from \"./Divert\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { VariableReference } from \"./VariableReference\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { Path } from \"./Path\";\nimport { Choice } from \"./Choice\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { InkListItem, InkList } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class JsonSerialisation {\n  public static JArrayToRuntimeObjList(\n    jArray: any[],\n    skipLast: boolean = false\n  ) {\n    let count = jArray.length;\n    if (skipLast) count--;\n\n    let list: InkObject[] = [];\n\n    for (let i = 0; i < count; i++) {\n      let jTok = jArray[i];\n      let runtimeObj = this.JTokenToRuntimeObject(jTok);\n      if (runtimeObj === null) {\n        return throwNullException(\"runtimeObj\");\n      }\n      list.push(runtimeObj);\n    }\n\n    return list;\n  }\n\n  public static WriteDictionaryRuntimeObjs(\n    writer: SimpleJson.Writer,\n    dictionary: Map<string, InkObject>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dictionary) {\n      writer.WritePropertyStart(key);\n      this.WriteRuntimeObject(writer, value);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteListRuntimeObjs(\n    writer: SimpleJson.Writer,\n    list: InkObject[]\n  ) {\n    writer.WriteArrayStart();\n    for (let value of list) {\n      this.WriteRuntimeObject(writer, value);\n    }\n    writer.WriteArrayEnd();\n  }\n\n  public static WriteIntDictionary(\n    writer: SimpleJson.Writer,\n    dict: Map<string, number>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dict) {\n      writer.WriteIntProperty(key, value);\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteRuntimeObject(\n    writer: SimpleJson.Writer,\n    obj: InkObject\n  ): void {\n    let container = asOrNull(obj, Container);\n    if (container) {\n      this.WriteRuntimeContainer(writer, container);\n      return;\n    }\n\n    let divert = asOrNull(obj, Divert);\n    if (divert) {\n      let divTypeKey = \"->\";\n      if (divert.isExternal) {\n        divTypeKey = \"x()\";\n      } else if (divert.pushesToStack) {\n        if (divert.stackPushType == PushPopType.Function) {\n          divTypeKey = \"f()\";\n        } else if (divert.stackPushType == PushPopType.Tunnel) {\n          divTypeKey = \"->t->\";\n        }\n      }\n\n      let targetStr;\n      if (divert.hasVariableTarget) {\n        targetStr = divert.variableDivertName;\n      } else {\n        targetStr = divert.targetPathString;\n      }\n\n      writer.WriteObjectStart();\n      writer.WriteProperty(divTypeKey, targetStr);\n\n      if (divert.hasVariableTarget) {\n        writer.WriteProperty(\"var\", true);\n      }\n\n      if (divert.isConditional) {\n        writer.WriteProperty(\"c\", true);\n      }\n\n      if (divert.externalArgs > 0) {\n        writer.WriteIntProperty(\"exArgs\", divert.externalArgs);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choicePoint = asOrNull(obj, ChoicePoint);\n    if (choicePoint) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"*\", choicePoint.pathStringOnChoice);\n      writer.WriteIntProperty(\"flg\", choicePoint.flags);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let boolVal = asOrNull(obj, BoolValue);\n    if (boolVal) {\n      writer.WriteBool(boolVal.value);\n      return;\n    }\n\n    let intVal = asOrNull(obj, IntValue);\n    if (intVal) {\n      writer.WriteInt(intVal.value);\n      return;\n    }\n\n    let floatVal = asOrNull(obj, FloatValue);\n    if (floatVal) {\n      writer.WriteFloat(floatVal.value);\n      return;\n    }\n\n    let strVal = asOrNull(obj, StringValue);\n    if (strVal) {\n      if (strVal.isNewline) {\n        writer.Write(\"\\n\", false);\n      } else {\n        writer.WriteStringStart();\n        writer.WriteStringInner(\"^\");\n        writer.WriteStringInner(strVal.value);\n        writer.WriteStringEnd();\n      }\n      return;\n    }\n\n    let listVal = asOrNull(obj, ListValue);\n    if (listVal) {\n      this.WriteInkList(writer, listVal);\n      return;\n    }\n\n    let divTargetVal = asOrNull(obj, DivertTargetValue);\n    if (divTargetVal) {\n      writer.WriteObjectStart();\n      if (divTargetVal.value === null) {\n        return throwNullException(\"divTargetVal.value\");\n      }\n      writer.WriteProperty(\"^->\", divTargetVal.value.componentsString);\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let varPtrVal = asOrNull(obj, VariablePointerValue);\n    if (varPtrVal) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"^var\", varPtrVal.value);\n      writer.WriteIntProperty(\"ci\", varPtrVal.contextIndex);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let glue = asOrNull(obj, Glue);\n    if (glue) {\n      writer.Write(\"<>\");\n      return;\n    }\n\n    let controlCmd = asOrNull(obj, ControlCommand);\n    if (controlCmd) {\n      writer.Write(\n        JsonSerialisation._controlCommandNames[controlCmd.commandType]\n      );\n      return;\n    }\n\n    let nativeFunc = asOrNull(obj, NativeFunctionCall);\n    if (nativeFunc) {\n      let name = nativeFunc.name;\n\n      if (name == \"^\") name = \"L^\";\n\n      writer.Write(name);\n      return;\n    }\n\n    let varRef = asOrNull(obj, VariableReference);\n    if (varRef) {\n      writer.WriteObjectStart();\n      let readCountPath = varRef.pathStringForCount;\n      if (readCountPath != null) {\n        writer.WriteProperty(\"CNT?\", readCountPath);\n      } else {\n        writer.WriteProperty(\"VAR?\", varRef.name);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let varAss = asOrNull(obj, VariableAssignment);\n    if (varAss) {\n      writer.WriteObjectStart();\n\n      let key = varAss.isGlobal ? \"VAR=\" : \"temp=\";\n      writer.WriteProperty(key, varAss.variableName);\n\n      // Reassignment?\n      if (!varAss.isNewDeclaration) writer.WriteProperty(\"re\", true);\n\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let voidObj = asOrNull(obj, Void);\n    if (voidObj) {\n      writer.Write(\"void\");\n      return;\n    }\n\n    let tag = asOrNull(obj, Tag);\n    if (tag) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"#\", tag.text);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choice = asOrNull(obj, Choice);\n    if (choice) {\n      this.WriteChoice(writer, choice);\n      return;\n    }\n\n    throw new Error(\"Failed to convert runtime object to Json token: \" + obj);\n  }\n\n  public static JObjectToDictionaryRuntimeObjs(jObject: Record<string, any>) {\n    let dict: Map<string, InkObject> = new Map();\n\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        let inkObject = this.JTokenToRuntimeObject(jObject[key]);\n        if (inkObject === null) {\n          return throwNullException(\"inkObject\");\n        }\n        dict.set(key, inkObject);\n      }\n    }\n\n    return dict;\n  }\n\n  public static JObjectToIntDictionary(jObject: Record<string, any>) {\n    let dict: Map<string, number> = new Map();\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        dict.set(key, parseInt(jObject[key]));\n      }\n    }\n    return dict;\n  }\n\n  public static JTokenToRuntimeObject(token: any): InkObject | null {\n    if (\n      (typeof token === \"number\" && !isNaN(token)) ||\n      typeof token === \"boolean\"\n    ) {\n      return Value.Create(token);\n    }\n\n    if (typeof token === \"string\") {\n      let str = token.toString();\n\n      // String value\n      let firstChar = str[0];\n      if (firstChar == \"^\") return new StringValue(str.substring(1));\n      else if (firstChar == \"\\n\" && str.length == 1)\n        return new StringValue(\"\\n\");\n\n      // Glue\n      if (str == \"<>\") return new Glue();\n\n      // Control commands (would looking up in a hash set be faster?)\n      for (let i = 0; i < JsonSerialisation._controlCommandNames.length; ++i) {\n        let cmdName = JsonSerialisation._controlCommandNames[i];\n        if (str == cmdName) {\n          return new ControlCommand(i);\n        }\n      }\n\n      // Native functions\n      if (str == \"L^\") str = \"^\";\n      if (NativeFunctionCall.CallExistsWithName(str))\n        return NativeFunctionCall.CallWithName(str);\n\n      // Pop\n      if (str == \"->->\") return ControlCommand.PopTunnel();\n      else if (str == \"~ret\") return ControlCommand.PopFunction();\n\n      // Void\n      if (str == \"void\") return new Void();\n    }\n\n    if (typeof token === \"object\" && !Array.isArray(token)) {\n      let obj = token as Record<string, any>;\n      let propValue;\n\n      // Divert target value to path\n      if (obj[\"^->\"]) {\n        propValue = obj[\"^->\"];\n        return new DivertTargetValue(new Path(propValue.toString()));\n      }\n\n      // VariablePointerValue\n      if (obj[\"^var\"]) {\n        propValue = obj[\"^var\"];\n        let varPtr = new VariablePointerValue(propValue.toString());\n        if (\"ci\" in obj) {\n          propValue = obj[\"ci\"];\n          varPtr.contextIndex = parseInt(propValue);\n        }\n        return varPtr;\n      }\n\n      // Divert\n      let isDivert = false;\n      let pushesToStack = false;\n      let divPushType = PushPopType.Function;\n      let external = false;\n      if ((propValue = obj[\"->\"])) {\n        isDivert = true;\n      } else if ((propValue = obj[\"f()\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Function;\n      } else if ((propValue = obj[\"->t->\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Tunnel;\n      } else if ((propValue = obj[\"x()\"])) {\n        isDivert = true;\n        external = true;\n        pushesToStack = false;\n        divPushType = PushPopType.Function;\n      }\n\n      if (isDivert) {\n        let divert = new Divert();\n        divert.pushesToStack = pushesToStack;\n        divert.stackPushType = divPushType;\n        divert.isExternal = external;\n\n        let target = propValue.toString();\n\n        if ((propValue = obj[\"var\"])) divert.variableDivertName = target;\n        else divert.targetPathString = target;\n\n        divert.isConditional = !!obj[\"c\"];\n\n        if (external) {\n          if ((propValue = obj[\"exArgs\"]))\n            divert.externalArgs = parseInt(propValue);\n        }\n\n        return divert;\n      }\n\n      // Choice\n      if ((propValue = obj[\"*\"])) {\n        let choice = new ChoicePoint();\n        choice.pathStringOnChoice = propValue.toString();\n\n        if ((propValue = obj[\"flg\"])) choice.flags = parseInt(propValue);\n\n        return choice;\n      }\n\n      // Variable reference\n      if ((propValue = obj[\"VAR?\"])) {\n        return new VariableReference(propValue.toString());\n      } else if ((propValue = obj[\"CNT?\"])) {\n        let readCountVarRef = new VariableReference();\n        readCountVarRef.pathStringForCount = propValue.toString();\n        return readCountVarRef;\n      }\n\n      // Variable assignment\n      let isVarAss = false;\n      let isGlobalVar = false;\n      if ((propValue = obj[\"VAR=\"])) {\n        isVarAss = true;\n        isGlobalVar = true;\n      } else if ((propValue = obj[\"temp=\"])) {\n        isVarAss = true;\n        isGlobalVar = false;\n      }\n      if (isVarAss) {\n        let varName = propValue.toString();\n        let isNewDecl = !obj[\"re\"];\n        let varAss = new VariableAssignment(varName, isNewDecl);\n        varAss.isGlobal = isGlobalVar;\n        return varAss;\n      }\n      if (obj[\"#\"] !== undefined) {\n        propValue = obj[\"#\"];\n        return new Tag(propValue.toString());\n      }\n\n      // List value\n      if ((propValue = obj[\"list\"])) {\n        // var listContent = (Dictionary<string, object>)propValue;\n        let listContent = propValue as Record<string, any>;\n        let rawList = new InkList();\n        if ((propValue = obj[\"origins\"])) {\n          // var namesAsObjs = (List<object>)propValue;\n          let namesAsObjs = propValue as string[];\n          // rawList.SetInitialOriginNames(namesAsObjs.Cast<string>().ToList());\n          rawList.SetInitialOriginNames(namesAsObjs);\n        }\n\n        for (let key in listContent) {\n          if (listContent.hasOwnProperty(key)) {\n            let nameToVal = listContent[key];\n            let item = new InkListItem(key);\n            let val = parseInt(nameToVal);\n            rawList.Add(item, val);\n          }\n        }\n\n        return new ListValue(rawList);\n      }\n\n      if (obj[\"originalChoicePath\"] != null) return this.JObjectToChoice(obj);\n    }\n\n    // Array is always a Runtime.Container\n    if (Array.isArray(token)) {\n      return this.JArrayToContainer(token);\n    }\n\n    if (token === null || token === undefined) return null;\n\n    throw new Error(\n      \"Failed to convert token to runtime object: \" +\n        this.toJson(token, [\"parent\"])\n    );\n  }\n\n  public static toJson<T>(\n    me: T,\n    removes?: (keyof T)[],\n    space?: number\n  ): string {\n    return JSON.stringify(\n      me,\n      (k, v) => (removes?.some((r) => r === k) ? undefined : v),\n      space\n    );\n  }\n\n  public static WriteRuntimeContainer(\n    writer: SimpleJson.Writer,\n    container: Container | null,\n    withoutName: boolean = false\n  ) {\n    writer.WriteArrayStart();\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    for (let c of container.content) this.WriteRuntimeObject(writer, c);\n\n    let namedOnlyContent = container.namedOnlyContent;\n    let countFlags = container.countFlags;\n    let hasNameProperty = container.name != null && !withoutName;\n\n    let hasTerminator =\n      namedOnlyContent != null || countFlags > 0 || hasNameProperty;\n    if (hasTerminator) {\n      writer.WriteObjectStart();\n    }\n\n    if (namedOnlyContent != null) {\n      for (let [key, value] of namedOnlyContent) {\n        let name = key;\n        let namedContainer = asOrNull(value, Container);\n        writer.WritePropertyStart(name);\n        this.WriteRuntimeContainer(writer, namedContainer, true);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (countFlags > 0) writer.WriteIntProperty(\"#f\", countFlags);\n\n    if (hasNameProperty) writer.WriteProperty(\"#n\", container.name);\n\n    if (hasTerminator) writer.WriteObjectEnd();\n    else writer.WriteNull();\n\n    writer.WriteArrayEnd();\n  }\n\n  public static JArrayToContainer(jArray: any[]) {\n    let container = new Container();\n    container.content = this.JArrayToRuntimeObjList(jArray, true);\n\n    let terminatingObj = jArray[jArray.length - 1] as Record<string, any>;\n    if (terminatingObj != null) {\n      let namedOnlyContent = new Map();\n\n      for (let key in terminatingObj) {\n        if (key == \"#f\") {\n          container.countFlags = parseInt(terminatingObj[key]);\n        } else if (key == \"#n\") {\n          container.name = terminatingObj[key].toString();\n        } else {\n          let namedContentItem = this.JTokenToRuntimeObject(\n            terminatingObj[key]\n          );\n          // var namedSubContainer = namedContentItem as Container;\n          let namedSubContainer = asOrNull(namedContentItem, Container);\n          if (namedSubContainer) namedSubContainer.name = key;\n          namedOnlyContent.set(key, namedContentItem);\n        }\n      }\n\n      container.namedOnlyContent = namedOnlyContent;\n    }\n\n    return container;\n  }\n\n  public static JObjectToChoice(jObj: Record<string, any>) {\n    let choice = new Choice();\n    choice.text = jObj[\"text\"].toString();\n    choice.index = parseInt(jObj[\"index\"]);\n    choice.sourcePath = jObj[\"originalChoicePath\"].toString();\n    choice.originalThreadIndex = parseInt(jObj[\"originalThreadIndex\"]);\n    choice.pathStringOnChoice = jObj[\"targetPath\"].toString();\n    return choice;\n  }\n\n  public static WriteChoice(writer: SimpleJson.Writer, choice: Choice) {\n    writer.WriteObjectStart();\n    writer.WriteProperty(\"text\", choice.text);\n    writer.WriteIntProperty(\"index\", choice.index);\n    writer.WriteProperty(\"originalChoicePath\", choice.sourcePath);\n    writer.WriteIntProperty(\"originalThreadIndex\", choice.originalThreadIndex);\n    writer.WriteProperty(\"targetPath\", choice.pathStringOnChoice);\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteInkList(writer: SimpleJson.Writer, listVal: ListValue) {\n    let rawList = listVal.value;\n    if (rawList === null) {\n      return throwNullException(\"rawList\");\n    }\n\n    writer.WriteObjectStart();\n    writer.WritePropertyStart(\"list\");\n    writer.WriteObjectStart();\n\n    for (let [key, val] of rawList) {\n      let item = InkListItem.fromSerializedKey(key);\n      let itemVal = val;\n\n      if (item.itemName === null) {\n        return throwNullException(\"item.itemName\");\n      }\n\n      writer.WritePropertyNameStart();\n      writer.WritePropertyNameInner(item.originName ? item.originName : \"?\");\n      writer.WritePropertyNameInner(\".\");\n      writer.WritePropertyNameInner(item.itemName);\n      writer.WritePropertyNameEnd();\n\n      writer.Write(itemVal);\n\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    writer.WritePropertyEnd();\n\n    if (\n      rawList.Count == 0 &&\n      rawList.originNames != null &&\n      rawList.originNames.length > 0\n    ) {\n      writer.WritePropertyStart(\"origins\");\n      writer.WriteArrayStart();\n      for (let name of rawList.originNames) writer.Write(name);\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n  }\n\n  public static ListDefinitionsToJToken(origin: ListDefinitionsOrigin) {\n    let result: Record<string, any> = {};\n\n    for (let def of origin.lists) {\n      let listDefJson: Record<string, any> = {};\n\n      for (let [key, val] of def.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.itemName === null) {\n          return throwNullException(\"item.itemName\");\n        }\n        listDefJson[item.itemName] = val;\n      }\n\n      result[def.name] = listDefJson;\n    }\n\n    return result;\n  }\n\n  public static JTokenToListDefinitions(obj: Record<string, any>) {\n    // var defsObj = (Dictionary<string, object>)obj;\n    let defsObj = obj;\n\n    let allDefs: ListDefinition[] = [];\n\n    for (let key in defsObj) {\n      if (defsObj.hasOwnProperty(key)) {\n        let name = key.toString();\n        // var listDefJson = (Dictionary<string, object>)kv.Value;\n        let listDefJson = defsObj[key] as Record<string, any>;\n\n        // Cast (string, object) to (string, int) for items\n        let items: Map<string, number> = new Map();\n\n        for (let nameValueKey in listDefJson) {\n          if (defsObj.hasOwnProperty(key)) {\n            let nameValue = listDefJson[nameValueKey];\n            items.set(nameValueKey, parseInt(nameValue));\n          }\n        }\n\n        let def = new ListDefinition(name, items);\n        allDefs.push(def);\n      }\n    }\n\n    return new ListDefinitionsOrigin(allDefs);\n  }\n\n  private static _controlCommandNames = (() => {\n    let _controlCommandNames: string[] = [];\n\n    _controlCommandNames[ControlCommand.CommandType.EvalStart] = \"ev\";\n    _controlCommandNames[ControlCommand.CommandType.EvalOutput] = \"out\";\n    _controlCommandNames[ControlCommand.CommandType.EvalEnd] = \"/ev\";\n    _controlCommandNames[ControlCommand.CommandType.Duplicate] = \"du\";\n    _controlCommandNames[ControlCommand.CommandType.PopEvaluatedValue] = \"pop\";\n    _controlCommandNames[ControlCommand.CommandType.PopFunction] = \"~ret\";\n    _controlCommandNames[ControlCommand.CommandType.PopTunnel] = \"->->\";\n    _controlCommandNames[ControlCommand.CommandType.BeginString] = \"str\";\n    _controlCommandNames[ControlCommand.CommandType.EndString] = \"/str\";\n    _controlCommandNames[ControlCommand.CommandType.NoOp] = \"nop\";\n    _controlCommandNames[ControlCommand.CommandType.ChoiceCount] = \"choiceCnt\";\n    _controlCommandNames[ControlCommand.CommandType.Turns] = \"turn\";\n    _controlCommandNames[ControlCommand.CommandType.TurnsSince] = \"turns\";\n    _controlCommandNames[ControlCommand.CommandType.ReadCount] = \"readc\";\n    _controlCommandNames[ControlCommand.CommandType.Random] = \"rnd\";\n    _controlCommandNames[ControlCommand.CommandType.SeedRandom] = \"srnd\";\n    _controlCommandNames[ControlCommand.CommandType.VisitIndex] = \"visit\";\n    _controlCommandNames[ControlCommand.CommandType.SequenceShuffleIndex] =\n      \"seq\";\n    _controlCommandNames[ControlCommand.CommandType.StartThread] = \"thread\";\n    _controlCommandNames[ControlCommand.CommandType.Done] = \"done\";\n    _controlCommandNames[ControlCommand.CommandType.End] = \"end\";\n    _controlCommandNames[ControlCommand.CommandType.ListFromInt] = \"listInt\";\n    _controlCommandNames[ControlCommand.CommandType.ListRange] = \"range\";\n    _controlCommandNames[ControlCommand.CommandType.ListRandom] = \"lrnd\";\n    _controlCommandNames[ControlCommand.CommandType.BeginTag] = \"#\";\n    _controlCommandNames[ControlCommand.CommandType.EndTag] = \"/#\";\n\n    for (let i = 0; i < ControlCommand.CommandType.TOTAL_VALUES; ++i) {\n      if (_controlCommandNames[i] == null)\n        throw new Error(\"Control command not accounted for in serialisation\");\n    }\n\n    return _controlCommandNames;\n  })();\n}\n","import { PushPopType } from \"./PushPop\";\nimport { Path } from \"./Path\";\nimport { Story } from \"./Story\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { ListValue } from \"./Value\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { Pointer } from \"./Pointer\";\nimport { InkObject } from \"./Object\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class CallStack {\n  get elements() {\n    return this.callStack;\n  }\n\n  get depth() {\n    return this.elements.length;\n  }\n\n  get currentElement() {\n    let thread = this._threads[this._threads.length - 1];\n    let cs = thread.callstack;\n    return cs[cs.length - 1];\n  }\n\n  get currentElementIndex() {\n    return this.callStack.length - 1;\n  }\n\n  get currentThread(): CallStack.Thread {\n    return this._threads[this._threads.length - 1];\n  }\n  set currentThread(value: CallStack.Thread) {\n    Debug.Assert(\n      this._threads.length == 1,\n      \"Shouldn't be directly setting the current thread when we have a stack of them\"\n    );\n\n    this._threads.length = 0;\n    this._threads.push(value);\n  }\n\n  get canPop() {\n    return this.callStack.length > 1;\n  }\n\n  constructor(storyContext: Story);\n  constructor(toCopy: CallStack);\n  constructor() {\n    if (arguments[0] instanceof Story) {\n      let storyContext = arguments[0] as Story;\n\n      this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n      this.Reset();\n    } else {\n      let toCopy = arguments[0] as CallStack;\n\n      this._threads = [];\n      for (let otherThread of toCopy._threads) {\n        this._threads.push(otherThread.Copy());\n      }\n      this._threadCounter = toCopy._threadCounter;\n      this._startOfRoot = toCopy._startOfRoot.copy();\n    }\n  }\n\n  public Reset() {\n    this._threads = [];\n    this._threads.push(new CallStack.Thread());\n\n    this._threads[0].callstack.push(\n      new CallStack.Element(PushPopType.Tunnel, this._startOfRoot)\n    );\n  }\n\n  public SetJsonToken(jObject: Record<string, any>, storyContext: Story) {\n    this._threads.length = 0;\n\n    // TODO: (List<object>) jObject [\"threads\"];\n    let jThreads: any[] = jObject[\"threads\"];\n\n    for (let jThreadTok of jThreads) {\n      // TODO: var jThreadObj = (Dictionary<string, object>)jThreadTok;\n      let jThreadObj = jThreadTok;\n      let thread = new CallStack.Thread(jThreadObj, storyContext);\n      this._threads.push(thread);\n    }\n\n    // TODO: (int)jObject [\"threadCounter\"];\n    this._threadCounter = parseInt(jObject[\"threadCounter\"]);\n    this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n  }\n  public WriteJson(w: SimpleJson.Writer) {\n    w.WriteObject((writer) => {\n      writer.WritePropertyStart(\"threads\");\n      writer.WriteArrayStart();\n\n      for (let thread of this._threads) {\n        thread.WriteJson(writer);\n      }\n\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WritePropertyStart(\"threadCounter\");\n      writer.WriteInt(this._threadCounter);\n      writer.WritePropertyEnd();\n    });\n  }\n\n  public PushThread() {\n    let newThread = this.currentThread.Copy();\n    this._threadCounter++;\n    newThread.threadIndex = this._threadCounter;\n    this._threads.push(newThread);\n  }\n\n  public ForkThread() {\n    let forkedThread = this.currentThread.Copy();\n    this._threadCounter++;\n    forkedThread.threadIndex = this._threadCounter;\n    return forkedThread;\n  }\n\n  public PopThread() {\n    if (this.canPopThread) {\n      this._threads.splice(this._threads.indexOf(this.currentThread), 1); // should be equivalent to a pop()\n    } else {\n      throw new Error(\"Can't pop thread\");\n    }\n  }\n\n  get canPopThread() {\n    return this._threads.length > 1 && !this.elementIsEvaluateFromGame;\n  }\n\n  get elementIsEvaluateFromGame() {\n    return this.currentElement.type == PushPopType.FunctionEvaluationFromGame;\n  }\n\n  public Push(\n    type: PushPopType,\n    externalEvaluationStackHeight: number = 0,\n    outputStreamLengthWithPushed: number = 0\n  ) {\n    let element = new CallStack.Element(\n      type,\n      this.currentElement.currentPointer,\n      false\n    );\n\n    element.evaluationStackHeightWhenPushed = externalEvaluationStackHeight;\n    element.functionStartInOutputStream = outputStreamLengthWithPushed;\n\n    this.callStack.push(element);\n  }\n\n  public CanPop(type: PushPopType | null = null) {\n    if (!this.canPop) return false;\n\n    if (type == null) return true;\n\n    return this.currentElement.type == type;\n  }\n\n  public Pop(type: PushPopType | null = null) {\n    if (this.CanPop(type)) {\n      this.callStack.pop();\n      return;\n    } else {\n      throw new Error(\"Mismatched push/pop in Callstack\");\n    }\n  }\n\n  public GetTemporaryVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    let varValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (varValue.exists) {\n      return varValue.result;\n    } else {\n      return null;\n    }\n  }\n\n  public SetTemporaryVariable(\n    name: string,\n    value: any,\n    declareNew: boolean,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    if (!declareNew && !contextElement.temporaryVariables.get(name)) {\n      throw new Error(\"Could not find temporary variable to set: \" + name);\n    }\n\n    let oldValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (oldValue.exists)\n      ListValue.RetainListOriginsForAssignment(oldValue.result, value);\n\n    contextElement.temporaryVariables.set(name, value);\n  }\n\n  public ContextForVariableNamed(name: string) {\n    if (this.currentElement.temporaryVariables.get(name)) {\n      return this.currentElementIndex + 1;\n    } else {\n      return 0;\n    }\n  }\n\n  public ThreadWithIndex(index: number) {\n    let filtered = this._threads.filter((t) => {\n      if (t.threadIndex == index) return t;\n    });\n\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n\n  get callStack() {\n    return this.currentThread.callstack;\n  }\n\n  get callStackTrace() {\n    let sb = new StringBuilder();\n\n    for (let t = 0; t < this._threads.length; t++) {\n      let thread = this._threads[t];\n      let isCurrent = t == this._threads.length - 1;\n      sb.AppendFormat(\n        \"=== THREAD {0}/{1} {2}===\\n\",\n        t + 1,\n        this._threads.length,\n        isCurrent ? \"(current) \" : \"\"\n      );\n\n      for (let i = 0; i < thread.callstack.length; i++) {\n        if (thread.callstack[i].type == PushPopType.Function)\n          sb.Append(\"  [FUNCTION] \");\n        else sb.Append(\"  [TUNNEL] \");\n\n        let pointer = thread.callstack[i].currentPointer;\n        if (!pointer.isNull) {\n          sb.Append(\"<SOMEWHERE IN \");\n          if (pointer.container === null) {\n            return throwNullException(\"pointer.container\");\n          }\n          sb.Append(pointer.container.path.toString());\n          sb.AppendLine(\">\");\n        }\n      }\n    }\n\n    return sb.toString();\n  }\n\n  public _threads!: CallStack.Thread[]; // Banged because it's initialized in Reset().\n  public _threadCounter: number = 0;\n  public _startOfRoot: Pointer = Pointer.Null;\n}\n\nexport namespace CallStack {\n  export class Element {\n    public currentPointer: Pointer;\n    public inExpressionEvaluation: boolean;\n    public temporaryVariables: Map<string, InkObject>;\n    public type: PushPopType;\n\n    public evaluationStackHeightWhenPushed: number = 0;\n    public functionStartInOutputStream: number = 0;\n\n    constructor(\n      type: PushPopType,\n      pointer: Pointer,\n      inExpressionEvaluation: boolean = false\n    ) {\n      this.currentPointer = pointer.copy();\n      this.inExpressionEvaluation = inExpressionEvaluation;\n      this.temporaryVariables = new Map();\n      this.type = type;\n    }\n\n    public Copy() {\n      let copy = new Element(\n        this.type,\n        this.currentPointer,\n        this.inExpressionEvaluation\n      );\n      copy.temporaryVariables = new Map(this.temporaryVariables);\n      copy.evaluationStackHeightWhenPushed =\n        this.evaluationStackHeightWhenPushed;\n      copy.functionStartInOutputStream = this.functionStartInOutputStream;\n      return copy;\n    }\n  }\n\n  export class Thread {\n    public callstack: Element[];\n    public threadIndex: number = 0;\n    public previousPointer: Pointer = Pointer.Null;\n\n    constructor();\n    constructor(jThreadObj: any, storyContext: Story);\n    constructor() {\n      this.callstack = [];\n\n      if (arguments[0] && arguments[1]) {\n        let jThreadObj = arguments[0];\n        let storyContext = arguments[1];\n\n        // TODO: (int) jThreadObj['threadIndex'] can raise;\n        this.threadIndex = parseInt(jThreadObj[\"threadIndex\"]);\n\n        let jThreadCallstack = jThreadObj[\"callstack\"];\n\n        for (let jElTok of jThreadCallstack) {\n          let jElementObj = jElTok;\n\n          // TODO: (int) jElementObj['type'] can raise;\n          let pushPopType: PushPopType = parseInt(jElementObj[\"type\"]);\n\n          let pointer = Pointer.Null;\n\n          let currentContainerPathStr: string;\n          // TODO: jElementObj.TryGetValue (\"cPath\", out currentContainerPathStrToken);\n          let currentContainerPathStrToken = jElementObj[\"cPath\"];\n          if (typeof currentContainerPathStrToken !== \"undefined\") {\n            currentContainerPathStr = currentContainerPathStrToken.toString();\n\n            let threadPointerResult = storyContext.ContentAtPath(\n              new Path(currentContainerPathStr)\n            );\n            pointer.container = threadPointerResult.container;\n            pointer.index = parseInt(jElementObj[\"idx\"]);\n\n            if (threadPointerResult.obj == null)\n              throw new Error(\n                \"When loading state, internal story location couldn't be found: \" +\n                  currentContainerPathStr +\n                  \". Has the story changed since this save data was created?\"\n              );\n            else if (threadPointerResult.approximate) {\n              if (pointer.container === null) {\n                return throwNullException(\"pointer.container\");\n              }\n              storyContext.Warning(\n                \"When loading state, exact internal story location couldn't be found: '\" +\n                  currentContainerPathStr +\n                  \"', so it was approximated to '\" +\n                  pointer.container.path.toString() +\n                  \"' to recover. Has the story changed since this save data was created?\"\n              );\n            }\n          }\n\n          let inExpressionEvaluation = !!jElementObj[\"exp\"];\n\n          let el = new Element(pushPopType, pointer, inExpressionEvaluation);\n\n          let temps = jElementObj[\"temp\"];\n          if (typeof temps !== \"undefined\") {\n            el.temporaryVariables =\n              JsonSerialisation.JObjectToDictionaryRuntimeObjs(temps);\n          } else {\n            el.temporaryVariables.clear();\n          }\n\n          this.callstack.push(el);\n        }\n\n        let prevContentObjPath = jThreadObj[\"previousContentObject\"];\n        if (typeof prevContentObjPath !== \"undefined\") {\n          let prevPath = new Path(prevContentObjPath.toString());\n          this.previousPointer = storyContext.PointerAtPath(prevPath);\n        }\n      }\n    }\n\n    public Copy() {\n      let copy = new Thread();\n      copy.threadIndex = this.threadIndex;\n      for (let e of this.callstack) {\n        copy.callstack.push(e.Copy());\n      }\n      copy.previousPointer = this.previousPointer.copy();\n      return copy;\n    }\n\n    public WriteJson(writer: SimpleJson.Writer) {\n      writer.WriteObjectStart();\n\n      writer.WritePropertyStart(\"callstack\");\n      writer.WriteArrayStart();\n      for (let el of this.callstack) {\n        writer.WriteObjectStart();\n        if (!el.currentPointer.isNull) {\n          if (el.currentPointer.container === null) {\n            return throwNullException(\"el.currentPointer.container\");\n          }\n          writer.WriteProperty(\n            \"cPath\",\n            el.currentPointer.container.path.componentsString\n          );\n          writer.WriteIntProperty(\"idx\", el.currentPointer.index);\n        }\n\n        writer.WriteProperty(\"exp\", el.inExpressionEvaluation);\n        writer.WriteIntProperty(\"type\", el.type);\n\n        if (el.temporaryVariables.size > 0) {\n          writer.WritePropertyStart(\"temp\");\n          JsonSerialisation.WriteDictionaryRuntimeObjs(\n            writer,\n            el.temporaryVariables\n          );\n          writer.WritePropertyEnd();\n        }\n\n        writer.WriteObjectEnd();\n      }\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WriteIntProperty(\"threadIndex\", this.threadIndex);\n\n      if (!this.previousPointer.isNull) {\n        let resolvedPointer = this.previousPointer.Resolve();\n        if (resolvedPointer === null) {\n          return throwNullException(\"this.previousPointer.Resolve()\");\n        }\n        writer.WriteProperty(\n          \"previousContentObject\",\n          resolvedPointer.path.toString()\n        );\n      }\n\n      writer.WriteObjectEnd();\n    }\n  }\n}\n","import {\n  AbstractValue,\n  Value,\n  VariablePointerValue,\n  ListValue,\n  IntValue,\n  FloatValue,\n  BoolValue,\n} from \"./Value\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { InkObject } from \"./Object\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { StoryException } from \"./StoryException\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { asOrThrows, asOrNull, isEquatable } from \"./TypeAssertion\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { CallStack } from \"./CallStack\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { InkList } from \"./Story\";\nimport { Path } from \"./Path\";\n\n// Fake class wrapper around VariableState to have correct typing\n// when using the Proxy syntax in typescript\nfunction VariablesStateAccessor<T>(): new () => Pick<T, keyof T> {\n  return class {} as any;\n}\n\ntype VariableStateValue = boolean | string | number | InkList | Path | null;\n\nexport class VariablesState extends VariablesStateAccessor<\n  Record<string, any>\n>() {\n  // The way variableChangedEvent is a bit different than the reference implementation.\n  // Originally it uses the C# += operator to add delegates, but in js we need to maintain\n  // an actual collection of delegates (ie. callbacks) to register a new one, there is a\n  // special ObserveVariableChange method below.\n  public variableChangedEventCallbacks: Array<\n    (variableName: string, newValue: InkObject) => void\n  > = [];\n  public variableChangedEvent(variableName: string, newValue: InkObject): void {\n    for (let callback of this.variableChangedEventCallbacks) {\n      callback(variableName, newValue);\n    }\n  }\n\n  public patch: StatePatch | null = null;\n\n  get batchObservingVariableChanges() {\n    return this._batchObservingVariableChanges;\n  }\n  set batchObservingVariableChanges(value: boolean) {\n    this._batchObservingVariableChanges = value;\n    if (value) {\n      this._changedVariablesForBatchObs = new Set();\n    } else {\n      if (this._changedVariablesForBatchObs != null) {\n        for (let variableName of this._changedVariablesForBatchObs) {\n          let currentValue = this._globalVariables.get(variableName);\n          if (!currentValue) {\n            throwNullException(\"currentValue\");\n          } else {\n            this.variableChangedEvent(variableName, currentValue);\n          }\n        }\n\n        this._changedVariablesForBatchObs = null;\n      }\n    }\n  }\n\n  get callStack() {\n    return this._callStack;\n  }\n  set callStack(callStack) {\n    this._callStack = callStack;\n  }\n\n  private _batchObservingVariableChanges: boolean = false;\n\n  // the original code uses a magic getter and setter for global variables,\n  // allowing things like variableState['varname]. This is not quite possible\n  // in js without a Proxy, so it is replaced with this $ function.\n  public $(variableName: string): VariableStateValue;\n  public $(variableName: string, value: VariableStateValue): void;\n  public $(variableName: string, value?: any) {\n    if (typeof value === \"undefined\") {\n      let varContents = null;\n\n      if (this.patch !== null) {\n        varContents = this.patch.TryGetGlobal(variableName, null);\n        if (varContents.exists)\n          return (varContents.result as AbstractValue).valueObject;\n      }\n\n      varContents = this._globalVariables.get(variableName);\n\n      if (typeof varContents === \"undefined\") {\n        varContents = this._defaultGlobalVariables.get(variableName);\n      }\n\n      if (typeof varContents !== \"undefined\")\n        return (varContents as AbstractValue).valueObject;\n      else return null;\n    } else {\n      if (typeof this._defaultGlobalVariables.get(variableName) === \"undefined\")\n        throw new StoryException(\n          \"Cannot assign to a variable (\" +\n            variableName +\n            \") that hasn't been declared in the story\"\n        );\n\n      let val = Value.Create(value);\n      if (val == null) {\n        if (value == null) {\n          throw new Error(\"Cannot pass null to VariableState\");\n        } else {\n          throw new Error(\n            \"Invalid value passed to VariableState: \" + value.toString()\n          );\n        }\n      }\n\n      this.SetGlobal(variableName, val);\n    }\n  }\n\n  constructor(\n    callStack: CallStack,\n    listDefsOrigin: ListDefinitionsOrigin | null\n  ) {\n    super();\n    this._globalVariables = new Map();\n    this._callStack = callStack;\n    this._listDefsOrigin = listDefsOrigin;\n\n    // if es6 proxies are available, use them.\n    try {\n      // the proxy is used to allow direct manipulation of global variables.\n      // It first tries to access the objects own property, and if none is\n      // found it delegates the call to the $ method, defined below\n      let p = new Proxy(this, {\n        get(target: any, name) {\n          return name in target ? target[name] : target.$(name);\n        },\n        set(target: any, name, value) {\n          if (name in target) target[name] = value;\n          else target.$(name, value);\n          return true; // returning a falsy value make the trap fail\n        },\n      });\n\n      return p;\n    } catch (e) {\n      // the proxy object is not available in this context. we should warn the\n      // dev but writing to the console feels a bit intrusive.\n      // console.log(\"ES6 Proxy not available - direct manipulation of global variables can't work, use $() instead.\");\n    }\n  }\n\n  public ApplyPatch() {\n    if (this.patch === null) {\n      return throwNullException(\"this.patch\");\n    }\n\n    for (let [namedVarKey, namedVarValue] of this.patch.globals) {\n      this._globalVariables.set(namedVarKey, namedVarValue);\n    }\n\n    if (this._changedVariablesForBatchObs !== null) {\n      for (let name of this.patch.changedVariables) {\n        this._changedVariablesForBatchObs.add(name);\n      }\n    }\n\n    this.patch = null;\n  }\n\n  public SetJsonToken(jToken: Record<string, any>) {\n    this._globalVariables.clear();\n\n    for (let [varValKey, varValValue] of this._defaultGlobalVariables) {\n      let loadedToken = jToken[varValKey];\n      if (typeof loadedToken !== \"undefined\") {\n        let tokenInkObject =\n          JsonSerialisation.JTokenToRuntimeObject(loadedToken);\n        if (tokenInkObject === null) {\n          return throwNullException(\"tokenInkObject\");\n        }\n        this._globalVariables.set(varValKey, tokenInkObject);\n      } else {\n        this._globalVariables.set(varValKey, varValValue);\n      }\n    }\n  }\n\n  public static dontSaveDefaultValues: boolean = true;\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n    for (let [keyValKey, keyValValue] of this._globalVariables) {\n      let name = keyValKey;\n      let val = keyValValue;\n\n      if (VariablesState.dontSaveDefaultValues) {\n        if (this._defaultGlobalVariables.has(name)) {\n          let defaultVal = this._defaultGlobalVariables.get(name)!;\n          if (this.RuntimeObjectsEqual(val, defaultVal)) continue;\n        }\n      }\n\n      writer.WritePropertyStart(name);\n      JsonSerialisation.WriteRuntimeObject(writer, val);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public RuntimeObjectsEqual(\n    obj1: InkObject | null,\n    obj2: InkObject | null\n  ): boolean {\n    if (obj1 === null) {\n      return throwNullException(\"obj1\");\n    }\n    if (obj2 === null) {\n      return throwNullException(\"obj2\");\n    }\n\n    if (obj1.constructor !== obj2.constructor) return false;\n\n    let boolVal = asOrNull(obj1, BoolValue);\n    if (boolVal !== null) {\n      return boolVal.value === asOrThrows(obj2, BoolValue).value;\n    }\n\n    let intVal = asOrNull(obj1, IntValue);\n    if (intVal !== null) {\n      return intVal.value === asOrThrows(obj2, IntValue).value;\n    }\n\n    let floatVal = asOrNull(obj1, FloatValue);\n    if (floatVal !== null) {\n      return floatVal.value === asOrThrows(obj2, FloatValue).value;\n    }\n\n    let val1 = asOrNull(obj1, Value);\n    let val2 = asOrNull(obj2, Value);\n    if (val1 !== null && val2 !== null) {\n      if (isEquatable(val1.valueObject) && isEquatable(val2.valueObject)) {\n        return val1.valueObject.Equals(val2.valueObject);\n      } else {\n        return val1.valueObject === val2.valueObject;\n      }\n    }\n\n    throw new Error(\n      \"FastRoughDefinitelyEquals: Unsupported runtime object type: \" +\n        obj1.constructor.name\n    );\n  }\n\n  public GetVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ): InkObject | null {\n    let varValue = this.GetRawVariableWithName(name, contextIndex);\n\n    // var varPointer = varValue as VariablePointerValue;\n    let varPointer = asOrNull(varValue, VariablePointerValue);\n    if (varPointer !== null) {\n      varValue = this.ValueAtVariablePointer(varPointer);\n    }\n\n    return varValue;\n  }\n\n  public TryGetDefaultVariableValue(name: string | null): InkObject | null {\n    let val = tryGetValueFromMap(this._defaultGlobalVariables, name, null);\n    return val.exists ? val.result : null;\n  }\n\n  public GlobalVariableExistsWithName(name: string) {\n    return (\n      this._globalVariables.has(name) ||\n      (this._defaultGlobalVariables !== null &&\n        this._defaultGlobalVariables.has(name))\n    );\n  }\n\n  public GetRawVariableWithName(name: string | null, contextIndex: number) {\n    let varValue: InkObject | null = null;\n\n    if (contextIndex == 0 || contextIndex == -1) {\n      let variableValue = null;\n      if (this.patch !== null) {\n        variableValue = this.patch.TryGetGlobal(name, null);\n        if (variableValue.exists) return variableValue.result!;\n      }\n\n      // this is a conditional assignment\n      variableValue = tryGetValueFromMap(this._globalVariables, name, null);\n      if (variableValue.exists) return variableValue.result;\n\n      if (this._defaultGlobalVariables !== null) {\n        variableValue = tryGetValueFromMap(\n          this._defaultGlobalVariables,\n          name,\n          null\n        );\n        if (variableValue.exists) return variableValue.result;\n      }\n\n      if (this._listDefsOrigin === null)\n        return throwNullException(\"VariablesState._listDefsOrigin\");\n      let listItemValue = this._listDefsOrigin.FindSingleItemListWithName(name);\n      if (listItemValue) return listItemValue;\n    }\n\n    varValue = this._callStack.GetTemporaryVariableWithName(name, contextIndex);\n\n    return varValue;\n  }\n\n  public ValueAtVariablePointer(pointer: VariablePointerValue) {\n    return this.GetVariableWithName(pointer.variableName, pointer.contextIndex);\n  }\n\n  public Assign(varAss: VariableAssignment, value: InkObject) {\n    let name = varAss.variableName;\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let contextIndex = -1;\n\n    let setGlobal = false;\n    if (varAss.isNewDeclaration) {\n      setGlobal = varAss.isGlobal;\n    } else {\n      setGlobal = this.GlobalVariableExistsWithName(name);\n    }\n\n    if (varAss.isNewDeclaration) {\n      // var varPointer = value as VariablePointerValue;\n      let varPointer = asOrNull(value, VariablePointerValue);\n      if (varPointer !== null) {\n        let fullyResolvedVariablePointer =\n          this.ResolveVariablePointer(varPointer);\n        value = fullyResolvedVariablePointer;\n      }\n    } else {\n      let existingPointer = null;\n      do {\n        // existingPointer = GetRawVariableWithName (name, contextIndex) as VariablePointerValue;\n        existingPointer = asOrNull(\n          this.GetRawVariableWithName(name, contextIndex),\n          VariablePointerValue\n        );\n        if (existingPointer != null) {\n          name = existingPointer.variableName;\n          contextIndex = existingPointer.contextIndex;\n          setGlobal = contextIndex == 0;\n        }\n      } while (existingPointer != null);\n    }\n\n    if (setGlobal) {\n      this.SetGlobal(name, value);\n    } else {\n      this._callStack.SetTemporaryVariable(\n        name,\n        value,\n        varAss.isNewDeclaration,\n        contextIndex\n      );\n    }\n  }\n\n  public SnapshotDefaultGlobals() {\n    this._defaultGlobalVariables = new Map(this._globalVariables);\n  }\n\n  public RetainListOriginsForAssignment(\n    oldValue: InkObject,\n    newValue: InkObject\n  ) {\n    let oldList = asOrThrows(oldValue, ListValue);\n    let newList = asOrThrows(newValue, ListValue);\n\n    if (oldList.value && newList.value && newList.value.Count == 0) {\n      newList.value.SetInitialOriginNames(oldList.value.originNames);\n    }\n  }\n\n  public SetGlobal(variableName: string | null, value: InkObject) {\n    let oldValue = null;\n\n    if (this.patch === null) {\n      oldValue = tryGetValueFromMap(this._globalVariables, variableName, null);\n    }\n\n    if (this.patch !== null) {\n      oldValue = this.patch.TryGetGlobal(variableName, null);\n      if (!oldValue.exists) {\n        oldValue = tryGetValueFromMap(\n          this._globalVariables,\n          variableName,\n          null\n        );\n      }\n    }\n\n    ListValue.RetainListOriginsForAssignment(oldValue!.result!, value);\n\n    if (variableName === null) {\n      return throwNullException(\"variableName\");\n    }\n\n    if (this.patch !== null) {\n      this.patch.SetGlobal(variableName, value);\n    } else {\n      this._globalVariables.set(variableName, value);\n    }\n\n    // TODO: Not sure !== is equivalent to !value.Equals(oldValue)\n    if (\n      this.variableChangedEvent !== null &&\n      oldValue !== null &&\n      value !== oldValue.result\n    ) {\n      if (this.batchObservingVariableChanges) {\n        if (this._changedVariablesForBatchObs === null) {\n          return throwNullException(\"this._changedVariablesForBatchObs\");\n        }\n\n        if (this.patch !== null) {\n          this.patch.AddChangedVariable(variableName);\n        } else if (this._changedVariablesForBatchObs !== null) {\n          this._changedVariablesForBatchObs.add(variableName);\n        }\n      } else {\n        this.variableChangedEvent(variableName, value);\n      }\n    }\n  }\n\n  public ResolveVariablePointer(varPointer: VariablePointerValue) {\n    let contextIndex = varPointer.contextIndex;\n\n    if (contextIndex == -1)\n      contextIndex = this.GetContextIndexOfVariableNamed(\n        varPointer.variableName\n      );\n\n    let valueOfVariablePointedTo = this.GetRawVariableWithName(\n      varPointer.variableName,\n      contextIndex\n    );\n\n    // var doubleRedirectionPointer = valueOfVariablePointedTo as VariablePointerValue;\n    let doubleRedirectionPointer = asOrNull(\n      valueOfVariablePointedTo,\n      VariablePointerValue\n    );\n    if (doubleRedirectionPointer != null) {\n      return doubleRedirectionPointer;\n    } else {\n      return new VariablePointerValue(varPointer.variableName, contextIndex);\n    }\n  }\n\n  public GetContextIndexOfVariableNamed(varName: string) {\n    if (this.GlobalVariableExistsWithName(varName)) return 0;\n\n    return this._callStack.currentElementIndex;\n  }\n\n  /**\n   * This function is specific to the js version of ink. It allows to register a\n   * callback that will be called when a variable changes. The original code uses\n   * `state.variableChangedEvent += callback` instead.\n   *\n   * @param {function} callback\n   */\n  public ObserveVariableChange(\n    callback: (variableName: string, newValue: InkObject) => void\n  ) {\n    this.variableChangedEventCallbacks.push(callback);\n  }\n\n  private _globalVariables: Map<string, InkObject>;\n  private _defaultGlobalVariables: Map<string, InkObject> = new Map();\n\n  private _callStack: CallStack;\n  private _changedVariablesForBatchObs: Set<string> | null = new Set();\n  private _listDefsOrigin: ListDefinitionsOrigin | null;\n}\n","// Taken from https://gist.github.com/blixt/f17b47c62508be59987b\n// Ink uses a seedable PRNG of which there is none in native javascript.\nexport class PRNG {\n  private seed: number;\n\n  constructor(seed: number) {\n    this.seed = seed % 2147483647;\n    if (this.seed <= 0) this.seed += 2147483646;\n  }\n  public next(): number {\n    return (this.seed = (this.seed * 48271) % 2147483647);\n  }\n  public nextFloat(): number {\n    return (this.next() - 1) / 2147483646;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class StatePatch {\n  get globals() {\n    return this._globals;\n  }\n  get changedVariables() {\n    return this._changedVariables;\n  }\n  get visitCounts() {\n    return this._visitCounts;\n  }\n  get turnIndices() {\n    return this._turnIndices;\n  }\n\n  constructor();\n  constructor(toCopy: StatePatch | null);\n  constructor() {\n    if (arguments.length === 1 && arguments[0] !== null) {\n      let toCopy = arguments[0] as StatePatch;\n      this._globals = new Map(toCopy._globals);\n      this._changedVariables = new Set(toCopy._changedVariables);\n      this._visitCounts = new Map(toCopy._visitCounts);\n      this._turnIndices = new Map(toCopy._turnIndices);\n    } else {\n      this._globals = new Map();\n      this._changedVariables = new Set();\n      this._visitCounts = new Map();\n      this._turnIndices = new Map();\n    }\n  }\n\n  public TryGetGlobal(name: string | null, /* out */ value: InkObject | null) {\n    if (name !== null && this._globals.has(name)) {\n      return { result: this._globals.get(name), exists: true };\n    }\n\n    return { result: value, exists: false };\n  }\n\n  public SetGlobal(name: string, value: InkObject) {\n    this._globals.set(name, value);\n  }\n\n  public AddChangedVariable(name: string) {\n    return this._changedVariables.add(name);\n  }\n\n  public TryGetVisitCount(container: Container, /* out */ count: number) {\n    if (this._visitCounts.has(container)) {\n      return { result: this._visitCounts.get(container), exists: true };\n    }\n\n    return { result: count, exists: false };\n  }\n\n  public SetVisitCount(container: Container, count: number) {\n    this._visitCounts.set(container, count);\n  }\n\n  public SetTurnIndex(container: Container, index: number) {\n    this._turnIndices.set(container, index);\n  }\n\n  public TryGetTurnIndex(container: Container, /* out */ index: number) {\n    if (this._turnIndices.has(container)) {\n      return { result: this._turnIndices.get(container), exists: true };\n    }\n\n    return { result: index, exists: false };\n  }\n\n  private _globals: Map<string, InkObject>;\n  private _changedVariables: Set<string> = new Set();\n  private _visitCounts: Map<Container, number> = new Map();\n  private _turnIndices: Map<Container, number> = new Map();\n}\n","export class SimpleJson {\n  public static TextToDictionary(text: string) {\n    return new SimpleJson.Reader(text).ToDictionary();\n  }\n\n  public static TextToArray(text: string) {\n    return new SimpleJson.Reader(text).ToArray();\n  }\n}\n\nexport namespace SimpleJson {\n  export class Reader {\n    constructor(text: string) {\n      this._rootObject = JSON.parse(text);\n    }\n\n    public ToDictionary() {\n      return this._rootObject as Record<string, any>;\n    }\n\n    public ToArray() {\n      return this._rootObject as any[];\n    }\n\n    private _rootObject: any[] | Record<string, any>;\n  }\n\n  // In C#, this class writes json tokens directly to a StringWriter or\n  // another stream. Here, a temporary hierarchy is created in the form\n  // of a javascript object, which is serialised in the `toString` method.\n  // See individual methods and properties for more information.\n  export class Writer {\n    public WriteObject(inner: (w: Writer) => void) {\n      this.WriteObjectStart();\n      inner(this);\n      this.WriteObjectEnd();\n    }\n\n    // Add a new object.\n    public WriteObjectStart() {\n      this.StartNewObject(true);\n\n      let newObject: Record<string, any> = {};\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This object is created as the value of a property,\n        // inside an other object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This object is created as the child of an array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This object is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Object)\n      );\n    }\n\n    public WriteObjectEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Write a property name / value pair to the current object.\n    public WriteProperty(\n      name: any,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      innerOrContent: ((w: Writer) => void) | string | boolean | null\n    ) {\n      this.WritePropertyStart(name);\n      if (arguments[1] instanceof Function) {\n        let inner = arguments[1];\n        inner(this);\n      } else {\n        let content: string | boolean | null = arguments[1];\n        this.Write(content);\n      }\n      this.WritePropertyEnd();\n    }\n\n    // Int and Float are separate calls, since there both are\n    // numbers in JavaScript, but need to be handled differently.\n\n    public WriteIntProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteInt(content);\n      this.WritePropertyEnd();\n    }\n\n    public WriteFloatProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteFloat(content);\n      this.WritePropertyEnd();\n    }\n\n    // Prepare a new property name, which will be use to add the\n    // new object when calling _addToCurrentObject() from a Write\n    // method.\n    public WritePropertyStart(name: any) {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._propertyNameStack.push(name);\n\n      this.IncrementChildCount();\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n    }\n\n    public WritePropertyEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Property);\n      this.Assert(this.childCount === 1);\n      this._stateStack.pop();\n    }\n\n    // Prepare a new property name, except this time, the property name\n    // will be created by concatenating all the strings passed to\n    // WritePropertyNameInner.\n    public WritePropertyNameStart() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this.IncrementChildCount();\n\n      this._currentPropertyName = \"\";\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.PropertyName)\n      );\n    }\n\n    public WritePropertyNameEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._propertyNameStack.push(this._currentPropertyName!);\n      this._currentPropertyName = null;\n      this._stateStack.pop();\n    }\n\n    public WritePropertyNameInner(str: string) {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._currentPropertyName += str;\n    }\n\n    // Add a new array.\n    public WriteArrayStart() {\n      this.StartNewObject(true);\n\n      let newObject: any[] = [];\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This array is created as the value of a property,\n        // inside an object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This array is created as the child of another array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This array is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Array)\n      );\n    }\n\n    public WriteArrayEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Array);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Add the value to the appropriate collection (array / object), given the current\n    // context.\n    public Write(\n      value: number | string | boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      escape: boolean = true\n    ) {\n      if (value === null) {\n        console.error(\"Warning: trying to write a null value\");\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteBool(value: boolean | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteInt(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n\n      // Math.floor is used as a precaution:\n      //     1. to ensure that the value is written as an integer\n      //        (without a fractional part -> 1 instead of 1.0), even\n      //        though it should be the default behaviour of\n      //        JSON.serialize;\n      //     2. to ensure that if a floating number is passed\n      //        accidentally, it's converted to an integer.\n      //\n      // This guarantees savegame compatibility with the reference\n      // implementation.\n      this._addToCurrentObject(Math.floor(value));\n    }\n\n    // Since JSON doesn't support NaN and Infinity, these values\n    // are converted here.\n    public WriteFloat(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      if (value == Number.POSITIVE_INFINITY) {\n        this._addToCurrentObject(3.4e38);\n      } else if (value == Number.NEGATIVE_INFINITY) {\n        this._addToCurrentObject(-3.4e38);\n      } else if (isNaN(value)) {\n        this._addToCurrentObject(0.0);\n      } else {\n        this._addToCurrentObject(value);\n      }\n    }\n\n    public WriteNull() {\n      this.StartNewObject(false);\n      this._addToCurrentObject(null);\n    }\n\n    // Prepare a string before adding it to the current collection in\n    // WriteStringEnd(). The string will be a concatenation of all the\n    // strings passed to WriteStringInner.\n    public WriteStringStart() {\n      this.StartNewObject(false);\n      this._currentString = \"\";\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.String)\n      );\n    }\n\n    public WriteStringEnd() {\n      this.Assert(this.state == SimpleJson.Writer.State.String);\n      this._stateStack.pop();\n      this._addToCurrentObject(this._currentString);\n      this._currentString = null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public WriteStringInner(str: string | null, escape: boolean = true) {\n      this.Assert(this.state === SimpleJson.Writer.State.String);\n\n      if (str === null) {\n        console.error(\"Warning: trying to write a null string\");\n        return;\n      }\n\n      this._currentString += str;\n    }\n\n    // Serialise the root object into a JSON string.\n    public toString() {\n      if (this._jsonObject === null) {\n        return \"\";\n      }\n\n      return JSON.stringify(this._jsonObject);\n    }\n\n    // Prepare the state stack when adding new objects / values.\n    private StartNewObject(container: boolean) {\n      if (container) {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.None ||\n            this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      } else {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      }\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(this.childCount === 0);\n      }\n\n      if (\n        this.state === SimpleJson.Writer.State.Array ||\n        this.state === SimpleJson.Writer.State.Property\n      ) {\n        this.IncrementChildCount();\n      }\n    }\n\n    // These getters peek all the different stacks.\n\n    private get state() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].type;\n      } else {\n        return SimpleJson.Writer.State.None;\n      }\n    }\n\n    private get childCount() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].childCount;\n      } else {\n        return 0;\n      }\n    }\n\n    private get currentCollection() {\n      if (this._collectionStack.length > 0) {\n        return this._collectionStack[this._collectionStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private get currentPropertyName() {\n      if (this._propertyNameStack.length > 0) {\n        return this._propertyNameStack[this._propertyNameStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private IncrementChildCount() {\n      this.Assert(this._stateStack.length > 0);\n      let currEl = this._stateStack.pop()!;\n      currEl.childCount++;\n      this._stateStack.push(currEl);\n    }\n\n    private Assert(condition: boolean) {\n      if (!condition) throw Error(\"Assert failed while writing JSON\");\n    }\n\n    // This method did not exist in the original C# code. It adds\n    // the given value to the current collection (used by Write methods).\n    private _addToCurrentObject(value: number | string | boolean | null) {\n      this.Assert(this.currentCollection !== null);\n      if (this.state === SimpleJson.Writer.State.Array) {\n        this.Assert(Array.isArray(this.currentCollection));\n        (this.currentCollection as any[]).push(value);\n      } else if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(!Array.isArray(this.currentCollection));\n        this.Assert(this.currentPropertyName !== null);\n        (this.currentCollection as Record<string, any>)[\n          this.currentPropertyName!\n        ] = value;\n        this._propertyNameStack.pop();\n      }\n    }\n\n    // In addition to `_stateStack` present in the original code,\n    // this implementation of SimpleJson use two other stacks and two\n    // temporary variables holding the current context.\n\n    // Used to keep track of the current property name being built\n    // with `WritePropertyNameStart`, `WritePropertyNameInner` and\n    // `WritePropertyNameEnd`.\n    private _currentPropertyName: string | null = null;\n\n    // Used to keep track of the current string value being built\n    // with `WriteStringStart`, `WriteStringInner` and\n    // `WriteStringEnd`.\n    private _currentString: string | null = null;\n\n    private _stateStack: SimpleJson.Writer.StateElement[] = [];\n\n    // Keep track of the current collection being built (either an array\n    // or an object). For instance, at the '?' step during the hiarchy\n    // creation, this hierarchy:\n    // [3, {a: [b, ?]}] will have this corresponding stack:\n    // (bottom) [Array, Object, Array] (top)\n    private _collectionStack: Array<any[] | Record<string, any>> = [];\n\n    // Keep track of the current property being assigned. For instance, at\n    // the '?' step during the hiarchy creation, this hierarchy:\n    // [3, {a: [b, {c: ?}]}] will have this corresponding stack:\n    // (bottom) [a, c] (top)\n    private _propertyNameStack: string[] = [];\n\n    // Object containing the entire hiearchy.\n    private _jsonObject: Record<string, any> | any[] | null = null;\n  }\n\n  export namespace Writer {\n    export enum State {\n      None,\n      Object,\n      Array,\n      Property,\n      PropertyName,\n      String,\n    }\n\n    export class StateElement {\n      public type: SimpleJson.Writer.State = SimpleJson.Writer.State.None;\n      public childCount: number = 0;\n\n      constructor(type: SimpleJson.Writer.State) {\n        this.type = type;\n      }\n    }\n  }\n}\n","import { CallStack } from \"./CallStack\";\nimport { Choice } from \"./Choice\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { InkObject } from \"./Object\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Story } from \"./Story\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Flow {\n  public name: string;\n  public callStack: CallStack;\n  public outputStream: InkObject[];\n  public currentChoices: Choice[];\n\n  constructor(name: String, story: Story);\n  constructor(name: String, story: Story, jObject: Record<string, any>);\n  constructor() {\n    let name = arguments[0] as string;\n    let story = arguments[1] as Story;\n\n    this.name = name;\n    this.callStack = new CallStack(story);\n\n    if (arguments[2]) {\n      let jObject = arguments[2] as Record<string, any>;\n\n      this.callStack.SetJsonToken(jObject[\"callstack\"], story);\n      this.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"]\n      );\n      this.currentChoices = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"currentChoices\"]\n      ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      if (typeof jChoiceThreadsObj !== \"undefined\") {\n        this.LoadFlowChoiceThreads(jChoiceThreadsObj, story);\n      }\n    } else {\n      this.outputStream = [];\n      this.currentChoices = [];\n    }\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WriteProperty(\"callstack\", (w) => this.callStack.WriteJson(w));\n    writer.WriteProperty(\"outputStream\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.outputStream)\n    );\n\n    let hasChoiceThreads = false;\n    for (let c of this.currentChoices) {\n      if (c.threadAtGeneration === null)\n        return throwNullException(\"c.threadAtGeneration\");\n\n      c.originalThreadIndex = c.threadAtGeneration.threadIndex;\n\n      if (this.callStack.ThreadWithIndex(c.originalThreadIndex) === null) {\n        if (!hasChoiceThreads) {\n          hasChoiceThreads = true;\n          writer.WritePropertyStart(\"choiceThreads\");\n          writer.WriteObjectStart();\n        }\n\n        writer.WritePropertyStart(c.originalThreadIndex);\n        c.threadAtGeneration.WriteJson(writer);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (hasChoiceThreads) {\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteProperty(\"currentChoices\", (w) => {\n      w.WriteArrayStart();\n      for (let c of this.currentChoices) {\n        JsonSerialisation.WriteChoice(w, c);\n      }\n      w.WriteArrayEnd();\n    });\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadFlowChoiceThreads(\n    jChoiceThreads: Record<string, any>,\n    story: Story\n  ) {\n    for (let choice of this.currentChoices) {\n      let foundActiveThread = this.callStack.ThreadWithIndex(\n        choice.originalThreadIndex\n      );\n      if (foundActiveThread !== null) {\n        choice.threadAtGeneration = foundActiveThread.Copy();\n      } else {\n        let jSavedChoiceThread =\n          jChoiceThreads[`${choice.originalThreadIndex}`];\n        choice.threadAtGeneration = new CallStack.Thread(\n          jSavedChoiceThread,\n          story\n        );\n      }\n    }\n  }\n}\n","import { CallStack } from \"./CallStack\";\nimport { VariablesState } from \"./VariablesState\";\nimport { ValueType, Value, StringValue, ListValue } from \"./Value\";\nimport { PushPopType } from \"./PushPop\";\nimport { Tag } from \"./Tag\";\nimport { Glue } from \"./Glue\";\nimport { Path } from \"./Path\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { PRNG } from \"./PRNG\";\nimport { Void } from \"./Void\";\nimport { Pointer } from \"./Pointer\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { Choice } from \"./Choice\";\nimport { asOrNull, asOrThrows, nullIfUndefined } from \"./TypeAssertion\";\nimport { Debug } from \"./Debug\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { throwNullException } from \"./NullException\";\nimport { Story } from \"./Story\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Flow } from \"./Flow\";\nimport { InkList } from \"./InkList\";\n\nexport class StoryState {\n  // Backward compatible changes since v8:\n  // v10: dynamic tags\n  // v9:  multi-flows\n  public readonly kInkSaveStateVersion = 10;\n  public readonly kMinCompatibleLoadVersion = 8;\n\n  public onDidLoadState: (() => void) | null = null;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public ToJson(indented: boolean = false) {\n    let writer = new SimpleJson.Writer();\n    this.WriteJson(writer);\n    return writer.toString();\n  }\n  public toJson(indented: boolean = false) {\n    return this.ToJson(indented);\n  }\n\n  public LoadJson(json: string) {\n    let jObject = SimpleJson.TextToDictionary(json);\n    this.LoadJsonObj(jObject);\n    if (this.onDidLoadState !== null) this.onDidLoadState();\n  }\n\n  public VisitCountAtPathString(pathString: string) {\n    let visitCountOut;\n\n    if (this._patch !== null) {\n      let container = this.story.ContentAtPath(new Path(pathString)).container;\n      if (container === null)\n        throw new Error(\"Content at path not found: \" + pathString);\n\n      visitCountOut = this._patch.TryGetVisitCount(container, 0);\n      if (visitCountOut.exists) return visitCountOut.result;\n    }\n\n    visitCountOut = tryGetValueFromMap(this._visitCounts, pathString, null);\n    if (visitCountOut.exists) return visitCountOut.result;\n\n    return 0;\n  }\n\n  public VisitCountForContainer(container: Container | null): number {\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    if (!container.visitsShouldBeCounted) {\n      this.story.Error(\n        \"Read count for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n      return 0;\n    }\n\n    if (this._patch !== null) {\n      let count = this._patch.TryGetVisitCount(container, 0);\n      if (count.exists) {\n        return count.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let count2 = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count2.exists) {\n      return count2.result!;\n    }\n\n    return 0;\n  }\n\n  public IncrementVisitCountForContainer(container: Container) {\n    if (this._patch !== null) {\n      let currCount = this.VisitCountForContainer(container);\n      currCount++;\n      this._patch.SetVisitCount(container, currCount);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    let count = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count.exists) {\n      this._visitCounts.set(containerPathStr, count.result! + 1);\n    } else {\n      this._visitCounts.set(containerPathStr, 1);\n    }\n  }\n\n  public RecordTurnIndexVisitToContainer(container: Container) {\n    if (this._patch !== null) {\n      this._patch.SetTurnIndex(container, this.currentTurnIndex);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    this._turnIndices.set(containerPathStr, this.currentTurnIndex);\n  }\n\n  public TurnsSinceForContainer(container: Container) {\n    if (!container.turnIndexShouldBeCounted) {\n      this.story.Error(\n        \"TURNS_SINCE() for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n    }\n\n    if (this._patch !== null) {\n      let index = this._patch.TryGetTurnIndex(container, 0);\n      if (index.exists) {\n        return this.currentTurnIndex - index.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let index2 = tryGetValueFromMap(this._turnIndices, containerPathStr, 0);\n    if (index2.exists) {\n      return this.currentTurnIndex - index2.result!;\n    } else {\n      return -1;\n    }\n  }\n\n  get callstackDepth() {\n    return this.callStack.depth;\n  }\n\n  get outputStream() {\n    return this._currentFlow.outputStream;\n  }\n\n  get currentChoices() {\n    // If we can continue generating text content rather than choices,\n    // then we reflect the choice list as being empty, since choices\n    // should always come at the end.\n    if (this.canContinue) return [];\n    return this._currentFlow.currentChoices;\n  }\n\n  get generatedChoices() {\n    return this._currentFlow.currentChoices;\n  }\n\n  get currentErrors() {\n    return this._currentErrors;\n  }\n  private _currentErrors: string[] | null = null;\n\n  get currentWarnings() {\n    return this._currentWarnings;\n  }\n  private _currentWarnings: string[] | null = null;\n\n  get variablesState() {\n    return this._variablesState;\n  }\n  set variablesState(value) {\n    this._variablesState = value;\n  }\n  private _variablesState: VariablesState;\n\n  get callStack() {\n    return this._currentFlow.callStack;\n  }\n\n  get evaluationStack() {\n    return this._evaluationStack;\n  }\n  private _evaluationStack: InkObject[];\n\n  public divertedPointer: Pointer = Pointer.Null;\n\n  get currentTurnIndex() {\n    return this._currentTurnIndex;\n  }\n  set currentTurnIndex(value) {\n    this._currentTurnIndex = value;\n  }\n  private _currentTurnIndex: number = 0;\n\n  public storySeed: number = 0;\n  public previousRandom: number = 0;\n  public didSafeExit: boolean = false;\n\n  public story: Story;\n\n  get currentPathString() {\n    let pointer = this.currentPointer;\n    if (pointer.isNull) {\n      return null;\n    } else {\n      if (pointer.path === null) {\n        return throwNullException(\"pointer.path\");\n      }\n      return pointer.path.toString();\n    }\n  }\n\n  get currentPointer() {\n    return this.callStack.currentElement.currentPointer.copy();\n  }\n\n  set currentPointer(value) {\n    this.callStack.currentElement.currentPointer = value.copy();\n  }\n\n  get previousPointer() {\n    return this.callStack.currentThread.previousPointer.copy();\n  }\n\n  set previousPointer(value) {\n    this.callStack.currentThread.previousPointer = value.copy();\n  }\n\n  get canContinue() {\n    return !this.currentPointer.isNull && !this.hasError;\n  }\n\n  get hasError() {\n    return this.currentErrors != null && this.currentErrors.length > 0;\n  }\n\n  get hasWarning() {\n    return this.currentWarnings != null && this.currentWarnings.length > 0;\n  }\n\n  get currentText() {\n    if (this._outputStreamTextDirty) {\n      let sb = new StringBuilder();\n\n      let inTag: boolean = false;\n\n      for (let outputObj of this.outputStream) {\n        // var textContent = outputObj as StringValue;\n        let textContent = asOrNull(outputObj, StringValue);\n        if (!inTag && textContent !== null) {\n          sb.Append(textContent.value);\n        } else {\n          let controlCommand = asOrNull(outputObj, ControlCommand);\n          if (controlCommand !== null) {\n            if (\n              controlCommand.commandType == ControlCommand.CommandType.BeginTag\n            ) {\n              inTag = true;\n            } else if (\n              controlCommand.commandType == ControlCommand.CommandType.EndTag\n            ) {\n              inTag = false;\n            }\n          }\n        }\n      }\n\n      this._currentText = this.CleanOutputWhitespace(sb.toString());\n      this._outputStreamTextDirty = false;\n    }\n\n    return this._currentText;\n  }\n  private _currentText: string | null = null;\n\n  public CleanOutputWhitespace(str: string) {\n    let sb = new StringBuilder();\n\n    let currentWhitespaceStart = -1;\n    let startOfLine = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      let c = str.charAt(i);\n\n      let isInlineWhitespace = c == \" \" || c == \"\\t\";\n\n      if (isInlineWhitespace && currentWhitespaceStart == -1)\n        currentWhitespaceStart = i;\n\n      if (!isInlineWhitespace) {\n        if (\n          c != \"\\n\" &&\n          currentWhitespaceStart > 0 &&\n          currentWhitespaceStart != startOfLine\n        ) {\n          sb.Append(\" \");\n        }\n        currentWhitespaceStart = -1;\n      }\n\n      if (c == \"\\n\") startOfLine = i + 1;\n\n      if (!isInlineWhitespace) sb.Append(c);\n    }\n\n    return sb.toString();\n  }\n\n  get currentTags() {\n    if (this._outputStreamTagsDirty) {\n      this._currentTags = [];\n      let inTag: boolean = false;\n      let sb = new StringBuilder();\n\n      for (let outputObj of this.outputStream) {\n        let controlCommand = asOrNull(outputObj, ControlCommand);\n        if (controlCommand != null) {\n          if (\n            controlCommand.commandType == ControlCommand.CommandType.BeginTag\n          ) {\n            if (inTag && sb.Length > 0) {\n              let txt = this.CleanOutputWhitespace(sb.toString());\n              this._currentTags.push(txt);\n              sb.Clear();\n            }\n            inTag = true;\n          } else if (\n            controlCommand.commandType == ControlCommand.CommandType.EndTag\n          ) {\n            if (sb.Length > 0) {\n              let txt = this.CleanOutputWhitespace(sb.toString());\n              this._currentTags.push(txt);\n              sb.Clear();\n            }\n            inTag = false;\n          }\n        } else if (inTag) {\n          let strVal = asOrNull(outputObj, StringValue);\n          if (strVal !== null) {\n            sb.Append(strVal.value);\n          }\n        } else {\n          let tag = asOrNull(outputObj, Tag);\n          if (tag != null && tag.text != null && tag.text.length > 0) {\n            this._currentTags.push(tag.text); // tag.text has whitespae already cleaned\n          }\n        }\n      }\n\n      if (sb.Length > 0) {\n        let txt = this.CleanOutputWhitespace(sb.toString());\n        this._currentTags.push(txt);\n        sb.Clear();\n      }\n\n      this._outputStreamTagsDirty = false;\n    }\n\n    return this._currentTags;\n  }\n  private _currentTags: string[] | null = null;\n\n  get currentFlowName() {\n    return this._currentFlow.name;\n  }\n\n  get currentFlowIsDefaultFlow() {\n    return this._currentFlow.name == this.kDefaultFlowName;\n  }\n\n  get aliveFlowNames() {\n    if (this._aliveFlowNamesDirty) {\n      this._aliveFlowNames = [];\n\n      if (this._namedFlows != null) {\n        for (let flowName of this._namedFlows.keys()) {\n          if (flowName != this.kDefaultFlowName) {\n            this._aliveFlowNames.push(flowName);\n          }\n        }\n      }\n\n      this._aliveFlowNamesDirty = false;\n    }\n\n    return this._aliveFlowNames;\n  }\n\n  get inExpressionEvaluation() {\n    return this.callStack.currentElement.inExpressionEvaluation;\n  }\n  set inExpressionEvaluation(value) {\n    this.callStack.currentElement.inExpressionEvaluation = value;\n  }\n\n  constructor(story: Story) {\n    this.story = story;\n\n    this._currentFlow = new Flow(this.kDefaultFlowName, story);\n    this.OutputStreamDirty();\n\n    this._aliveFlowNamesDirty = true;\n    this._evaluationStack = [];\n\n    this._variablesState = new VariablesState(\n      this.callStack,\n      story.listDefinitions\n    );\n\n    this._visitCounts = new Map();\n    this._turnIndices = new Map();\n    this.currentTurnIndex = -1;\n\n    let timeSeed = new Date().getTime();\n    this.storySeed = new PRNG(timeSeed).next() % 100;\n    this.previousRandom = 0;\n\n    this.GoToStart();\n  }\n\n  public GoToStart() {\n    this.callStack.currentElement.currentPointer = Pointer.StartOf(\n      this.story.mainContentContainer\n    );\n  }\n\n  public SwitchFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.SwitchFlow\");\n\n    if (this._namedFlows === null) {\n      this._namedFlows = new Map();\n      this._namedFlows.set(this.kDefaultFlowName, this._currentFlow);\n    }\n\n    if (flowName === this._currentFlow.name) {\n      return;\n    }\n\n    let flow: Flow;\n    let content = tryGetValueFromMap(this._namedFlows, flowName, null);\n    if (content.exists) {\n      flow = content.result!;\n    } else {\n      flow = new Flow(flowName, this.story);\n      this._namedFlows.set(flowName, flow);\n      this._aliveFlowNamesDirty = true;\n    }\n\n    this._currentFlow = flow;\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this.OutputStreamDirty();\n  }\n\n  public SwitchToDefaultFlow_Internal() {\n    if (this._namedFlows === null) return;\n    this.SwitchFlow_Internal(this.kDefaultFlowName);\n  }\n\n  public RemoveFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.DestroyFlow\");\n    if (flowName === this.kDefaultFlowName)\n      throw new Error(\"Cannot destroy default flow\");\n\n    if (this._currentFlow.name === flowName) {\n      this.SwitchToDefaultFlow_Internal();\n    }\n\n    if (this._namedFlows === null)\n      return throwNullException(\"this._namedFlows\");\n    this._namedFlows.delete(flowName);\n    this._aliveFlowNamesDirty = true;\n  }\n\n  public CopyAndStartPatching() {\n    let copy = new StoryState(this.story);\n\n    copy._patch = new StatePatch(this._patch);\n\n    copy._currentFlow.name = this._currentFlow.name;\n    copy._currentFlow.callStack = new CallStack(this._currentFlow.callStack);\n    copy._currentFlow.currentChoices.push(...this._currentFlow.currentChoices);\n    copy._currentFlow.outputStream.push(...this._currentFlow.outputStream);\n    copy.OutputStreamDirty();\n\n    if (this._namedFlows !== null) {\n      copy._namedFlows = new Map();\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        copy._namedFlows.set(namedFlowKey, namedFlowValue);\n        copy._aliveFlowNamesDirty = true;\n      }\n      copy._namedFlows.set(this._currentFlow.name, copy._currentFlow);\n    }\n\n    if (this.hasError) {\n      copy._currentErrors = [];\n      copy._currentErrors.push(...(this.currentErrors || []));\n    }\n\n    if (this.hasWarning) {\n      copy._currentWarnings = [];\n      copy._currentWarnings.push(...(this.currentWarnings || []));\n    }\n\n    copy.variablesState = this.variablesState;\n    copy.variablesState.callStack = copy.callStack;\n    copy.variablesState.patch = copy._patch;\n\n    copy.evaluationStack.push(...this.evaluationStack);\n\n    if (!this.divertedPointer.isNull)\n      copy.divertedPointer = this.divertedPointer.copy();\n\n    copy.previousPointer = this.previousPointer.copy();\n\n    copy._visitCounts = this._visitCounts;\n    copy._turnIndices = this._turnIndices;\n\n    copy.currentTurnIndex = this.currentTurnIndex;\n    copy.storySeed = this.storySeed;\n    copy.previousRandom = this.previousRandom;\n\n    copy.didSafeExit = this.didSafeExit;\n\n    return copy;\n  }\n\n  public RestoreAfterPatch() {\n    this.variablesState.callStack = this.callStack;\n    this.variablesState.patch = this._patch;\n  }\n\n  public ApplyAnyPatch() {\n    if (this._patch === null) return;\n\n    this.variablesState.ApplyPatch();\n\n    for (let [key, value] of this._patch.visitCounts)\n      this.ApplyCountChanges(key, value, true);\n\n    for (let [key, value] of this._patch.turnIndices)\n      this.ApplyCountChanges(key, value, false);\n\n    this._patch = null;\n  }\n\n  public ApplyCountChanges(\n    container: Container,\n    newCount: number,\n    isVisit: boolean\n  ) {\n    let counts = isVisit ? this._visitCounts : this._turnIndices;\n    counts.set(container.path.toString(), newCount);\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WritePropertyStart(\"flows\");\n    writer.WriteObjectStart();\n\n    // NOTE: Never pass `WriteJson` directly as an argument to `WriteProperty`.\n    // Call it inside a function to make sure `this` is correctly bound\n    // and passed down the call hierarchy.\n\n    if (this._namedFlows !== null) {\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        writer.WriteProperty(namedFlowKey, (w) => namedFlowValue.WriteJson(w));\n      }\n    } else {\n      writer.WriteProperty(this._currentFlow.name, (w) =>\n        this._currentFlow.WriteJson(w)\n      );\n    }\n\n    writer.WriteObjectEnd();\n    writer.WritePropertyEnd();\n\n    writer.WriteProperty(\"currentFlowName\", this._currentFlow.name);\n\n    writer.WriteProperty(\"variablesState\", (w) =>\n      this.variablesState.WriteJson(w)\n    );\n\n    writer.WriteProperty(\"evalStack\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.evaluationStack)\n    );\n\n    if (!this.divertedPointer.isNull) {\n      if (this.divertedPointer.path === null) {\n        return throwNullException(\"divertedPointer\");\n      }\n      writer.WriteProperty(\n        \"currentDivertTarget\",\n        this.divertedPointer.path.componentsString\n      );\n    }\n\n    writer.WriteProperty(\"visitCounts\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._visitCounts)\n    );\n    writer.WriteProperty(\"turnIndices\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._turnIndices)\n    );\n\n    writer.WriteIntProperty(\"turnIdx\", this.currentTurnIndex);\n    writer.WriteIntProperty(\"storySeed\", this.storySeed);\n    writer.WriteIntProperty(\"previousRandom\", this.previousRandom);\n\n    writer.WriteIntProperty(\"inkSaveVersion\", this.kInkSaveStateVersion);\n\n    writer.WriteIntProperty(\"inkFormatVersion\", Story.inkVersionCurrent);\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadJsonObj(value: Record<string, any>) {\n    let jObject = value;\n\n    let jSaveVersion = jObject[\"inkSaveVersion\"];\n    if (jSaveVersion == null) {\n      throw new Error(\"ink save format incorrect, can't load.\");\n    } else if (parseInt(jSaveVersion) < this.kMinCompatibleLoadVersion) {\n      throw new Error(\n        \"Ink save format isn't compatible with the current version (saw '\" +\n          jSaveVersion +\n          \"', but minimum is \" +\n          this.kMinCompatibleLoadVersion +\n          \"), so can't load.\"\n      );\n    }\n\n    let flowsObj = jObject[\"flows\"];\n    if (flowsObj != null) {\n      let flowsObjDict = flowsObj as Record<string, any>;\n\n      // Single default flow\n      if (Object.keys(flowsObjDict).length === 1) {\n        this._namedFlows = null;\n      } else if (this._namedFlows === null) {\n        this._namedFlows = new Map();\n      } else {\n        this._namedFlows.clear();\n      }\n\n      let flowsObjDictEntries = Object.entries(flowsObjDict);\n      for (let [namedFlowObjKey, namedFlowObjValue] of flowsObjDictEntries) {\n        let name = namedFlowObjKey;\n        let flowObj = namedFlowObjValue as Record<string, any>;\n\n        let flow = new Flow(name, this.story, flowObj);\n\n        if (Object.keys(flowsObjDict).length === 1) {\n          this._currentFlow = new Flow(name, this.story, flowObj);\n        } else {\n          if (this._namedFlows === null)\n            return throwNullException(\"this._namedFlows\");\n          this._namedFlows.set(name, flow);\n        }\n      }\n\n      if (this._namedFlows != null && this._namedFlows.size > 1) {\n        let currFlowName = jObject[\"currentFlowName\"] as string;\n        // Adding a bang at the end, because we're trusting the save, as\n        // done in upstream.  If the save is corrupted, the execution\n        // is undefined.\n        this._currentFlow = this._namedFlows.get(currFlowName)!;\n      }\n    } else {\n      this._namedFlows = null;\n      this._currentFlow.name = this.kDefaultFlowName;\n      this._currentFlow.callStack.SetJsonToken(\n        jObject[\"callstackThreads\"] as Record<string, any>,\n        this.story\n      );\n      this._currentFlow.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"] as any[]\n      );\n      this._currentFlow.currentChoices =\n        JsonSerialisation.JArrayToRuntimeObjList(\n          jObject[\"currentChoices\"] as any[]\n        ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      this._currentFlow.LoadFlowChoiceThreads(jChoiceThreadsObj, this.story);\n    }\n\n    this.OutputStreamDirty();\n    this._aliveFlowNamesDirty = true;\n\n    this.variablesState.SetJsonToken(jObject[\"variablesState\"]);\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this._evaluationStack = JsonSerialisation.JArrayToRuntimeObjList(\n      jObject[\"evalStack\"]\n    );\n\n    let currentDivertTargetPath = jObject[\"currentDivertTarget\"];\n    if (currentDivertTargetPath != null) {\n      let divertPath = new Path(currentDivertTargetPath.toString());\n      this.divertedPointer = this.story.PointerAtPath(divertPath);\n    }\n\n    this._visitCounts = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"visitCounts\"]\n    );\n    this._turnIndices = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"turnIndices\"]\n    );\n    this.currentTurnIndex = parseInt(jObject[\"turnIdx\"]);\n    this.storySeed = parseInt(jObject[\"storySeed\"]);\n    this.previousRandom = parseInt(jObject[\"previousRandom\"]);\n  }\n\n  public ResetErrors() {\n    this._currentErrors = null;\n    this._currentWarnings = null;\n  }\n  public ResetOutput(objs: InkObject[] | null = null) {\n    this.outputStream.length = 0;\n    if (objs !== null) this.outputStream.push(...objs);\n    this.OutputStreamDirty();\n  }\n\n  public PushToOutputStream(obj: InkObject | null) {\n    // var text = obj as StringValue;\n    let text = asOrNull(obj, StringValue);\n    if (text !== null) {\n      let listText = this.TrySplittingHeadTailWhitespace(text);\n      if (listText !== null) {\n        for (let textObj of listText) {\n          this.PushToOutputStreamIndividual(textObj);\n        }\n        this.OutputStreamDirty();\n        return;\n      }\n    }\n\n    this.PushToOutputStreamIndividual(obj);\n    this.OutputStreamDirty();\n  }\n\n  public PopFromOutputStream(count: number) {\n    this.outputStream.splice(this.outputStream.length - count, count);\n    this.OutputStreamDirty();\n  }\n\n  public TrySplittingHeadTailWhitespace(single: StringValue) {\n    let str = single.value;\n    if (str === null) {\n      return throwNullException(\"single.value\");\n    }\n\n    let headFirstNewlineIdx = -1;\n    let headLastNewlineIdx = -1;\n    for (let i = 0; i < str.length; i++) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (headFirstNewlineIdx == -1) headFirstNewlineIdx = i;\n        headLastNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    let tailLastNewlineIdx = -1;\n    let tailFirstNewlineIdx = -1;\n    for (let i = str.length - 1; i >= 0; i--) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (tailLastNewlineIdx == -1) tailLastNewlineIdx = i;\n        tailFirstNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    // No splitting to be done?\n    if (headFirstNewlineIdx == -1 && tailLastNewlineIdx == -1) return null;\n\n    let listTexts: StringValue[] = [];\n    let innerStrStart = 0;\n    let innerStrEnd = str.length;\n\n    if (headFirstNewlineIdx != -1) {\n      if (headFirstNewlineIdx > 0) {\n        let leadingSpaces = new StringValue(\n          str.substring(0, headFirstNewlineIdx)\n        );\n        listTexts.push(leadingSpaces);\n      }\n      listTexts.push(new StringValue(\"\\n\"));\n      innerStrStart = headLastNewlineIdx + 1;\n    }\n\n    if (tailLastNewlineIdx != -1) {\n      innerStrEnd = tailFirstNewlineIdx;\n    }\n\n    if (innerStrEnd > innerStrStart) {\n      let innerStrText = str.substring(\n        innerStrStart,\n        innerStrEnd - innerStrStart\n      );\n      listTexts.push(new StringValue(innerStrText));\n    }\n\n    if (tailLastNewlineIdx != -1 && tailFirstNewlineIdx > headLastNewlineIdx) {\n      listTexts.push(new StringValue(\"\\n\"));\n      if (tailLastNewlineIdx < str.length - 1) {\n        let numSpaces = str.length - tailLastNewlineIdx - 1;\n        let trailingSpaces = new StringValue(\n          str.substring(tailLastNewlineIdx + 1, numSpaces)\n        );\n        listTexts.push(trailingSpaces);\n      }\n    }\n\n    return listTexts;\n  }\n\n  public PushToOutputStreamIndividual(obj: InkObject | null) {\n    let glue = asOrNull(obj, Glue);\n    let text = asOrNull(obj, StringValue);\n\n    let includeInOutput = true;\n\n    if (glue) {\n      this.TrimNewlinesFromOutputStream();\n      includeInOutput = true;\n    } else if (text) {\n      let functionTrimIndex = -1;\n      let currEl = this.callStack.currentElement;\n      if (currEl.type == PushPopType.Function) {\n        functionTrimIndex = currEl.functionStartInOutputStream;\n      }\n\n      let glueTrimIndex = -1;\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let o = this.outputStream[i];\n        let c = o instanceof ControlCommand ? o : null;\n        let g = o instanceof Glue ? o : null;\n\n        if (g != null) {\n          glueTrimIndex = i;\n          break;\n        } else if (\n          c != null &&\n          c.commandType == ControlCommand.CommandType.BeginString\n        ) {\n          if (i >= functionTrimIndex) {\n            functionTrimIndex = -1;\n          }\n          break;\n        }\n      }\n\n      let trimIndex = -1;\n      if (glueTrimIndex != -1 && functionTrimIndex != -1)\n        trimIndex = Math.min(functionTrimIndex, glueTrimIndex);\n      else if (glueTrimIndex != -1) trimIndex = glueTrimIndex;\n      else trimIndex = functionTrimIndex;\n\n      if (trimIndex != -1) {\n        if (text.isNewline) {\n          includeInOutput = false;\n        } else if (text.isNonWhitespace) {\n          if (glueTrimIndex > -1) this.RemoveExistingGlue();\n\n          if (functionTrimIndex > -1) {\n            let callStackElements = this.callStack.elements;\n            for (let i = callStackElements.length - 1; i >= 0; i--) {\n              let el = callStackElements[i];\n              if (el.type == PushPopType.Function) {\n                el.functionStartInOutputStream = -1;\n              } else {\n                break;\n              }\n            }\n          }\n        }\n      } else if (text.isNewline) {\n        if (this.outputStreamEndsInNewline || !this.outputStreamContainsContent)\n          includeInOutput = false;\n      }\n    }\n\n    if (includeInOutput) {\n      if (obj === null) {\n        return throwNullException(\"obj\");\n      }\n      this.outputStream.push(obj);\n      this.OutputStreamDirty();\n    }\n  }\n\n  public TrimNewlinesFromOutputStream() {\n    let removeWhitespaceFrom = -1;\n\n    let i = this.outputStream.length - 1;\n    while (i >= 0) {\n      let obj = this.outputStream[i];\n      let cmd = asOrNull(obj, ControlCommand);\n      let txt = asOrNull(obj, StringValue);\n\n      if (cmd != null || (txt != null && txt.isNonWhitespace)) {\n        break;\n      } else if (txt != null && txt.isNewline) {\n        removeWhitespaceFrom = i;\n      }\n      i--;\n    }\n\n    // Remove the whitespace\n    if (removeWhitespaceFrom >= 0) {\n      i = removeWhitespaceFrom;\n      while (i < this.outputStream.length) {\n        let text = asOrNull(this.outputStream[i], StringValue);\n        if (text) {\n          this.outputStream.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  public RemoveExistingGlue() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let c = this.outputStream[i];\n      if (c instanceof Glue) {\n        this.outputStream.splice(i, 1);\n      } else if (c instanceof ControlCommand) {\n        break;\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  get outputStreamEndsInNewline() {\n    if (this.outputStream.length > 0) {\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let obj = this.outputStream[i];\n        if (obj instanceof ControlCommand) break;\n        let text = this.outputStream[i];\n        if (text instanceof StringValue) {\n          if (text.isNewline) return true;\n          else if (text.isNonWhitespace) break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  get outputStreamContainsContent() {\n    for (let content of this.outputStream) {\n      if (content instanceof StringValue) return true;\n    }\n    return false;\n  }\n\n  get inStringEvaluation() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let cmd = asOrNull(this.outputStream[i], ControlCommand);\n      if (\n        cmd instanceof ControlCommand &&\n        cmd.commandType == ControlCommand.CommandType.BeginString\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public PushEvaluationStack(obj: InkObject | null) {\n    // var listValue = obj as ListValue;\n    let listValue = asOrNull(obj, ListValue);\n    if (listValue) {\n      // Update origin when list is has something to indicate the list origin\n      let rawList = listValue.value;\n      if (rawList === null) {\n        return throwNullException(\"rawList\");\n      }\n\n      if (rawList.originNames != null) {\n        if (!rawList.origins) rawList.origins = [];\n        rawList.origins.length = 0;\n\n        for (let n of rawList.originNames) {\n          if (this.story.listDefinitions === null)\n            return throwNullException(\"StoryState.story.listDefinitions\");\n          let def = this.story.listDefinitions.TryListGetDefinition(n, null);\n          if (def.result === null)\n            return throwNullException(\"StoryState def.result\");\n          if (rawList.origins.indexOf(def.result) < 0)\n            rawList.origins.push(def.result);\n        }\n      }\n    }\n\n    if (obj === null) {\n      return throwNullException(\"obj\");\n    }\n    this.evaluationStack.push(obj);\n  }\n\n  public PopEvaluationStack(): InkObject;\n  public PopEvaluationStack(numberOfObjects: number): InkObject[];\n  public PopEvaluationStack(numberOfObjects?: number) {\n    if (typeof numberOfObjects === \"undefined\") {\n      let obj = this.evaluationStack.pop();\n      return nullIfUndefined(obj);\n    } else {\n      if (numberOfObjects > this.evaluationStack.length) {\n        throw new Error(\"trying to pop too many objects\");\n      }\n\n      let popped = this.evaluationStack.splice(\n        this.evaluationStack.length - numberOfObjects,\n        numberOfObjects\n      );\n      return nullIfUndefined(popped);\n    }\n  }\n\n  public PeekEvaluationStack() {\n    return this.evaluationStack[this.evaluationStack.length - 1];\n  }\n\n  public ForceEnd() {\n    this.callStack.Reset();\n\n    this._currentFlow.currentChoices.length = 0;\n\n    this.currentPointer = Pointer.Null;\n    this.previousPointer = Pointer.Null;\n\n    this.didSafeExit = true;\n  }\n\n  public TrimWhitespaceFromFunctionEnd() {\n    Debug.Assert(this.callStack.currentElement.type == PushPopType.Function);\n    let functionStartPoint =\n      this.callStack.currentElement.functionStartInOutputStream;\n\n    if (functionStartPoint == -1) {\n      functionStartPoint = 0;\n    }\n\n    for (let i = this.outputStream.length - 1; i >= functionStartPoint; i--) {\n      let obj = this.outputStream[i];\n      let txt = asOrNull(obj, StringValue);\n      let cmd = asOrNull(obj, ControlCommand);\n\n      if (txt == null) continue;\n      if (cmd) break;\n\n      if (txt.isNewline || txt.isInlineWhitespace) {\n        this.outputStream.splice(i, 1);\n        this.OutputStreamDirty();\n      } else {\n        break;\n      }\n    }\n  }\n\n  public PopCallStack(popType: PushPopType | null = null) {\n    if (this.callStack.currentElement.type == PushPopType.Function)\n      this.TrimWhitespaceFromFunctionEnd();\n\n    this.callStack.Pop(popType);\n  }\n\n  public SetChosenPath(path: Path, incrementingTurnIndex: boolean) {\n    // Changing direction, assume we need to clear current set of choices\n    this._currentFlow.currentChoices.length = 0;\n\n    let newPointer = this.story.PointerAtPath(path);\n    if (!newPointer.isNull && newPointer.index == -1) newPointer.index = 0;\n\n    this.currentPointer = newPointer;\n\n    if (incrementingTurnIndex) {\n      this.currentTurnIndex++;\n    }\n  }\n\n  public StartFunctionEvaluationFromGame(\n    funcContainer: Container,\n    args: any[]\n  ) {\n    this.callStack.Push(\n      PushPopType.FunctionEvaluationFromGame,\n      this.evaluationStack.length\n    );\n    this.callStack.currentElement.currentPointer =\n      Pointer.StartOf(funcContainer);\n\n    this.PassArgumentsToEvaluationStack(args);\n  }\n\n  public PassArgumentsToEvaluationStack(args: any[] | null) {\n    if (args !== null) {\n      for (let i = 0; i < args.length; i++) {\n        if (\n          !(\n            typeof args[i] === \"number\" ||\n            typeof args[i] === \"string\" ||\n            typeof args[i] === \"boolean\" ||\n            args[i] instanceof InkList\n          )\n        ) {\n          throw new Error(\n            \"ink arguments when calling EvaluateFunction / ChoosePathStringWithParameters must be\" +\n            \"number, string, bool or InkList. Argument was \" +\n            (nullIfUndefined(arguments[i]) === null)\n              ? \"null\"\n              : arguments[i].constructor.name\n          );\n        }\n\n        this.PushEvaluationStack(Value.Create(args[i]));\n      }\n    }\n  }\n\n  public TryExitFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type ==\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      this.currentPointer = Pointer.Null;\n      this.didSafeExit = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  public CompleteFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type !=\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      throw new Error(\n        \"Expected external function evaluation to be complete. Stack trace: \" +\n          this.callStack.callStackTrace\n      );\n    }\n\n    let originalEvaluationStackHeight =\n      this.callStack.currentElement.evaluationStackHeightWhenPushed;\n\n    let returnedObj: InkObject | null = null;\n    while (this.evaluationStack.length > originalEvaluationStackHeight) {\n      let poppedObj = this.PopEvaluationStack();\n      if (returnedObj === null) returnedObj = poppedObj;\n    }\n\n    this.PopCallStack(PushPopType.FunctionEvaluationFromGame);\n\n    if (returnedObj) {\n      if (returnedObj instanceof Void) return null;\n\n      // Some kind of value, if not void\n      // var returnVal = returnedObj as Runtime.Value;\n      let returnVal = asOrThrows(returnedObj, Value);\n\n      // DivertTargets get returned as the string of components\n      // (rather than a Path, which isn't public)\n      if (returnVal.valueType == ValueType.DivertTarget) {\n        return returnVal.valueObject.toString();\n      }\n\n      // Other types can just have their exact object type:\n      // int, float, string. VariablePointers get returned as strings.\n      return returnVal.valueObject;\n    }\n\n    return null;\n  }\n\n  public AddError(message: string, isWarning: boolean) {\n    if (!isWarning) {\n      if (this._currentErrors == null) this._currentErrors = [];\n      this._currentErrors.push(message);\n    } else {\n      if (this._currentWarnings == null) this._currentWarnings = [];\n      this._currentWarnings.push(message);\n    }\n  }\n\n  public OutputStreamDirty() {\n    this._outputStreamTextDirty = true;\n    this._outputStreamTagsDirty = true;\n  }\n\n  private _visitCounts: Map<string, number>;\n  private _turnIndices: Map<string, number>;\n\n  private _outputStreamTextDirty = true;\n  private _outputStreamTagsDirty = true;\n\n  private _patch: StatePatch | null = null;\n\n  private _currentFlow: Flow;\n  private _aliveFlowNames: string[] | null = null;\n  private _namedFlows: Map<string, Flow> | null = null;\n  private readonly kDefaultFlowName = \"DEFAULT_FLOW\";\n  private _aliveFlowNamesDirty: boolean = true;\n}\n","// This is simple replacement of the Stopwatch class from the .NET Framework.\n// The original class can count time with much more accuracy than the Javascript version.\n// It might be worth considering using `window.performance` in the browser\n// or `process.hrtime()` in node.\nexport class Stopwatch {\n  private startTime: number | undefined;\n\n  constructor() {\n    this.startTime = undefined;\n  }\n\n  get ElapsedMilliseconds(): number {\n    if (typeof this.startTime === \"undefined\") {\n      return 0;\n    }\n    return new Date().getTime() - this.startTime;\n  }\n\n  public Start() {\n    this.startTime = new Date().getTime();\n  }\n  public Stop() {\n    this.startTime = undefined;\n  }\n}\n","import { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { StoryState } from \"./StoryState\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { Choice } from \"./Choice\";\nimport { Divert } from \"./Divert\";\nimport {\n  Value,\n  StringValue,\n  IntValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n} from \"./Value\";\nimport { Path } from \"./Path\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { VariableReference } from \"./VariableReference\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { StoryException } from \"./StoryException\";\nimport { PRNG } from \"./PRNG\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Stopwatch } from \"./StopWatch\";\nimport { Pointer } from \"./Pointer\";\nimport { InkList, InkListItem, KeyValuePair } from \"./InkList\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { DebugMetadata } from \"./DebugMetadata\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { ErrorHandler, ErrorType } from \"./Error\";\n\nexport { InkList } from \"./InkList\";\n\nif (!Number.isInteger) {\n  Number.isInteger = function isInteger(nVal: any) {\n    return (\n      typeof nVal === \"number\" &&\n      isFinite(nVal) &&\n      nVal > -9007199254740992 &&\n      nVal < 9007199254740992 &&\n      Math.floor(nVal) === nVal\n    );\n  };\n}\n\nexport class Story extends InkObject {\n  public static inkVersionCurrent = 21;\n\n  public inkVersionMinimumCompatible = 18;\n\n  get currentChoices() {\n    let choices: Choice[] = [];\n\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    for (let c of this._state.currentChoices) {\n      if (!c.isInvisibleDefault) {\n        c.index = choices.length;\n        choices.push(c);\n      }\n    }\n\n    return choices;\n  }\n\n  get currentText() {\n    this.IfAsyncWeCant(\"call currentText since it's a work in progress\");\n    return this.state.currentText;\n  }\n\n  get currentTags() {\n    this.IfAsyncWeCant(\"call currentTags since it's a work in progress\");\n    return this.state.currentTags;\n  }\n\n  get currentErrors() {\n    return this.state.currentErrors;\n  }\n\n  get currentWarnings() {\n    return this.state.currentWarnings;\n  }\n\n  get currentFlowName() {\n    return this.state.currentFlowName;\n  }\n\n  get currentFlowIsDefaultFlow() {\n    return this.state.currentFlowIsDefaultFlow;\n  }\n\n  get aliveFlowNames() {\n    return this.state.aliveFlowNames;\n  }\n\n  get hasError() {\n    return this.state.hasError;\n  }\n\n  get hasWarning() {\n    return this.state.hasWarning;\n  }\n\n  get variablesState() {\n    return this.state.variablesState;\n  }\n\n  get listDefinitions() {\n    return this._listDefinitions;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  public onError: ErrorHandler | null = null;\n\n  public onDidContinue: (() => void) | null = null;\n\n  public onMakeChoice: ((arg1: Choice) => void) | null = null;\n\n  public onEvaluateFunction: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  public onCompleteEvaluateFunction:\n    | ((arg1: string, arg2: any[], arg3: string, arg4: any) => void)\n    | null = null;\n\n  public onChoosePathString: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  // TODO: Implement Profiler\n  public StartProfiling() {\n    /* */\n  }\n  public EndProfiling() {\n    /* */\n  }\n\n  constructor(contentContainer: Container, lists: ListDefinition[] | null);\n  constructor(jsonString: string);\n  constructor(json: Record<string, any>);\n  constructor() {\n    super();\n\n    // Discrimination between constructors\n    let contentContainer: Container;\n    let lists: ListDefinition[] | null = null;\n    let json: Record<string, any> | null = null;\n\n    if (arguments[0] instanceof Container) {\n      contentContainer = arguments[0] as Container;\n\n      if (typeof arguments[1] !== \"undefined\") {\n        lists = arguments[1] as ListDefinition[];\n      }\n\n      // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n      this._mainContentContainer = contentContainer;\n      // ------\n    } else {\n      if (typeof arguments[0] === \"string\") {\n        let jsonString = arguments[0] as string;\n        json = SimpleJson.TextToDictionary(jsonString);\n      } else {\n        json = arguments[0] as Record<string, any>;\n      }\n    }\n\n    // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n    if (lists != null) this._listDefinitions = new ListDefinitionsOrigin(lists);\n\n    this._externals = new Map();\n    // ------\n\n    // ------ Story(string jsonString) : this((Container)null)\n    if (json !== null) {\n      let rootObject: Record<string, any> = json;\n\n      let versionObj = rootObject[\"inkVersion\"];\n      if (versionObj == null)\n        throw new Error(\n          \"ink version number not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let formatFromFile = parseInt(versionObj);\n      if (formatFromFile > Story.inkVersionCurrent) {\n        throw new Error(\n          \"Version of ink used to build story was newer than the current version of the engine\"\n        );\n      } else if (formatFromFile < this.inkVersionMinimumCompatible) {\n        throw new Error(\n          \"Version of ink used to build story is too old to be loaded by this version of the engine\"\n        );\n      } else if (formatFromFile != Story.inkVersionCurrent) {\n        console.warn(\n          \"WARNING: Version of ink used to build story doesn't match current version of engine. Non-critical, but recommend synchronising.\"\n        );\n      }\n\n      let rootToken = rootObject[\"root\"];\n      if (rootToken == null)\n        throw new Error(\n          \"Root node for ink not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let listDefsObj;\n      if ((listDefsObj = rootObject[\"listDefs\"])) {\n        this._listDefinitions =\n          JsonSerialisation.JTokenToListDefinitions(listDefsObj);\n      }\n\n      this._mainContentContainer = asOrThrows(\n        JsonSerialisation.JTokenToRuntimeObject(rootToken),\n        Container\n      );\n\n      this.ResetState();\n    }\n    // ------\n  }\n\n  // Merge together `public string ToJson()` and `void ToJson(SimpleJson.Writer writer)`.\n  // Will only return a value if writer was not provided.\n  public ToJson(writer?: SimpleJson.Writer): string | void {\n    let shouldReturn = false;\n\n    if (!writer) {\n      shouldReturn = true;\n      writer = new SimpleJson.Writer();\n    }\n\n    writer.WriteObjectStart();\n\n    writer.WriteIntProperty(\"inkVersion\", Story.inkVersionCurrent);\n\n    writer.WriteProperty(\"root\", (w) =>\n      JsonSerialisation.WriteRuntimeContainer(w, this._mainContentContainer)\n    );\n\n    if (this._listDefinitions != null) {\n      writer.WritePropertyStart(\"listDefs\");\n      writer.WriteObjectStart();\n\n      for (let def of this._listDefinitions.lists) {\n        writer.WritePropertyStart(def.name);\n        writer.WriteObjectStart();\n\n        for (let [key, value] of def.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          let val = value;\n          writer.WriteIntProperty(item.itemName, val);\n        }\n\n        writer.WriteObjectEnd();\n        writer.WritePropertyEnd();\n      }\n\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    if (shouldReturn) return writer.toString();\n  }\n\n  public ResetState() {\n    this.IfAsyncWeCant(\"ResetState\");\n\n    this._state = new StoryState(this);\n    this._state.variablesState.ObserveVariableChange(\n      this.VariableStateDidChangeEvent.bind(this)\n    );\n\n    this.ResetGlobals();\n  }\n\n  public ResetErrors() {\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ResetErrors();\n  }\n\n  public ResetCallstack() {\n    this.IfAsyncWeCant(\"ResetCallstack\");\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ForceEnd();\n  }\n\n  public ResetGlobals() {\n    if (this._mainContentContainer.namedContent.get(\"global decl\")) {\n      let originalPointer = this.state.currentPointer.copy();\n\n      this.ChoosePath(new Path(\"global decl\"), false);\n\n      this.ContinueInternal();\n\n      this.state.currentPointer = originalPointer;\n    }\n\n    this.state.variablesState.SnapshotDefaultGlobals();\n  }\n\n  public SwitchFlow(flowName: string) {\n    this.IfAsyncWeCant(\"switch flow\");\n    if (this._asyncSaving) {\n      throw new Error(\n        \"Story is already in background saving mode, can't switch flow to \" +\n          flowName\n      );\n    }\n\n    this.state.SwitchFlow_Internal(flowName);\n  }\n\n  public RemoveFlow(flowName: string) {\n    this.state.RemoveFlow_Internal(flowName);\n  }\n\n  public SwitchToDefaultFlow() {\n    this.state.SwitchToDefaultFlow_Internal();\n  }\n\n  public Continue() {\n    this.ContinueAsync(0);\n    return this.currentText;\n  }\n\n  get canContinue() {\n    return this.state.canContinue;\n  }\n\n  get asyncContinueComplete() {\n    return !this._asyncContinueActive;\n  }\n\n  public ContinueAsync(millisecsLimitAsync: number) {\n    if (!this._hasValidatedExternals) this.ValidateExternalBindings();\n\n    this.ContinueInternal(millisecsLimitAsync);\n  }\n\n  public ContinueInternal(millisecsLimitAsync = 0) {\n    if (this._profiler != null) this._profiler.PreContinue();\n\n    let isAsyncTimeLimited = millisecsLimitAsync > 0;\n    this._recursiveContinueCount++;\n\n    if (!this._asyncContinueActive) {\n      this._asyncContinueActive = isAsyncTimeLimited;\n\n      if (!this.canContinue) {\n        throw new Error(\n          \"Can't continue - should check canContinue before calling Continue\"\n        );\n      }\n\n      this._state.didSafeExit = false;\n      this._state.ResetOutput();\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = true;\n    }\n\n    let durationStopwatch = new Stopwatch();\n    durationStopwatch.Start();\n\n    let outputStreamEndsInNewline = false;\n    this._sawLookaheadUnsafeFunctionAfterNewline = false;\n    do {\n      try {\n        outputStreamEndsInNewline = this.ContinueSingleStep();\n      } catch (e) {\n        if (!(e instanceof StoryException)) throw e;\n\n        this.AddError(e.message, undefined, e.useEndLineNumber);\n        break;\n      }\n\n      if (outputStreamEndsInNewline) break;\n\n      if (\n        this._asyncContinueActive &&\n        durationStopwatch.ElapsedMilliseconds > millisecsLimitAsync\n      ) {\n        break;\n      }\n    } while (this.canContinue);\n\n    durationStopwatch.Stop();\n\n    if (outputStreamEndsInNewline || !this.canContinue) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        this.RestoreStateSnapshot();\n      }\n\n      if (!this.canContinue) {\n        if (this.state.callStack.canPopThread)\n          this.AddError(\n            \"Thread available to pop, threads should always be flat by the end of evaluation?\"\n          );\n\n        if (\n          this.state.generatedChoices.length == 0 &&\n          !this.state.didSafeExit &&\n          this._temporaryEvaluationContainer == null\n        ) {\n          if (this.state.callStack.CanPop(PushPopType.Tunnel))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '->->' to return from a tunnel?\"\n            );\n          else if (this.state.callStack.CanPop(PushPopType.Function))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '~ return'?\"\n            );\n          else if (!this.state.callStack.canPop)\n            this.AddError(\n              \"ran out of content. Do you need a '-> DONE' or '-> END'?\"\n            );\n          else\n            this.AddError(\n              \"unexpectedly reached end of content for unknown reason. Please debug compiler!\"\n            );\n        }\n      }\n\n      this.state.didSafeExit = false;\n      this._sawLookaheadUnsafeFunctionAfterNewline = false;\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.batchObservingVariableChanges = false;\n\n      this._asyncContinueActive = false;\n      if (this.onDidContinue !== null) this.onDidContinue();\n    }\n\n    this._recursiveContinueCount--;\n\n    if (this._profiler != null) this._profiler.PostContinue();\n\n    // In the following code, we're masking a lot of non-null assertion,\n    // because testing for against `hasError` or `hasWarning` makes sure\n    // the arrays are present and contain at least one element.\n    if (this.state.hasError || this.state.hasWarning) {\n      if (this.onError !== null) {\n        if (this.state.hasError) {\n          for (let err of this.state.currentErrors!) {\n            this.onError(err, ErrorType.Error);\n          }\n        }\n        if (this.state.hasWarning) {\n          for (let err of this.state.currentWarnings!) {\n            this.onError(err, ErrorType.Warning);\n          }\n        }\n        this.ResetErrors();\n      } else {\n        let sb = new StringBuilder();\n        sb.Append(\"Ink had \");\n        if (this.state.hasError) {\n          sb.Append(`${this.state.currentErrors!.length}`);\n          sb.Append(\n            this.state.currentErrors!.length == 1 ? \" error\" : \"errors\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        if (this.state.hasWarning) {\n          sb.Append(`${this.state.currentWarnings!.length}`);\n          sb.Append(\n            this.state.currentWarnings!.length == 1 ? \" warning\" : \"warnings\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        sb.Append(\n          \". It is strongly suggested that you assign an error handler to story.onError. The first issue was: \"\n        );\n        sb.Append(\n          this.state.hasError\n            ? this.state.currentErrors![0]\n            : this.state.currentWarnings![0]\n        );\n\n        throw new StoryException(sb.toString());\n      }\n    }\n  }\n\n  public ContinueSingleStep() {\n    if (this._profiler != null) this._profiler.PreStep();\n\n    this.Step();\n\n    if (this._profiler != null) this._profiler.PostStep();\n\n    if (!this.canContinue && !this.state.callStack.elementIsEvaluateFromGame) {\n      this.TryFollowDefaultInvisibleChoice();\n    }\n\n    if (this._profiler != null) this._profiler.PreSnapshot();\n\n    if (!this.state.inStringEvaluation) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        if (this._stateSnapshotAtLastNewline.currentTags === null) {\n          return throwNullException(\"this._stateAtLastNewline.currentTags\");\n        }\n        if (this.state.currentTags === null) {\n          return throwNullException(\"this.state.currentTags\");\n        }\n\n        let change = this.CalculateNewlineOutputStateChange(\n          this._stateSnapshotAtLastNewline.currentText,\n          this.state.currentText,\n          this._stateSnapshotAtLastNewline.currentTags.length,\n          this.state.currentTags.length\n        );\n\n        if (\n          change == Story.OutputStateChange.ExtendedBeyondNewline ||\n          this._sawLookaheadUnsafeFunctionAfterNewline\n        ) {\n          this.RestoreStateSnapshot();\n\n          return true;\n        } else if (change == Story.OutputStateChange.NewlineRemoved) {\n          this.DiscardSnapshot();\n        }\n      }\n\n      if (this.state.outputStreamEndsInNewline) {\n        if (this.canContinue) {\n          if (this._stateSnapshotAtLastNewline == null) this.StateSnapshot();\n        } else {\n          this.DiscardSnapshot();\n        }\n      }\n    }\n\n    if (this._profiler != null) this._profiler.PostSnapshot();\n\n    return false;\n  }\n\n  public CalculateNewlineOutputStateChange(\n    prevText: string | null,\n    currText: string | null,\n    prevTagCount: number,\n    currTagCount: number\n  ) {\n    if (prevText === null) {\n      return throwNullException(\"prevText\");\n    }\n    if (currText === null) {\n      return throwNullException(\"currText\");\n    }\n\n    let newlineStillExists =\n      currText.length >= prevText.length &&\n      prevText.length > 0 &&\n      currText.charAt(prevText.length - 1) == \"\\n\";\n    if (\n      prevTagCount == currTagCount &&\n      prevText.length == currText.length &&\n      newlineStillExists\n    )\n      return Story.OutputStateChange.NoChange;\n\n    if (!newlineStillExists) {\n      return Story.OutputStateChange.NewlineRemoved;\n    }\n\n    if (currTagCount > prevTagCount)\n      return Story.OutputStateChange.ExtendedBeyondNewline;\n\n    for (let i = prevText.length; i < currText.length; i++) {\n      let c = currText.charAt(i);\n      if (c != \" \" && c != \"\\t\") {\n        return Story.OutputStateChange.ExtendedBeyondNewline;\n      }\n    }\n\n    return Story.OutputStateChange.NoChange;\n  }\n\n  public ContinueMaximally() {\n    this.IfAsyncWeCant(\"ContinueMaximally\");\n\n    let sb = new StringBuilder();\n\n    while (this.canContinue) {\n      sb.Append(this.Continue());\n    }\n\n    return sb.toString();\n  }\n\n  public ContentAtPath(path: Path) {\n    return this.mainContentContainer.ContentAtPath(path);\n  }\n\n  public KnotContainerWithName(name: string) {\n    let namedContainer = this.mainContentContainer.namedContent.get(name);\n    if (namedContainer instanceof Container) return namedContainer;\n    else return null;\n  }\n\n  public PointerAtPath(path: Path) {\n    if (path.length == 0) return Pointer.Null;\n\n    let p = new Pointer();\n\n    let pathLengthToUse = path.length;\n\n    let result = null;\n    if (path.lastComponent === null) {\n      return throwNullException(\"path.lastComponent\");\n    }\n\n    if (path.lastComponent.isIndex) {\n      pathLengthToUse = path.length - 1;\n      result = this.mainContentContainer.ContentAtPath(\n        path,\n        undefined,\n        pathLengthToUse\n      );\n      p.container = result.container;\n      p.index = path.lastComponent.index;\n    } else {\n      result = this.mainContentContainer.ContentAtPath(path);\n      p.container = result.container;\n      p.index = -1;\n    }\n\n    if (\n      result.obj == null ||\n      (result.obj == this.mainContentContainer && pathLengthToUse > 0)\n    ) {\n      this.Error(\n        \"Failed to find content at path '\" +\n          path +\n          \"', and no approximation of it was possible.\"\n      );\n    } else if (result.approximate)\n      this.Warning(\n        \"Failed to find content at path '\" +\n          path +\n          \"', so it was approximated to: '\" +\n          result.obj.path +\n          \"'.\"\n      );\n\n    return p;\n  }\n\n  public StateSnapshot() {\n    this._stateSnapshotAtLastNewline = this._state;\n    this._state = this._state.CopyAndStartPatching();\n  }\n\n  public RestoreStateSnapshot() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      throwNullException(\"_stateSnapshotAtLastNewline\");\n    }\n    this._stateSnapshotAtLastNewline.RestoreAfterPatch();\n\n    this._state = this._stateSnapshotAtLastNewline;\n    this._stateSnapshotAtLastNewline = null;\n\n    if (!this._asyncSaving) {\n      this._state.ApplyAnyPatch();\n    }\n  }\n\n  public DiscardSnapshot() {\n    if (!this._asyncSaving) this._state.ApplyAnyPatch();\n\n    this._stateSnapshotAtLastNewline = null;\n  }\n\n  public CopyStateForBackgroundThreadSave() {\n    this.IfAsyncWeCant(\"start saving on a background thread\");\n\n    if (this._asyncSaving)\n      throw new Error(\n        \"Story is already in background saving mode, can't call CopyStateForBackgroundThreadSave again!\"\n      );\n\n    let stateToSave = this._state;\n    this._state = this._state.CopyAndStartPatching();\n    this._asyncSaving = true;\n    return stateToSave;\n  }\n\n  public BackgroundSaveComplete() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      this._state.ApplyAnyPatch();\n    }\n\n    this._asyncSaving = false;\n  }\n\n  public Step() {\n    let shouldAddToStream = true;\n\n    let pointer = this.state.currentPointer.copy();\n    if (pointer.isNull) {\n      return;\n    }\n\n    // Container containerToEnter = pointer.Resolve () as Container;\n    let containerToEnter = asOrNull(pointer.Resolve(), Container);\n\n    while (containerToEnter) {\n      this.VisitContainer(containerToEnter, true);\n\n      // No content? the most we can do is step past it\n      if (containerToEnter.content.length == 0) {\n        break;\n      }\n\n      pointer = Pointer.StartOf(containerToEnter);\n      // containerToEnter = pointer.Resolve() as Container;\n      containerToEnter = asOrNull(pointer.Resolve(), Container);\n    }\n\n    this.state.currentPointer = pointer.copy();\n\n    if (this._profiler != null) this._profiler.Step(this.state.callStack);\n\n    // Is the current content object:\n    //  - Normal content\n    //  - Or a logic/flow statement - if so, do it\n    // Stop flow if we hit a stack pop when we're unable to pop (e.g. return/done statement in knot\n    // that was diverted to rather than called as a function)\n    let currentContentObj = pointer.Resolve();\n    let isLogicOrFlowControl =\n      this.PerformLogicAndFlowControl(currentContentObj);\n\n    // Has flow been forced to end by flow control above?\n    if (this.state.currentPointer.isNull) {\n      return;\n    }\n\n    if (isLogicOrFlowControl) {\n      shouldAddToStream = false;\n    }\n\n    // Choice with condition?\n    // var choicePoint = currentContentObj as ChoicePoint;\n    let choicePoint = asOrNull(currentContentObj, ChoicePoint);\n    if (choicePoint) {\n      let choice = this.ProcessChoice(choicePoint);\n      if (choice) {\n        this.state.generatedChoices.push(choice);\n      }\n\n      currentContentObj = null;\n      shouldAddToStream = false;\n    }\n\n    // If the container has no content, then it will be\n    // the \"content\" itself, but we skip over it.\n    if (currentContentObj instanceof Container) {\n      shouldAddToStream = false;\n    }\n\n    // Content to add to evaluation stack or the output stream\n    if (shouldAddToStream) {\n      // If we're pushing a variable pointer onto the evaluation stack, ensure that it's specific\n      // to our current (possibly temporary) context index. And make a copy of the pointer\n      // so that we're not editing the original runtime object.\n      // var varPointer = currentContentObj as VariablePointerValue;\n      let varPointer = asOrNull(currentContentObj, VariablePointerValue);\n      if (varPointer && varPointer.contextIndex == -1) {\n        // Create new object so we're not overwriting the story's own data\n        let contextIdx = this.state.callStack.ContextForVariableNamed(\n          varPointer.variableName\n        );\n        currentContentObj = new VariablePointerValue(\n          varPointer.variableName,\n          contextIdx\n        );\n      }\n\n      // Expression evaluation content\n      if (this.state.inExpressionEvaluation) {\n        this.state.PushEvaluationStack(currentContentObj);\n      }\n      // Output stream content (i.e. not expression evaluation)\n      else {\n        this.state.PushToOutputStream(currentContentObj);\n      }\n    }\n\n    // Increment the content pointer, following diverts if necessary\n    this.NextContent();\n\n    // Starting a thread should be done after the increment to the content pointer,\n    // so that when returning from the thread, it returns to the content after this instruction.\n    // var controlCmd = currentContentObj as ;\n    let controlCmd = asOrNull(currentContentObj, ControlCommand);\n    if (\n      controlCmd &&\n      controlCmd.commandType == ControlCommand.CommandType.StartThread\n    ) {\n      this.state.callStack.PushThread();\n    }\n  }\n\n  public VisitContainer(container: Container, atStart: boolean) {\n    if (!container.countingAtStartOnly || atStart) {\n      if (container.visitsShouldBeCounted)\n        this.state.IncrementVisitCountForContainer(container);\n\n      if (container.turnIndexShouldBeCounted)\n        this.state.RecordTurnIndexVisitToContainer(container);\n    }\n  }\n\n  private _prevContainers: Container[] = [];\n  public VisitChangedContainersDueToDivert() {\n    let previousPointer = this.state.previousPointer.copy();\n    let pointer = this.state.currentPointer.copy();\n\n    if (pointer.isNull || pointer.index == -1) return;\n\n    this._prevContainers.length = 0;\n    if (!previousPointer.isNull) {\n      // Container prevAncestor = previousPointer.Resolve() as Container ?? previousPointer.container as Container;\n      let resolvedPreviousAncestor = previousPointer.Resolve();\n      let prevAncestor =\n        asOrNull(resolvedPreviousAncestor, Container) ||\n        asOrNull(previousPointer.container, Container);\n      while (prevAncestor) {\n        this._prevContainers.push(prevAncestor);\n        // prevAncestor = prevAncestor.parent as Container;\n        prevAncestor = asOrNull(prevAncestor.parent, Container);\n      }\n    }\n\n    let currentChildOfContainer = pointer.Resolve();\n\n    if (currentChildOfContainer == null) return;\n\n    // Container currentContainerAncestor = currentChildOfContainer.parent as Container;\n    let currentContainerAncestor = asOrNull(\n      currentChildOfContainer.parent,\n      Container\n    );\n    let allChildrenEnteredAtStart = true;\n    while (\n      currentContainerAncestor &&\n      (this._prevContainers.indexOf(currentContainerAncestor) < 0 ||\n        currentContainerAncestor.countingAtStartOnly)\n    ) {\n      // Check whether this ancestor container is being entered at the start,\n      // by checking whether the child object is the first.\n      let enteringAtStart =\n        currentContainerAncestor.content.length > 0 &&\n        currentChildOfContainer == currentContainerAncestor.content[0] &&\n        allChildrenEnteredAtStart;\n\n      if (!enteringAtStart) allChildrenEnteredAtStart = false;\n\n      // Mark a visit to this container\n      this.VisitContainer(currentContainerAncestor, enteringAtStart);\n\n      currentChildOfContainer = currentContainerAncestor;\n      // currentContainerAncestor = currentContainerAncestor.parent as Container;\n      currentContainerAncestor = asOrNull(\n        currentContainerAncestor.parent,\n        Container\n      );\n    }\n  }\n\n  public PopChoiceStringAndTags(tags: string[]) {\n    let choiceOnlyStrVal = asOrThrows(\n      this.state.PopEvaluationStack(),\n      StringValue\n    );\n\n    while (\n      this.state.evaluationStack.length > 0 &&\n      asOrNull(this.state.PeekEvaluationStack(), Tag) != null\n    ) {\n      let tag = asOrNull(this.state.PopEvaluationStack(), Tag);\n      if (tag) tags.push(tag.text);\n    }\n    return choiceOnlyStrVal.value;\n  }\n\n  public ProcessChoice(choicePoint: ChoicePoint) {\n    let showChoice = true;\n\n    // Don't create choice if choice point doesn't pass conditional\n    if (choicePoint.hasCondition) {\n      let conditionValue = this.state.PopEvaluationStack();\n      if (!this.IsTruthy(conditionValue)) {\n        showChoice = false;\n      }\n    }\n\n    let startText = \"\";\n    let choiceOnlyText = \"\";\n    let tags: string[] = [];\n\n    if (choicePoint.hasChoiceOnlyContent) {\n      choiceOnlyText = this.PopChoiceStringAndTags(tags) || \"\";\n    }\n\n    if (choicePoint.hasStartContent) {\n      startText = this.PopChoiceStringAndTags(tags) || \"\";\n    }\n\n    // Don't create choice if player has already read this content\n    if (choicePoint.onceOnly) {\n      let visitCount = this.state.VisitCountForContainer(\n        choicePoint.choiceTarget\n      );\n      if (visitCount > 0) {\n        showChoice = false;\n      }\n    }\n\n    // We go through the full process of creating the choice above so\n    // that we consume the content for it, since otherwise it'll\n    // be shown on the output stream.\n    if (!showChoice) {\n      return null;\n    }\n\n    let choice = new Choice();\n    choice.targetPath = choicePoint.pathOnChoice;\n    choice.sourcePath = choicePoint.path.toString();\n    choice.isInvisibleDefault = choicePoint.isInvisibleDefault;\n    choice.threadAtGeneration = this.state.callStack.ForkThread();\n    choice.tags = tags.reverse(); //C# is a stack\n    choice.text = (startText + choiceOnlyText).replace(/^[ \\t]+|[ \\t]+$/g, \"\");\n\n    return choice;\n  }\n\n  public IsTruthy(obj: InkObject) {\n    let truthy = false;\n    if (obj instanceof Value) {\n      let val = obj;\n\n      if (val instanceof DivertTargetValue) {\n        let divTarget = val;\n        this.Error(\n          \"Shouldn't use a divert target (to \" +\n            divTarget.targetPath +\n            \") as a conditional value. Did you intend a function call 'likeThis()' or a read count check 'likeThis'? (no arrows)\"\n        );\n        return false;\n      }\n\n      return val.isTruthy;\n    }\n    return truthy;\n  }\n\n  public PerformLogicAndFlowControl(contentObj: InkObject | null) {\n    if (contentObj == null) {\n      return false;\n    }\n\n    // Divert\n    if (contentObj instanceof Divert) {\n      let currentDivert = contentObj;\n\n      if (currentDivert.isConditional) {\n        let conditionValue = this.state.PopEvaluationStack();\n\n        // False conditional? Cancel divert\n        if (!this.IsTruthy(conditionValue)) return true;\n      }\n\n      if (currentDivert.hasVariableTarget) {\n        let varName = currentDivert.variableDivertName;\n\n        let varContents =\n          this.state.variablesState.GetVariableWithName(varName);\n\n        if (varContents == null) {\n          this.Error(\n            \"Tried to divert using a target from a variable that could not be found (\" +\n              varName +\n              \")\"\n          );\n        } else if (!(varContents instanceof DivertTargetValue)) {\n          // var intContent = varContents as IntValue;\n          let intContent = asOrNull(varContents, IntValue);\n\n          let errorMessage =\n            \"Tried to divert to a target from a variable, but the variable (\" +\n            varName +\n            \") didn't contain a divert target, it \";\n          if (intContent instanceof IntValue && intContent.value == 0) {\n            errorMessage += \"was empty/null (the value 0).\";\n          } else {\n            errorMessage += \"contained '\" + varContents + \"'.\";\n          }\n\n          this.Error(errorMessage);\n        }\n\n        let target = asOrThrows(varContents, DivertTargetValue);\n        this.state.divertedPointer = this.PointerAtPath(target.targetPath);\n      } else if (currentDivert.isExternal) {\n        this.CallExternalFunction(\n          currentDivert.targetPathString,\n          currentDivert.externalArgs\n        );\n        return true;\n      } else {\n        this.state.divertedPointer = currentDivert.targetPointer.copy();\n      }\n\n      if (currentDivert.pushesToStack) {\n        this.state.callStack.Push(\n          currentDivert.stackPushType,\n          undefined,\n          this.state.outputStream.length\n        );\n      }\n\n      if (this.state.divertedPointer.isNull && !currentDivert.isExternal) {\n        if (\n          currentDivert &&\n          currentDivert.debugMetadata &&\n          currentDivert.debugMetadata.sourceName != null\n        ) {\n          this.Error(\n            \"Divert target doesn't exist: \" +\n              currentDivert.debugMetadata.sourceName\n          );\n        } else {\n          this.Error(\"Divert resolution failed: \" + currentDivert);\n        }\n      }\n\n      return true;\n    }\n\n    // Start/end an expression evaluation? Or print out the result?\n    else if (contentObj instanceof ControlCommand) {\n      let evalCommand = contentObj;\n\n      switch (evalCommand.commandType) {\n        case ControlCommand.CommandType.EvalStart:\n          this.Assert(\n            this.state.inExpressionEvaluation === false,\n            \"Already in expression evaluation?\"\n          );\n          this.state.inExpressionEvaluation = true;\n          break;\n\n        case ControlCommand.CommandType.EvalEnd:\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Not in expression evaluation mode\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        case ControlCommand.CommandType.EvalOutput:\n          // If the expression turned out to be empty, there may not be anything on the stack\n          if (this.state.evaluationStack.length > 0) {\n            let output = this.state.PopEvaluationStack();\n\n            // Functions may evaluate to Void, in which case we skip output\n            if (!(output instanceof Void)) {\n              // TODO: Should we really always blanket convert to string?\n              // It would be okay to have numbers in the output stream the\n              // only problem is when exporting text for viewing, it skips over numbers etc.\n              let text = new StringValue(output.toString());\n\n              this.state.PushToOutputStream(text);\n            }\n          }\n          break;\n\n        case ControlCommand.CommandType.NoOp:\n          break;\n\n        case ControlCommand.CommandType.Duplicate:\n          this.state.PushEvaluationStack(this.state.PeekEvaluationStack());\n          break;\n\n        case ControlCommand.CommandType.PopEvaluatedValue:\n          this.state.PopEvaluationStack();\n          break;\n\n        case ControlCommand.CommandType.PopFunction:\n        case ControlCommand.CommandType.PopTunnel:\n          let popType =\n            evalCommand.commandType == ControlCommand.CommandType.PopFunction\n              ? PushPopType.Function\n              : PushPopType.Tunnel;\n\n          let overrideTunnelReturnTarget: DivertTargetValue | null = null;\n          if (popType == PushPopType.Tunnel) {\n            let popped = this.state.PopEvaluationStack();\n            // overrideTunnelReturnTarget = popped as DivertTargetValue;\n            overrideTunnelReturnTarget = asOrNull(popped, DivertTargetValue);\n            if (overrideTunnelReturnTarget === null) {\n              this.Assert(\n                popped instanceof Void,\n                \"Expected void if ->-> doesn't override target\"\n              );\n            }\n          }\n\n          if (this.state.TryExitFunctionEvaluationFromGame()) {\n            break;\n          } else if (\n            this.state.callStack.currentElement.type != popType ||\n            !this.state.callStack.canPop\n          ) {\n            let names: Map<PushPopType, string> = new Map();\n            names.set(\n              PushPopType.Function,\n              \"function return statement (~ return)\"\n            );\n            names.set(PushPopType.Tunnel, \"tunnel onwards statement (->->)\");\n\n            let expected = names.get(this.state.callStack.currentElement.type);\n            if (!this.state.callStack.canPop) {\n              expected = \"end of flow (-> END or choice)\";\n            }\n\n            let errorMsg =\n              \"Found \" + names.get(popType) + \", when expected \" + expected;\n\n            this.Error(errorMsg);\n          } else {\n            this.state.PopCallStack();\n\n            if (overrideTunnelReturnTarget)\n              this.state.divertedPointer = this.PointerAtPath(\n                overrideTunnelReturnTarget.targetPath\n              );\n          }\n          break;\n\n        case ControlCommand.CommandType.BeginString:\n          this.state.PushToOutputStream(evalCommand);\n\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Expected to be in an expression when evaluating a string\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        // Leave it to story.currentText and story.currentTags to sort out the text from the tags\n        // This is mostly because we can't always rely on the existence of EndTag, and we don't want\n        // to try and flatten dynamic tags to strings every time \\n is pushed to output\n        case ControlCommand.CommandType.BeginTag:\n          this.state.PushToOutputStream(evalCommand);\n          break;\n\n        // EndTag has 2 modes:\n        //  - When in string evaluation (for choices)\n        //  - Normal\n        //\n        // The only way you could have an EndTag in the middle of\n        // string evaluation is if we're currently generating text for a\n        // choice, such as:\n        //\n        //   + choice # tag\n        //\n        // In the above case, the ink will be run twice:\n        //  - First, to generate the choice text. String evaluation\n        //    will be on, and the final string will be pushed to the\n        //    evaluation stack, ready to be popped to make a Choice\n        //    object.\n        //  - Second, when ink generates text after choosing the choice.\n        //    On this ocassion, it's not in string evaluation mode.\n        //\n        // On the writing side, we disallow manually putting tags within\n        // strings like this:\n        //\n        //   {\"hello # world\"}\n        //\n        // So we know that the tag must be being generated as part of\n        // choice content. Therefore, when the tag has been generated,\n        // we push it onto the evaluation stack in the exact same way\n        // as the string for the choice content.\n        case ControlCommand.CommandType.EndTag: {\n          if (this.state.inStringEvaluation) {\n            let contentStackForTag: InkObject[] = [];\n            let outputCountConsumed = 0;\n            for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n              let obj = this.state.outputStream[i];\n              outputCountConsumed++;\n\n              // var command = obj as ControlCommand;\n              let command = asOrNull(obj, ControlCommand);\n              if (command != null) {\n                if (\n                  command.commandType == ControlCommand.CommandType.BeginTag\n                ) {\n                  break;\n                } else {\n                  this.Error(\n                    \"Unexpected ControlCommand while extracting tag from choice\"\n                  );\n                  break;\n                }\n              }\n              if (obj instanceof StringValue) {\n                contentStackForTag.push(obj);\n              }\n            }\n\n            // Consume the content that was produced for this string\n            this.state.PopFromOutputStream(outputCountConsumed);\n            // Build string out of the content we collected\n            let sb = new StringBuilder();\n            for (let strVal of contentStackForTag) {\n              sb.Append(strVal.toString());\n            }\n            let choiceTag = new Tag(\n              this.state.CleanOutputWhitespace(sb.toString())\n            );\n            // Pushing to the evaluation stack means it gets picked up\n            // when a Choice is generated from the next Choice Point.\n            this.state.PushEvaluationStack(choiceTag);\n          } else {\n            // Otherwise! Simply push EndTag, so that in the output stream we\n            // have a structure of: [BeginTag, \"the tag content\", EndTag]\n            this.state.PushToOutputStream(evalCommand);\n          }\n          break;\n        }\n\n        case ControlCommand.CommandType.EndString: {\n          let contentStackForString: InkObject[] = [];\n          let contentToRetain: InkObject[] = [];\n\n          let outputCountConsumed = 0;\n          for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n            let obj = this.state.outputStream[i];\n\n            outputCountConsumed++;\n\n            // var command = obj as ControlCommand;\n            let command = asOrNull(obj, ControlCommand);\n            if (\n              command &&\n              command.commandType == ControlCommand.CommandType.BeginString\n            ) {\n              break;\n            }\n            if (obj instanceof Tag) {\n              contentToRetain.push(obj);\n            }\n            if (obj instanceof StringValue) {\n              contentStackForString.push(obj);\n            }\n          }\n\n          // Consume the content that was produced for this string\n          this.state.PopFromOutputStream(outputCountConsumed);\n\n          // Rescue the tags that we want actually to keep on the output stack\n          // rather than consume as part of the string we're building.\n          // At the time of writing, this only applies to Tag objects generated\n          // by choices, which are pushed to the stack during string generation.\n          for (let rescuedTag of contentToRetain)\n            this.state.PushToOutputStream(rescuedTag);\n\n          // The C# version uses a Stack for contentStackForString, but we're\n          // using a simple array, so we need to reverse it before using it\n          contentStackForString = contentStackForString.reverse();\n\n          // Build string out of the content we collected\n          let sb = new StringBuilder();\n          for (let c of contentStackForString) {\n            sb.Append(c.toString());\n          }\n\n          // Return to expression evaluation (from content mode)\n          this.state.inExpressionEvaluation = true;\n          this.state.PushEvaluationStack(new StringValue(sb.toString()));\n          break;\n        }\n\n        case ControlCommand.CommandType.ChoiceCount:\n          let choiceCount = this.state.generatedChoices.length;\n          this.state.PushEvaluationStack(new IntValue(choiceCount));\n          break;\n\n        case ControlCommand.CommandType.Turns:\n          this.state.PushEvaluationStack(\n            new IntValue(this.state.currentTurnIndex + 1)\n          );\n          break;\n\n        case ControlCommand.CommandType.TurnsSince:\n        case ControlCommand.CommandType.ReadCount:\n          let target = this.state.PopEvaluationStack();\n          if (!(target instanceof DivertTargetValue)) {\n            let extraNote = \"\";\n            if (target instanceof IntValue)\n              extraNote =\n                \". Did you accidentally pass a read count ('knot_name') instead of a target ('-> knot_name')?\";\n            this.Error(\n              \"TURNS_SINCE / READ_COUNT expected a divert target (knot, stitch, label name), but saw \" +\n                target +\n                extraNote\n            );\n            break;\n          }\n\n          // var divertTarget = target as DivertTargetValue;\n          let divertTarget = asOrThrows(target, DivertTargetValue);\n          // var container = ContentAtPath (divertTarget.targetPath).correctObj as Container;\n          let container = asOrNull(\n            this.ContentAtPath(divertTarget.targetPath).correctObj,\n            Container\n          );\n\n          let eitherCount;\n          if (container != null) {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = this.state.TurnsSinceForContainer(container);\n            else eitherCount = this.state.VisitCountForContainer(container);\n          } else {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = -1;\n            else eitherCount = 0;\n\n            this.Warning(\n              \"Failed to find container for \" +\n                evalCommand.toString() +\n                \" lookup at \" +\n                divertTarget.targetPath.toString()\n            );\n          }\n\n          this.state.PushEvaluationStack(new IntValue(eitherCount));\n          break;\n\n        case ControlCommand.CommandType.Random: {\n          let maxInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          let minInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\n          if (minInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for minimum parameter of RANDOM(min, max)\"\n            );\n\n          if (maxInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for maximum parameter of RANDOM(min, max)\"\n            );\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (maxInt.value === null) {\n            return throwNullException(\"maxInt.value\");\n          }\n          if (minInt.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          // This code is differs a bit from the reference implementation, since\n          // JavaScript has no true integers. Hence integer arithmetics and\n          // interger overflows don't apply here. A loss of precision can\n          // happen with big numbers however.\n          //\n          // The case where 'randomRange' is lower than zero is handled below,\n          // so there's no need to test against Number.MIN_SAFE_INTEGER.\n          let randomRange = maxInt.value - minInt.value + 1;\n          if (!isFinite(randomRange) || randomRange > Number.MAX_SAFE_INTEGER) {\n            randomRange = Number.MAX_SAFE_INTEGER;\n            this.Error(\n              \"RANDOM was called with a range that exceeds the size that ink numbers can use.\"\n            );\n          }\n          if (randomRange <= 0)\n            this.Error(\n              \"RANDOM was called with minimum as \" +\n                minInt.value +\n                \" and maximum as \" +\n                maxInt.value +\n                \". The maximum must be larger\"\n            );\n\n          let resultSeed = this.state.storySeed + this.state.previousRandom;\n          let random = new PRNG(resultSeed);\n\n          let nextRandom = random.next();\n          let chosenValue = (nextRandom % randomRange) + minInt.value;\n          this.state.PushEvaluationStack(new IntValue(chosenValue));\n\n          // Next random number (rather than keeping the Random object around)\n          this.state.previousRandom = nextRandom;\n          break;\n        }\n\n        case ControlCommand.CommandType.SeedRandom:\n          let seed = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          if (seed == null || seed instanceof IntValue === false)\n            return this.Error(\"Invalid value passed to SEED_RANDOM\");\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (seed.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          this.state.storySeed = seed.value;\n          this.state.previousRandom = 0;\n\n          this.state.PushEvaluationStack(new Void());\n          break;\n\n        case ControlCommand.CommandType.VisitIndex:\n          let count =\n            this.state.VisitCountForContainer(\n              this.state.currentPointer.container\n            ) - 1; // index not count\n          this.state.PushEvaluationStack(new IntValue(count));\n          break;\n\n        case ControlCommand.CommandType.SequenceShuffleIndex:\n          let shuffleIndex = this.NextSequenceShuffleIndex();\n          this.state.PushEvaluationStack(new IntValue(shuffleIndex));\n          break;\n\n        case ControlCommand.CommandType.StartThread:\n          // Handled in main step function\n          break;\n\n        case ControlCommand.CommandType.Done:\n          // We may exist in the context of the initial\n          // act of creating the thread, or in the context of\n          // evaluating the content.\n          if (this.state.callStack.canPopThread) {\n            this.state.callStack.PopThread();\n          }\n\n          // In normal flow - allow safe exit without warning\n          else {\n            this.state.didSafeExit = true;\n\n            // Stop flow in current thread\n            this.state.currentPointer = Pointer.Null;\n          }\n\n          break;\n\n        // Force flow to end completely\n        case ControlCommand.CommandType.End:\n          this.state.ForceEnd();\n          break;\n\n        case ControlCommand.CommandType.ListFromInt:\n          // var intVal = state.PopEvaluationStack () as IntValue;\n          let intVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          // var listNameVal = state.PopEvaluationStack () as StringValue;\n          let listNameVal = asOrThrows(\n            this.state.PopEvaluationStack(),\n            StringValue\n          );\n\n          if (intVal === null) {\n            throw new StoryException(\n              \"Passed non-integer when creating a list element from a numerical value.\"\n            );\n          }\n\n          let generatedListValue = null;\n\n          if (this.listDefinitions === null) {\n            return throwNullException(\"this.listDefinitions\");\n          }\n          let foundListDef = this.listDefinitions.TryListGetDefinition(\n            listNameVal.value,\n            null\n          );\n          if (foundListDef.exists) {\n            // Originally a primitive type, but here, can be null.\n            // TODO: Replace by default value?\n            if (intVal.value === null) {\n              return throwNullException(\"minInt.value\");\n            }\n\n            let foundItem = foundListDef.result!.TryGetItemWithValue(\n              intVal.value,\n              InkListItem.Null\n            );\n            if (foundItem.exists) {\n              generatedListValue = new ListValue(\n                foundItem.result!,\n                intVal.value\n              );\n            }\n          } else {\n            throw new StoryException(\n              \"Failed to find LIST called \" + listNameVal.value\n            );\n          }\n\n          if (generatedListValue == null) generatedListValue = new ListValue();\n\n          this.state.PushEvaluationStack(generatedListValue);\n          break;\n\n        case ControlCommand.CommandType.ListRange:\n          let max = asOrNull(this.state.PopEvaluationStack(), Value);\n          let min = asOrNull(this.state.PopEvaluationStack(), Value);\n\n          // var targetList = state.PopEvaluationStack () as ListValue;\n          let targetList = asOrNull(this.state.PopEvaluationStack(), ListValue);\n\n          if (targetList === null || min === null || max === null)\n            throw new StoryException(\n              \"Expected list, minimum and maximum for LIST_RANGE\"\n            );\n\n          if (targetList.value === null) {\n            return throwNullException(\"targetList.value\");\n          }\n          let result = targetList.value.ListWithSubRange(\n            min.valueObject,\n            max.valueObject\n          );\n\n          this.state.PushEvaluationStack(new ListValue(result));\n          break;\n\n        case ControlCommand.CommandType.ListRandom: {\n          let listVal = this.state.PopEvaluationStack() as ListValue;\n          if (listVal === null)\n            throw new StoryException(\"Expected list for LIST_RANDOM\");\n\n          let list = listVal.value;\n\n          let newList: InkList | null = null;\n\n          if (list === null) {\n            throw throwNullException(\"list\");\n          }\n          if (list.Count == 0) {\n            newList = new InkList();\n          } else {\n            // Generate a random index for the element to take\n            let resultSeed = this.state.storySeed + this.state.previousRandom;\n            let random = new PRNG(resultSeed);\n\n            let nextRandom = random.next();\n            let listItemIndex = nextRandom % list.Count;\n\n            // This bit is a little different from the original\n            // C# code, since iterators do not work in the same way.\n            // First, we iterate listItemIndex - 1 times, calling next().\n            // The listItemIndex-th time is made outside of the loop,\n            // in order to retrieve the value.\n            let listEnumerator = list.entries();\n            for (let i = 0; i <= listItemIndex - 1; i++) {\n              listEnumerator.next();\n            }\n            let value = listEnumerator.next().value;\n            let randomItem: KeyValuePair<InkListItem, number> = {\n              Key: InkListItem.fromSerializedKey(value[0]),\n              Value: value[1],\n            };\n\n            // Origin list is simply the origin of the one element\n            if (randomItem.Key.originName === null) {\n              return throwNullException(\"randomItem.Key.originName\");\n            }\n            newList = new InkList(randomItem.Key.originName, this);\n            newList.Add(randomItem.Key, randomItem.Value);\n\n            this.state.previousRandom = nextRandom;\n          }\n\n          this.state.PushEvaluationStack(new ListValue(newList));\n          break;\n        }\n\n        default:\n          this.Error(\"unhandled ControlCommand: \" + evalCommand);\n          break;\n      }\n\n      return true;\n    }\n\n    // Variable assignment\n    else if (contentObj instanceof VariableAssignment) {\n      let varAss = contentObj;\n      let assignedVal = this.state.PopEvaluationStack();\n\n      this.state.variablesState.Assign(varAss, assignedVal);\n\n      return true;\n    }\n\n    // Variable reference\n    else if (contentObj instanceof VariableReference) {\n      let varRef = contentObj;\n      let foundValue = null;\n\n      // Explicit read count value\n      if (varRef.pathForCount != null) {\n        let container = varRef.containerForCount;\n        let count = this.state.VisitCountForContainer(container);\n        foundValue = new IntValue(count);\n      }\n\n      // Normal variable reference\n      else {\n        foundValue = this.state.variablesState.GetVariableWithName(varRef.name);\n\n        if (foundValue == null) {\n          this.Warning(\n            \"Variable not found: '\" +\n              varRef.name +\n              \"'. Using default value of 0 (false). This can happen with temporary variables if the declaration hasn't yet been hit. Globals are always given a default value on load if a value doesn't exist in the save state.\"\n          );\n          foundValue = new IntValue(0);\n        }\n      }\n\n      this.state.PushEvaluationStack(foundValue);\n\n      return true;\n    }\n\n    // Native function call\n    else if (contentObj instanceof NativeFunctionCall) {\n      let func = contentObj;\n      let funcParams = this.state.PopEvaluationStack(func.numberOfParameters);\n      let result = func.Call(funcParams);\n      this.state.PushEvaluationStack(result);\n      return true;\n    }\n\n    // No control content, must be ordinary content\n    return false;\n  }\n\n  public ChoosePathString(\n    path: string,\n    resetCallstack = true,\n    args: any[] = []\n  ) {\n    this.IfAsyncWeCant(\"call ChoosePathString right now\");\n    if (this.onChoosePathString !== null) this.onChoosePathString(path, args);\n\n    if (resetCallstack) {\n      this.ResetCallstack();\n    } else {\n      if (this.state.callStack.currentElement.type == PushPopType.Function) {\n        let funcDetail = \"\";\n        let container =\n          this.state.callStack.currentElement.currentPointer.container;\n        if (container != null) {\n          funcDetail = \"(\" + container.path.toString() + \") \";\n        }\n        throw new Error(\n          \"Story was running a function \" +\n            funcDetail +\n            \"when you called ChoosePathString(\" +\n            path +\n            \") - this is almost certainly not not what you want! Full stack trace: \\n\" +\n            this.state.callStack.callStackTrace\n        );\n      }\n    }\n\n    this.state.PassArgumentsToEvaluationStack(args);\n    this.ChoosePath(new Path(path));\n  }\n\n  public IfAsyncWeCant(activityStr: string) {\n    if (this._asyncContinueActive)\n      throw new Error(\n        \"Can't \" +\n          activityStr +\n          \". Story is in the middle of a ContinueAsync(). Make more ContinueAsync() calls or a single Continue() call beforehand.\"\n      );\n  }\n\n  public ChoosePath(p: Path, incrementingTurnIndex: boolean = true) {\n    this.state.SetChosenPath(p, incrementingTurnIndex);\n\n    // Take a note of newly visited containers for read counts etc\n    this.VisitChangedContainersDueToDivert();\n  }\n\n  public ChooseChoiceIndex(choiceIdx: number) {\n    choiceIdx = choiceIdx;\n    let choices = this.currentChoices;\n    this.Assert(\n      choiceIdx >= 0 && choiceIdx < choices.length,\n      \"choice out of range\"\n    );\n\n    let choiceToChoose = choices[choiceIdx];\n    if (this.onMakeChoice !== null) this.onMakeChoice(choiceToChoose);\n\n    if (choiceToChoose.threadAtGeneration === null) {\n      return throwNullException(\"choiceToChoose.threadAtGeneration\");\n    }\n    if (choiceToChoose.targetPath === null) {\n      return throwNullException(\"choiceToChoose.targetPath\");\n    }\n\n    this.state.callStack.currentThread = choiceToChoose.threadAtGeneration;\n\n    this.ChoosePath(choiceToChoose.targetPath);\n  }\n\n  public HasFunction(functionName: string) {\n    try {\n      return this.KnotContainerWithName(functionName) != null;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  public EvaluateFunction(\n    functionName: string,\n    args: any[] = [],\n    returnTextOutput: boolean = false\n  ): Story.EvaluateFunctionTextOutput | any {\n    // EvaluateFunction behaves slightly differently than the C# version.\n    // In C#, you can pass a (second) parameter `out textOutput` to get the\n    // text outputted by the function. This is not possible in js. Instead,\n    // we maintain the regular signature (functionName, args), plus an\n    // optional third parameter returnTextOutput. If set to true, we will\n    // return both the textOutput and the returned value, as an object.\n\n    if (this.onEvaluateFunction !== null)\n      this.onEvaluateFunction(functionName, args);\n\n    this.IfAsyncWeCant(\"evaluate a function\");\n\n    if (functionName == null) {\n      throw new Error(\"Function is null\");\n    } else if (functionName == \"\" || functionName.trim() == \"\") {\n      throw new Error(\"Function is empty or white space.\");\n    }\n\n    let funcContainer = this.KnotContainerWithName(functionName);\n    if (funcContainer == null) {\n      throw new Error(\"Function doesn't exist: '\" + functionName + \"'\");\n    }\n\n    let outputStreamBefore: InkObject[] = [];\n    outputStreamBefore.push(...this.state.outputStream);\n    this._state.ResetOutput();\n\n    this.state.StartFunctionEvaluationFromGame(funcContainer, args);\n\n    // Evaluate the function, and collect the string output\n    let stringOutput = new StringBuilder();\n    while (this.canContinue) {\n      stringOutput.Append(this.Continue());\n    }\n    let textOutput = stringOutput.toString();\n\n    this._state.ResetOutput(outputStreamBefore);\n\n    let result = this.state.CompleteFunctionEvaluationFromGame();\n    if (this.onCompleteEvaluateFunction != null)\n      this.onCompleteEvaluateFunction(functionName, args, textOutput, result);\n\n    return returnTextOutput ? { returned: result, output: textOutput } : result;\n  }\n\n  public EvaluateExpression(exprContainer: Container) {\n    let startCallStackHeight = this.state.callStack.elements.length;\n\n    this.state.callStack.Push(PushPopType.Tunnel);\n\n    this._temporaryEvaluationContainer = exprContainer;\n\n    this.state.GoToStart();\n\n    let evalStackHeight = this.state.evaluationStack.length;\n\n    this.Continue();\n\n    this._temporaryEvaluationContainer = null;\n\n    // Should have fallen off the end of the Container, which should\n    // have auto-popped, but just in case we didn't for some reason,\n    // manually pop to restore the state (including currentPath).\n    if (this.state.callStack.elements.length > startCallStackHeight) {\n      this.state.PopCallStack();\n    }\n\n    let endStackHeight = this.state.evaluationStack.length;\n    if (endStackHeight > evalStackHeight) {\n      return this.state.PopEvaluationStack();\n    } else {\n      return null;\n    }\n  }\n\n  public allowExternalFunctionFallbacks: boolean = false;\n\n  public CallExternalFunction(\n    funcName: string | null,\n    numberOfArguments: number\n  ) {\n    if (funcName === null) {\n      return throwNullException(\"funcName\");\n    }\n    let funcDef = this._externals.get(funcName);\n    let fallbackFunctionContainer = null;\n\n    let foundExternal = typeof funcDef !== \"undefined\";\n\n    if (\n      foundExternal &&\n      !funcDef!.lookAheadSafe &&\n      this._stateSnapshotAtLastNewline !== null\n    ) {\n      this._sawLookaheadUnsafeFunctionAfterNewline = true;\n      return;\n    }\n\n    if (!foundExternal) {\n      if (this.allowExternalFunctionFallbacks) {\n        fallbackFunctionContainer = this.KnotContainerWithName(funcName);\n        this.Assert(\n          fallbackFunctionContainer !== null,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound, and fallback ink function could not be found.\"\n        );\n\n        // Divert direct into fallback function and we're done\n        this.state.callStack.Push(\n          PushPopType.Function,\n          undefined,\n          this.state.outputStream.length\n        );\n        this.state.divertedPointer = Pointer.StartOf(fallbackFunctionContainer);\n        return;\n      } else {\n        this.Assert(\n          false,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound (and ink fallbacks disabled).\"\n        );\n      }\n    }\n\n    // Pop arguments\n    let args: any[] = [];\n    for (let i = 0; i < numberOfArguments; ++i) {\n      // var poppedObj = state.PopEvaluationStack () as Value;\n      let poppedObj = asOrThrows(this.state.PopEvaluationStack(), Value);\n      let valueObj = poppedObj.valueObject;\n      args.push(valueObj);\n    }\n\n    // Reverse arguments from the order they were popped,\n    // so they're the right way round again.\n    args.reverse();\n\n    // Run the function!\n    let funcResult = funcDef!.function(args);\n\n    // Convert return value (if any) to the a type that the ink engine can use\n    let returnObj = null;\n    if (funcResult != null) {\n      returnObj = Value.Create(funcResult);\n      this.Assert(\n        returnObj !== null,\n        \"Could not create ink value from returned object of type \" +\n          typeof funcResult\n      );\n    } else {\n      returnObj = new Void();\n    }\n\n    this.state.PushEvaluationStack(returnObj);\n  }\n\n  public BindExternalFunctionGeneral(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean = true\n  ) {\n    this.IfAsyncWeCant(\"bind an external function\");\n    this.Assert(\n      !this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has already been bound.\"\n    );\n    this._externals.set(funcName, {\n      function: func,\n      lookAheadSafe: lookaheadSafe,\n    });\n  }\n\n  public TryCoerce(value: any) {\n    // We're skipping type coercition in this implementation. First of, js\n    // is loosely typed, so it's not that important. Secondly, there is no\n    // clean way (AFAIK) for the user to describe what type of parameters\n    // they expect.\n    return value;\n  }\n\n  public BindExternalFunction(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean = false\n  ) {\n    this.Assert(func != null, \"Can't bind a null function\");\n\n    this.BindExternalFunctionGeneral(\n      funcName,\n      (args: any) => {\n        this.Assert(\n          args.length >= func.length,\n          \"External function expected \" + func.length + \" arguments\"\n        );\n\n        let coercedArgs = [];\n        for (let i = 0, l = args.length; i < l; i++) {\n          coercedArgs[i] = this.TryCoerce(args[i]);\n        }\n        return func.apply(null, coercedArgs);\n      },\n      lookaheadSafe\n    );\n  }\n\n  public UnbindExternalFunction(funcName: string) {\n    this.IfAsyncWeCant(\"unbind an external a function\");\n    this.Assert(\n      this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has not been bound.\"\n    );\n    this._externals.delete(funcName);\n  }\n\n  public ValidateExternalBindings(): void;\n  public ValidateExternalBindings(\n    c: Container | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings(\n    o: InkObject | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings() {\n    let c: Container | null = null;\n    let o: InkObject | null = null;\n    let missingExternals: Set<string> = arguments[1] || new Set();\n\n    if (arguments[0] instanceof Container) {\n      c = arguments[0];\n    }\n\n    if (arguments[0] instanceof InkObject) {\n      o = arguments[0];\n    }\n\n    if (c === null && o === null) {\n      this.ValidateExternalBindings(\n        this._mainContentContainer,\n        missingExternals\n      );\n      this._hasValidatedExternals = true;\n\n      // No problem! Validation complete\n      if (missingExternals.size == 0) {\n        this._hasValidatedExternals = true;\n      } else {\n        let message = \"Error: Missing function binding for external\";\n        message += missingExternals.size > 1 ? \"s\" : \"\";\n        message += \": '\";\n        message += Array.from(missingExternals).join(\"', '\");\n        message += \"' \";\n        message += this.allowExternalFunctionFallbacks\n          ? \", and no fallback ink function found.\"\n          : \" (ink fallbacks disabled)\";\n\n        this.Error(message);\n      }\n    } else if (c != null) {\n      for (let innerContent of c.content) {\n        let container = innerContent as Container;\n        if (container == null || !container.hasValidName)\n          this.ValidateExternalBindings(innerContent, missingExternals);\n      }\n      for (let [, value] of c.namedContent) {\n        this.ValidateExternalBindings(\n          asOrNull(value, InkObject),\n          missingExternals\n        );\n      }\n    } else if (o != null) {\n      let divert = asOrNull(o, Divert);\n      if (divert && divert.isExternal) {\n        let name = divert.targetPathString;\n        if (name === null) {\n          return throwNullException(\"name\");\n        }\n        if (!this._externals.has(name)) {\n          if (this.allowExternalFunctionFallbacks) {\n            let fallbackFound =\n              this.mainContentContainer.namedContent.has(name);\n            if (!fallbackFound) {\n              missingExternals.add(name);\n            }\n          } else {\n            missingExternals.add(name);\n          }\n        }\n      }\n    }\n  }\n\n  public ObserveVariable(\n    variableName: string,\n    observer: Story.VariableObserver\n  ) {\n    this.IfAsyncWeCant(\"observe a new variable\");\n\n    if (this._variableObservers === null) this._variableObservers = new Map();\n\n    if (!this.state.variablesState.GlobalVariableExistsWithName(variableName))\n      throw new Error(\n        \"Cannot observe variable '\" +\n          variableName +\n          \"' because it wasn't declared in the ink story.\"\n      );\n\n    if (this._variableObservers.has(variableName)) {\n      this._variableObservers.get(variableName)!.push(observer);\n    } else {\n      this._variableObservers.set(variableName, [observer]);\n    }\n  }\n\n  public ObserveVariables(\n    variableNames: string[],\n    observers: Story.VariableObserver[]\n  ) {\n    for (let i = 0, l = variableNames.length; i < l; i++) {\n      this.ObserveVariable(variableNames[i], observers[i]);\n    }\n  }\n\n  public RemoveVariableObserver(\n    observer?: Story.VariableObserver,\n    specificVariableName?: string\n  ) {\n    // A couple of things to know about this method:\n    //\n    // 1. Since `RemoveVariableObserver` is exposed to the JavaScript world,\n    //    optionality is marked as `undefined` rather than `null`.\n    //    To keep things simple, null-checks are performed using regular\n    //    equality operators, where undefined == null.\n    //\n    // 2. Since C# delegates are translated to arrays of functions,\n    //    -= becomes a call to splice and null-checks are replaced by\n    //    emptiness-checks.\n    //\n    this.IfAsyncWeCant(\"remove a variable observer\");\n\n    if (this._variableObservers === null) return;\n\n    if (specificVariableName != null) {\n      if (this._variableObservers.has(specificVariableName)) {\n        if (observer != null) {\n          let variableObservers =\n            this._variableObservers.get(specificVariableName);\n          if (variableObservers != null) {\n            variableObservers.splice(variableObservers.indexOf(observer), 1);\n            if (variableObservers.length === 0) {\n              this._variableObservers.delete(specificVariableName);\n            }\n          }\n        } else {\n          this._variableObservers.delete(specificVariableName);\n        }\n      }\n    } else if (observer != null) {\n      let keys = this._variableObservers.keys();\n      for (let varName of keys) {\n        let variableObservers = this._variableObservers.get(varName);\n        if (variableObservers != null) {\n          variableObservers.splice(variableObservers.indexOf(observer), 1);\n          if (variableObservers.length === 0) {\n            this._variableObservers.delete(varName);\n          }\n        }\n      }\n    }\n  }\n\n  public VariableStateDidChangeEvent(\n    variableName: string,\n    newValueObj: InkObject\n  ) {\n    if (this._variableObservers === null) return;\n\n    let observers = this._variableObservers.get(variableName);\n    if (typeof observers !== \"undefined\") {\n      if (!(newValueObj instanceof Value)) {\n        throw new Error(\n          \"Tried to get the value of a variable that isn't a standard type\"\n        );\n      }\n      // var val = newValueObj as Value;\n      let val = asOrThrows(newValueObj, Value);\n\n      for (let observer of observers) {\n        observer(variableName, val.valueObject);\n      }\n    }\n  }\n\n  get globalTags() {\n    return this.TagsAtStartOfFlowContainerWithPathString(\"\");\n  }\n\n  public TagsForContentAtPath(path: string) {\n    return this.TagsAtStartOfFlowContainerWithPathString(path);\n  }\n\n  public TagsAtStartOfFlowContainerWithPathString(pathString: string) {\n    let path = new Path(pathString);\n\n    let flowContainer = this.ContentAtPath(path).container;\n    if (flowContainer === null) {\n      return throwNullException(\"flowContainer\");\n    }\n    while (true) {\n      let firstContent: InkObject = flowContainer.content[0];\n      if (firstContent instanceof Container) flowContainer = firstContent;\n      else break;\n    }\n\n    let inTag = false;\n    let tags: string[] | null = null;\n\n    for (let c of flowContainer.content) {\n      // var tag = c as Runtime.Tag;\n      let command = asOrNull(c, ControlCommand);\n\n      if (command != null) {\n        if (command.commandType == ControlCommand.CommandType.BeginTag) {\n          inTag = true;\n        } else if (command.commandType == ControlCommand.CommandType.EndTag) {\n          inTag = false;\n        }\n      } else if (inTag) {\n        let str = asOrNull(c, StringValue);\n        if (str !== null) {\n          if (tags === null) tags = [];\n          if (str.value !== null) tags.push(str.value);\n        } else {\n          this.Error(\n            \"Tag contained non-text content. Only plain text is allowed when using globalTags or TagsAtContentPath. If you want to evaluate dynamic content, you need to use story.Continue().\"\n          );\n        }\n      } else {\n        break;\n      }\n    }\n\n    return tags;\n  }\n\n  public BuildStringOfHierarchy() {\n    let sb = new StringBuilder();\n\n    this.mainContentContainer.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n\n    return sb.toString();\n  }\n\n  public BuildStringOfContainer(container: Container) {\n    let sb = new StringBuilder();\n    container.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n    return sb.toString();\n  }\n\n  public NextContent() {\n    this.state.previousPointer = this.state.currentPointer.copy();\n\n    if (!this.state.divertedPointer.isNull) {\n      this.state.currentPointer = this.state.divertedPointer.copy();\n      this.state.divertedPointer = Pointer.Null;\n\n      this.VisitChangedContainersDueToDivert();\n\n      if (!this.state.currentPointer.isNull) {\n        return;\n      }\n    }\n\n    let successfulPointerIncrement = this.IncrementContentPointer();\n\n    if (!successfulPointerIncrement) {\n      let didPop = false;\n\n      if (this.state.callStack.CanPop(PushPopType.Function)) {\n        this.state.PopCallStack(PushPopType.Function);\n\n        if (this.state.inExpressionEvaluation) {\n          this.state.PushEvaluationStack(new Void());\n        }\n\n        didPop = true;\n      } else if (this.state.callStack.canPopThread) {\n        this.state.callStack.PopThread();\n\n        didPop = true;\n      } else {\n        this.state.TryExitFunctionEvaluationFromGame();\n      }\n\n      if (didPop && !this.state.currentPointer.isNull) {\n        this.NextContent();\n      }\n    }\n  }\n\n  public IncrementContentPointer() {\n    let successfulIncrement = true;\n\n    let pointer = this.state.callStack.currentElement.currentPointer.copy();\n    pointer.index++;\n\n    if (pointer.container === null) {\n      return throwNullException(\"pointer.container\");\n    }\n    while (pointer.index >= pointer.container.content.length) {\n      successfulIncrement = false;\n\n      // Container nextAncestor = pointer.container.parent as Container;\n      let nextAncestor = asOrNull(pointer.container.parent, Container);\n      if (nextAncestor instanceof Container === false) {\n        break;\n      }\n\n      let indexInAncestor = nextAncestor!.content.indexOf(pointer.container);\n      if (indexInAncestor == -1) {\n        break;\n      }\n\n      pointer = new Pointer(nextAncestor, indexInAncestor);\n\n      pointer.index++;\n\n      successfulIncrement = true;\n      if (pointer.container === null) {\n        return throwNullException(\"pointer.container\");\n      }\n    }\n\n    if (!successfulIncrement) pointer = Pointer.Null;\n\n    this.state.callStack.currentElement.currentPointer = pointer.copy();\n\n    return successfulIncrement;\n  }\n\n  public TryFollowDefaultInvisibleChoice() {\n    let allChoices = this._state.currentChoices;\n\n    let invisibleChoices = allChoices.filter((c) => c.isInvisibleDefault);\n\n    if (\n      invisibleChoices.length == 0 ||\n      allChoices.length > invisibleChoices.length\n    )\n      return false;\n\n    let choice = invisibleChoices[0];\n\n    if (choice.targetPath === null) {\n      return throwNullException(\"choice.targetPath\");\n    }\n\n    if (choice.threadAtGeneration === null) {\n      return throwNullException(\"choice.threadAtGeneration\");\n    }\n\n    this.state.callStack.currentThread = choice.threadAtGeneration;\n\n    if (this._stateSnapshotAtLastNewline !== null) {\n      this.state.callStack.currentThread = this.state.callStack.ForkThread();\n    }\n\n    this.ChoosePath(choice.targetPath, false);\n\n    return true;\n  }\n\n  public NextSequenceShuffleIndex() {\n    // var numElementsIntVal = state.PopEvaluationStack () as IntValue;\n    let numElementsIntVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n    if (!(numElementsIntVal instanceof IntValue)) {\n      this.Error(\"expected number of elements in sequence for shuffle index\");\n      return 0;\n    }\n\n    let seqContainer = this.state.currentPointer.container;\n    if (seqContainer === null) {\n      return throwNullException(\"seqContainer\");\n    }\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (numElementsIntVal.value === null) {\n      return throwNullException(\"numElementsIntVal.value\");\n    }\n    let numElements = numElementsIntVal.value;\n\n    // var seqCountVal = state.PopEvaluationStack () as IntValue;\n    let seqCountVal = asOrThrows(this.state.PopEvaluationStack(), IntValue);\n    let seqCount = seqCountVal.value;\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (seqCount === null) {\n      return throwNullException(\"seqCount\");\n    }\n\n    let loopIndex = seqCount / numElements;\n    let iterationIndex = seqCount % numElements;\n\n    let seqPathStr = seqContainer.path.toString();\n    let sequenceHash = 0;\n    for (let i = 0, l = seqPathStr.length; i < l; i++) {\n      sequenceHash += seqPathStr.charCodeAt(i) || 0;\n    }\n    let randomSeed = sequenceHash + loopIndex + this.state.storySeed;\n    let random = new PRNG(Math.floor(randomSeed));\n\n    let unpickedIndices = [];\n    for (let i = 0; i < numElements; ++i) {\n      unpickedIndices.push(i);\n    }\n\n    for (let i = 0; i <= iterationIndex; ++i) {\n      let chosen = random.next() % unpickedIndices.length;\n      let chosenIndex = unpickedIndices[chosen];\n      unpickedIndices.splice(chosen, 1);\n\n      if (i == iterationIndex) {\n        return chosenIndex;\n      }\n    }\n\n    throw new Error(\"Should never reach here\");\n  }\n\n  public Error(message: string, useEndLineNumber = false): never {\n    let e = new StoryException(message);\n    e.useEndLineNumber = useEndLineNumber;\n    throw e;\n  }\n\n  public Warning(message: string) {\n    this.AddError(message, true);\n  }\n\n  public AddError(\n    message: string,\n    isWarning = false,\n    useEndLineNumber = false\n  ) {\n    let dm = this.currentDebugMetadata;\n\n    let errorTypeStr = isWarning ? \"WARNING\" : \"ERROR\";\n\n    if (dm != null) {\n      let lineNum = useEndLineNumber ? dm.endLineNumber : dm.startLineNumber;\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": '\" +\n        dm.fileName +\n        \"' line \" +\n        lineNum +\n        \": \" +\n        message;\n    } else if (!this.state.currentPointer.isNull) {\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": (\" +\n        this.state.currentPointer +\n        \"): \" +\n        message;\n    } else {\n      message = \"RUNTIME \" + errorTypeStr + \": \" + message;\n    }\n\n    this.state.AddError(message, isWarning);\n\n    // In a broken state don't need to know about any other errors.\n    if (!isWarning) this.state.ForceEnd();\n  }\n\n  public Assert(condition: boolean, message: string | null = null) {\n    if (condition == false) {\n      if (message == null) {\n        message = \"Story assert\";\n      }\n\n      throw new Error(message + \" \" + this.currentDebugMetadata);\n    }\n  }\n\n  get currentDebugMetadata(): DebugMetadata | null {\n    let dm: DebugMetadata | null;\n\n    let pointer = this.state.currentPointer;\n    if (!pointer.isNull && pointer.Resolve() !== null) {\n      dm = pointer.Resolve()!.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    for (let i = this.state.callStack.elements.length - 1; i >= 0; --i) {\n      pointer = this.state.callStack.elements[i].currentPointer;\n      if (!pointer.isNull && pointer.Resolve() !== null) {\n        dm = pointer.Resolve()!.debugMetadata;\n        if (dm !== null) {\n          return dm;\n        }\n      }\n    }\n\n    for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n      let outputObj = this.state.outputStream[i];\n      dm = outputObj.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    return null;\n  }\n\n  get mainContentContainer() {\n    if (this._temporaryEvaluationContainer) {\n      return this._temporaryEvaluationContainer;\n    } else {\n      return this._mainContentContainer;\n    }\n  }\n\n  /**\n   * `_mainContentContainer` is almost guaranteed to be set in the\n   * constructor, unless the json is malformed.\n   */\n  private _mainContentContainer!: Container;\n  private _listDefinitions: ListDefinitionsOrigin | null = null;\n\n  private _externals: Map<string, Story.ExternalFunctionDef>;\n  private _variableObservers: Map<string, Story.VariableObserver[]> | null =\n    null;\n  private _hasValidatedExternals: boolean = false;\n\n  private _temporaryEvaluationContainer: Container | null = null;\n\n  /**\n   * `state` is almost guaranteed to be set in the constructor, unless\n   * using the compiler-specific constructor which will likely not be used in\n   * the real world.\n   */\n  private _state!: StoryState;\n\n  private _asyncContinueActive: boolean = false;\n  private _stateSnapshotAtLastNewline: StoryState | null = null;\n  private _sawLookaheadUnsafeFunctionAfterNewline: boolean = false;\n\n  private _recursiveContinueCount: number = 0;\n\n  private _asyncSaving: boolean = false;\n\n  private _profiler: any | null = null; // TODO: Profiler\n}\n\nexport namespace Story {\n  export enum OutputStateChange {\n    NoChange = 0,\n    ExtendedBeyondNewline = 1,\n    NewlineRemoved = 2,\n  }\n\n  export interface EvaluateFunctionTextOutput {\n    returned: any;\n    output: string;\n  }\n\n  export interface ExternalFunctionDef {\n    function: ExternalFunction;\n    lookAheadSafe: boolean;\n  }\n\n  export type VariableObserver = (variableName: string, newValue: any) => void;\n  export type ExternalFunction = (...args: any) => any;\n}\n","import { AuthorWarning } from \"./AuthorWarning\";\nimport { ConstantDeclaration } from \"./Declaration/ConstantDeclaration\";\nimport { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { ErrorHandler } from \"../../../engine/Error\";\nimport { ErrorType } from \"../ErrorType\";\nimport { Expression } from \"./Expression/Expression\";\nimport { ExternalDeclaration } from \"./Declaration/ExternalDeclaration\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { FlowLevel } from \"./Flow/FlowLevel\";\nimport { IncludedFile } from \"./IncludedFile\";\nimport { ListDefinition } from \"./List/ListDefinition\";\nimport { ListElementDefinition } from \"./List/ListElementDefinition\";\nimport { ParsedObject } from \"./Object\";\nimport { Story as RuntimeStory } from \"../../../engine/Story\";\nimport { SymbolType } from \"./SymbolType\";\nimport { Text } from \"./Text\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../engine/VariableAssignment\";\nimport { Identifier } from \"./Identifier\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\nimport { ClosestFlowBase } from \"./Flow/ClosestFlowBase\";\nimport { FunctionCall } from \"./FunctionCall\";\nimport { Path } from \"./Path\";\nimport { VariableAssignment } from \"./Variable/VariableAssignment\";\n\nexport class Story extends FlowBase {\n  public static readonly IsReservedKeyword = (name?: string): boolean => {\n    switch (name) {\n      case \"true\":\n      case \"false\":\n      case \"not\":\n      case \"return\":\n      case \"else\":\n      case \"VAR\":\n      case \"CONST\":\n      case \"temp\":\n      case \"LIST\":\n      case \"function\":\n        return true;\n    }\n\n    return false;\n  };\n\n  private _errorHandler: ErrorHandler | null = null;\n  private _hadError: boolean = false;\n  private _hadWarning: boolean = false;\n  private _dontFlattenContainers: Set<RuntimeContainer> = new Set();\n  private _listDefs: Map<string, ListDefinition> = new Map();\n\n  get flowLevel(): FlowLevel {\n    return FlowLevel.Story;\n  }\n\n  get hadError(): boolean {\n    return this._hadError;\n  }\n\n  get hadWarning(): boolean {\n    return this._hadWarning;\n  }\n\n  public constants: Map<string, Expression> = new Map();\n  public externals: Map<string, ExternalDeclaration> = new Map();\n\n  // Build setting for exporting:\n  // When true, the visit count for *all* knots, stitches, choices,\n  // and gathers is counted. When false, only those that are direclty\n  // referenced by the ink are recorded. Use this flag to allow game-side\n  // querying of  arbitrary knots/stitches etc.\n  // Storing all counts is more robust and future proof (updates to the story file\n  // that reference previously uncounted visits are possible, but generates a much\n  // larger safe file, with a lot of potentially redundant counts.\n  public countAllVisits: boolean = false;\n\n  constructor(toplevelObjects: ParsedObject[], isInclude: boolean = false) {\n    // Don't do anything much on construction, leave it lightweight until\n    // the ExportRuntime method is called.\n    super(null, toplevelObjects, null, false, isInclude);\n  }\n\n  get typeName(): string {\n    return \"Story\";\n  }\n\n  // Before this function is called, we have IncludedFile objects interspersed\n  // in our content wherever an include statement was.\n  // So that the include statement can be added in a sensible place (e.g. the\n  // top of the file) without side-effects of jumping into a knot that was\n  // defined in that include, we separate knots and stitches from anything\n  // else defined at the top scope of the included file.\n  //\n  // Algorithm: For each IncludedFile we find, split its contents into\n  // knots/stiches and any other content. Insert the normal content wherever\n  // the include statement was, and append the knots/stitches to the very\n  // end of the main story.\n  public PreProcessTopLevelObjects(topLevelContent: ParsedObject[]): void {\n    super.PreProcessTopLevelObjects(topLevelContent);\n\n    const flowsFromOtherFiles = [];\n\n    // Inject included files\n    for (let obj of topLevelContent) {\n      if (obj instanceof IncludedFile) {\n        const file: IncludedFile = obj;\n\n        // Remove the IncludedFile itself\n        const posOfObj = topLevelContent.indexOf(obj);\n        topLevelContent.splice(posOfObj, 1);\n\n        // When an included story fails to load, the include\n        // line itself is still valid, so we have to handle it here\n        if (file.includedStory) {\n          const nonFlowContent: ParsedObject[] = [];\n          const subStory = file.includedStory;\n          // Allow empty file\n          if (subStory.content != null) {\n            for (const subStoryObj of subStory.content) {\n              if (subStoryObj instanceof FlowBase) {\n                flowsFromOtherFiles.push(subStoryObj);\n              } else {\n                nonFlowContent.push(subStoryObj);\n              }\n            }\n\n            // Add newline on the end of the include\n            nonFlowContent.push(new Text(\"\\n\"));\n\n            // Add contents of the file in its place\n            topLevelContent.splice(posOfObj, 0, ...nonFlowContent);\n\n            // Skip past the content of this sub story\n            // (since it will already have recursively included\n            //  any lines from other files)\n          }\n        }\n\n        // Include object has been removed, with possible content inserted,\n        // and position of 'i' will have been determined already.\n        continue;\n      }\n    }\n\n    // Add the flows we collected from the included files to the\n    // end of our list of our content\n    topLevelContent.splice(0, 0, ...flowsFromOtherFiles);\n  }\n\n  public readonly ExportRuntime = (\n    errorHandler: ErrorHandler | null = null\n  ): RuntimeStory | null => {\n    this._errorHandler = errorHandler;\n\n    // Find all constants before main export begins, so that VariableReferences know\n    // whether to generate a runtime variable reference or the literal value\n    this.constants = new Map();\n    for (const constDecl of this.FindAll(ConstantDeclaration)()) {\n      // Check for duplicate definitions\n      const existingDefinition: Expression = this.constants.get(\n        constDecl.constantName!\n      ) as any;\n\n      if (existingDefinition) {\n        if (!existingDefinition.Equals(constDecl.expression)) {\n          const errorMsg = `CONST '${constDecl.constantName}' has been redefined with a different value. Multiple definitions of the same CONST are valid so long as they contain the same value. Initial definition was on ${existingDefinition.debugMetadata}.`;\n          this.Error(errorMsg, constDecl, false);\n        }\n      }\n\n      this.constants.set(constDecl.constantName!, constDecl.expression);\n    }\n\n    // List definitions are treated like constants too - they should be usable\n    // from other variable declarations.\n    this._listDefs = new Map();\n    for (const listDef of this.FindAll<ListDefinition>(ListDefinition)()) {\n      if (listDef.identifier?.name) {\n        this._listDefs.set(listDef.identifier?.name, listDef);\n      }\n    }\n\n    this.externals = new Map();\n\n    // Resolution of weave point names has to come first, before any runtime code generation\n    // since names have to be ready before diverts start getting created.\n    // (It used to be done in the constructor for a weave, but didn't allow us to generate\n    // errors when name resolution failed.)\n    this.ResolveWeavePointNaming();\n\n    // Get default implementation of runtimeObject, which calls ContainerBase's generation method\n    const rootContainer = this.runtimeObject as RuntimeContainer;\n\n    // Export initialisation of global variables\n    // TODO: We *could* add this as a declarative block to the story itself...\n    const variableInitialisation = new RuntimeContainer();\n    variableInitialisation.AddContent(RuntimeControlCommand.EvalStart());\n\n    // Global variables are those that are local to the story and marked as global\n    const runtimeLists = [];\n    for (const [key, value] of this.variableDeclarations) {\n      if (value.isGlobalDeclaration) {\n        if (value.listDefinition) {\n          this._listDefs.set(key, value.listDefinition);\n          variableInitialisation.AddContent(\n            value.listDefinition.runtimeObject!\n          );\n\n          runtimeLists.push(value.listDefinition.runtimeListDefinition);\n        } else {\n          if (!value.expression) {\n            throw new Error();\n          }\n          value.expression.GenerateIntoContainer(variableInitialisation);\n        }\n\n        const runtimeVarAss = new RuntimeVariableAssignment(key, true);\n        runtimeVarAss.isGlobal = true;\n        variableInitialisation.AddContent(runtimeVarAss);\n      }\n    }\n\n    variableInitialisation.AddContent(RuntimeControlCommand.EvalEnd());\n    variableInitialisation.AddContent(RuntimeControlCommand.End());\n\n    if (this.variableDeclarations.size > 0) {\n      variableInitialisation.name = \"global decl\";\n      rootContainer.AddToNamedContentOnly(variableInitialisation);\n    }\n\n    // Signal that it's safe to exit without error, even if there are no choices generated\n    // (this only happens at the end of top level content that isn't in any particular knot)\n    rootContainer.AddContent(RuntimeControlCommand.Done());\n\n    // Replace runtimeObject with Story object instead of the Runtime.Container generated by Parsed.ContainerBase\n    const runtimeStory = new RuntimeStory(rootContainer, runtimeLists);\n\n    this.runtimeObject = runtimeStory;\n\n    if (this.hadError) {\n      return null;\n    }\n\n    // Optimisation step - inline containers that can be\n    this.FlattenContainersIn(rootContainer);\n\n    // Now that the story has been fulled parsed into a hierarchy,\n    // and the derived runtime hierarchy has been built, we can\n    // resolve referenced symbols such as variables and paths.\n    // e.g. for paths \" -> knotName --> stitchName\" into an INKPath (knotName.stitchName)\n    // We don't make any assumptions that the INKPath follows the same\n    // conventions as the script format, so we resolve to actual objects before\n    // translating into an INKPath. (This also allows us to choose whether\n    // we want the paths to be absolute)\n    this.ResolveReferences(this);\n\n    if (this.hadError) {\n      return null;\n    }\n\n    runtimeStory.ResetState();\n\n    return runtimeStory;\n  };\n\n  public readonly ResolveList = (listName: string): ListDefinition | null => {\n    let list: ListDefinition | null | undefined = this._listDefs.get(listName);\n    if (!list) {\n      return null;\n    }\n\n    return list;\n  };\n\n  public readonly ResolveListItem = (\n    listName: string | null,\n    itemName: string,\n    source: ParsedObject | null = null\n  ): ListElementDefinition | null => {\n    let listDef: ListDefinition | null | undefined = null;\n\n    // Search a specific list if we know its name (i.e. the form listName.itemName)\n    if (listName) {\n      if (!(listDef = this._listDefs.get(listName))) {\n        return null;\n      }\n\n      return listDef.ItemNamed(itemName);\n    } else {\n      // Otherwise, try to search all lists\n\n      let foundItem: ListElementDefinition | null = null;\n      let originalFoundList: ListDefinition | null = null;\n\n      for (const [, value] of this._listDefs.entries()) {\n        const itemInThisList = value.ItemNamed(itemName);\n        if (itemInThisList) {\n          if (foundItem) {\n            this.Error(\n              `Ambiguous item name '${itemName}' found in multiple sets, including ${\n                originalFoundList!.identifier\n              } and ${value!.identifier}`,\n              source,\n              false\n            );\n          } else {\n            foundItem = itemInThisList;\n            originalFoundList = value!;\n          }\n        }\n      }\n\n      return foundItem;\n    }\n  };\n\n  public readonly FlattenContainersIn = (container: RuntimeContainer): void => {\n    // Need to create a collection to hold the inner containers\n    // because otherwise we'd end up modifying during iteration\n    const innerContainers = new Set<RuntimeContainer>();\n    if (container.content) {\n      for (const c of container.content) {\n        const innerContainer = asOrNull(c, RuntimeContainer);\n        if (innerContainer) {\n          innerContainers.add(innerContainer);\n        }\n      }\n    }\n\n    // Can't flatten the named inner containers, but we can at least\n    // iterate through their children\n    if (container.namedContent) {\n      for (const [, value] of container.namedContent) {\n        const namedInnerContainer = asOrNull(value, RuntimeContainer);\n        if (namedInnerContainer) {\n          innerContainers.add(namedInnerContainer);\n        }\n      }\n    }\n\n    for (const innerContainer of innerContainers) {\n      this.TryFlattenContainer(innerContainer);\n      this.FlattenContainersIn(innerContainer);\n    }\n  };\n\n  public readonly TryFlattenContainer = (container: RuntimeContainer): void => {\n    if (\n      (container.namedContent && container.namedContent.size > 0) ||\n      container.hasValidName ||\n      this._dontFlattenContainers.has(container)\n    ) {\n      return;\n    }\n\n    // Inline all the content in container into the parent\n    const parentContainer = asOrNull(container.parent, RuntimeContainer);\n    if (parentContainer) {\n      let contentIdx = parentContainer.content.indexOf(container);\n      parentContainer.content.splice(contentIdx, 1);\n\n      const dm = container.ownDebugMetadata;\n\n      if (container.content) {\n        for (const innerContent of container.content) {\n          innerContent.parent = null;\n          if (dm !== null && innerContent.ownDebugMetadata === null) {\n            innerContent.debugMetadata = dm;\n          }\n\n          parentContainer.InsertContent(innerContent, contentIdx);\n          contentIdx += 1;\n        }\n      }\n    }\n  };\n\n  public readonly Error = (\n    message: string,\n    source: ParsedObject | null | undefined,\n    isWarning: boolean | null | undefined\n  ) => {\n    let errorType: ErrorType = isWarning ? ErrorType.Warning : ErrorType.Error;\n\n    let sb = \"\";\n    if (source instanceof AuthorWarning) {\n      sb += \"TODO: \";\n      errorType = ErrorType.Author;\n    } else if (isWarning) {\n      sb += \"WARNING: \";\n    } else {\n      sb += \"ERROR: \";\n    }\n\n    if (\n      source &&\n      source.debugMetadata !== null &&\n      source.debugMetadata.startLineNumber >= 1\n    ) {\n      if (source.debugMetadata.fileName != null) {\n        sb += `'${source.debugMetadata.fileName}' `;\n      }\n\n      sb += `line ${source.debugMetadata.startLineNumber}: `;\n    }\n\n    sb += message;\n\n    message = sb;\n\n    if (this._errorHandler !== null) {\n      this._errorHandler(message, errorType);\n    } else {\n      throw new Error(message);\n    }\n\n    this._hadError = errorType === ErrorType.Error;\n    this._hadWarning = errorType === ErrorType.Warning;\n  };\n\n  public readonly ResetError = (): void => {\n    this._hadError = false;\n    this._hadWarning = false;\n  };\n\n  public readonly IsExternal = (namedFuncTarget: string): boolean =>\n    this.externals.has(namedFuncTarget);\n\n  public readonly AddExternal = (decl: ExternalDeclaration): void => {\n    if (this.externals.has(decl.name!)) {\n      this.Error(\n        `Duplicate EXTERNAL definition of '${decl.name}'`,\n        decl,\n        false\n      );\n    } else if (decl.name) {\n      this.externals.set(decl.name, decl);\n    }\n  };\n\n  public readonly DontFlattenContainer = (\n    container: RuntimeContainer\n  ): void => {\n    this._dontFlattenContainers.add(container);\n  };\n\n  public readonly NameConflictError = (\n    obj: ParsedObject,\n    name: string,\n    existingObj: ParsedObject,\n    typeNameToPrint: string\n  ): void => {\n    obj.Error(\n      `${typeNameToPrint} '${name}': name has already been used for a ${existingObj.typeName.toLowerCase()} on ${\n        existingObj.debugMetadata\n      }`\n    );\n  };\n\n  // Check given symbol type against everything that's of a higher priority in the ordered SymbolType enum (above).\n  // When the given symbol type level is reached, we early-out / return.\n  public readonly CheckForNamingCollisions = (\n    obj: ParsedObject,\n    identifier: Identifier,\n    symbolType: SymbolType,\n    typeNameOverride: string = \"\"\n  ): void => {\n    const typeNameToPrint: string = typeNameOverride || obj.typeName;\n    if (Story.IsReservedKeyword(identifier?.name)) {\n      obj.Error(\n        `'${identifier}' cannot be used for the name of a ${typeNameToPrint.toLowerCase()} because it's a reserved keyword`\n      );\n      return;\n    } else if (FunctionCall.IsBuiltIn(identifier?.name || \"\")) {\n      obj.Error(\n        `'${identifier}' cannot be used for the name of a ${typeNameToPrint.toLowerCase()} because it's a built in function`\n      );\n\n      return;\n    }\n\n    // Top level knots\n    const maybeKnotOrFunction = this.ContentWithNameAtLevel(\n      identifier?.name || \"\",\n      FlowLevel.Knot\n    );\n\n    const knotOrFunction = asOrNull(maybeKnotOrFunction, FlowBase);\n\n    if (\n      knotOrFunction &&\n      (knotOrFunction !== obj || symbolType === SymbolType.Arg)\n    ) {\n      this.NameConflictError(\n        obj,\n        identifier?.name || \"\",\n        knotOrFunction,\n        typeNameToPrint\n      );\n      return;\n    }\n\n    if (symbolType < SymbolType.List) {\n      return;\n    }\n\n    // Lists\n    for (const [key, value] of this._listDefs) {\n      if (\n        identifier?.name === key &&\n        obj !== value &&\n        value.variableAssignment !== obj\n      ) {\n        this.NameConflictError(obj, identifier?.name, value, typeNameToPrint);\n      }\n\n      // We don't check for conflicts between individual elements in\n      // different lists because they are namespaced.\n      if (!(obj instanceof ListElementDefinition)) {\n        for (const item of value.itemDefinitions) {\n          if (identifier?.name === item.name) {\n            this.NameConflictError(\n              obj,\n              identifier?.name || \"\",\n              item,\n              typeNameToPrint\n            );\n          }\n        }\n      }\n    }\n\n    // Don't check for VAR->VAR conflicts because that's handled separately\n    // (necessary since checking looks up in a dictionary)\n    if (symbolType <= SymbolType.Var) {\n      return;\n    }\n\n    // Global variable collision\n    const varDecl: VariableAssignment | null =\n      (identifier?.name && this.variableDeclarations.get(identifier?.name)) ||\n      null;\n    if (\n      varDecl &&\n      varDecl !== obj &&\n      varDecl.isGlobalDeclaration &&\n      varDecl.listDefinition == null\n    ) {\n      this.NameConflictError(\n        obj,\n        identifier?.name || \"\",\n        varDecl,\n        typeNameToPrint\n      );\n    }\n\n    if (symbolType < SymbolType.SubFlowAndWeave) {\n      return;\n    }\n\n    // Stitches, Choices and Gathers\n    const path = new Path(identifier);\n    const targetContent = path.ResolveFromContext(obj);\n    if (targetContent && targetContent !== obj) {\n      this.NameConflictError(\n        obj,\n        identifier?.name || \"\",\n        targetContent,\n        typeNameToPrint\n      );\n      return;\n    }\n\n    if (symbolType < SymbolType.Arg) {\n      return;\n    }\n\n    // Arguments to the current flow\n    if (symbolType !== SymbolType.Arg) {\n      let flow: FlowBase | null = asOrNull(obj, FlowBase);\n      if (!flow) {\n        flow = ClosestFlowBase(obj);\n      }\n\n      if (flow && flow.hasParameters && flow.args) {\n        for (const arg of flow.args) {\n          if (arg.identifier?.name === identifier?.name) {\n            obj.Error(\n              `${typeNameToPrint} '${identifier}': name has already been used for a argument to ${flow.identifier} on ${flow.debugMetadata}`\n            );\n\n            return;\n          }\n        }\n      }\n    }\n  };\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Expression } from \"./Expression\";\nimport { ParsedObject } from \"../Object\";\nimport { Text } from \"../Text\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class StringExpression extends Expression {\n  get isSingleString() {\n    if (this.content.length !== 1) {\n      return false;\n    }\n\n    const c = this.content[0];\n    if (!(c instanceof Text)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  constructor(content: ParsedObject[]) {\n    super();\n\n    this.AddContent(content);\n  }\n\n  get typeName(): string {\n    return \"String\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    container.AddContent(RuntimeControlCommand.BeginString());\n\n    for (const c of this.content) {\n      container.AddContent(c.runtimeObject);\n    }\n\n    container.AddContent(RuntimeControlCommand.EndString());\n  };\n\n  public readonly toString = (): string => {\n    let sb = \"\";\n    for (const c of this.content) {\n      sb += c;\n    }\n\n    return sb;\n  };\n\n  // Equals override necessary in order to check for CONST multiple definition equality\n  public Equals(obj: ParsedObject): boolean {\n    const otherStr = asOrNull(obj, StringExpression);\n    if (otherStr === null) {\n      return false;\n    }\n\n    // Can only compare direct equality on single strings rather than\n    // complex string expressions that contain dynamic logic\n    if (!this.isSingleString || !otherStr.isSingleString) {\n      return false;\n    }\n\n    const thisTxt = this.toString();\n    const otherTxt = otherStr.toString();\n    return thisTxt === otherTxt;\n  }\n}\n","import { ParsedObject } from \"./Object\";\nimport { ControlCommand } from \"../../../engine/ControlCommand\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\n\nexport class Tag extends ParsedObject {\n  public isStart: boolean;\n  public inChoice: boolean;\n\n  constructor(isStart: boolean, inChoice: boolean = false) {\n    super();\n    this.isStart = isStart;\n    this.inChoice = inChoice;\n  }\n  get typeName(): string {\n    return \"Tag\";\n  }\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    if (this.isStart) {\n      return ControlCommand.BeginTag();\n    } else {\n      return ControlCommand.EndTag();\n    }\n  };\n\n  public readonly toString = () => {\n    if (this.isStart) {\n      return \"#StartTag\";\n    } else {\n      return \"#EndTag\";\n    }\n  };\n}\n\nimport { Tag as RuntimeTag } from \"../../../engine/Tag\";\nimport { Wrap } from \"./Wrap\";\nexport class LegacyTag extends Wrap<RuntimeTag> {\n  constructor(tag: RuntimeTag) {\n    super(tag);\n  }\n  get typeName(): string {\n    return \"Tag\";\n  }\n}\n","import { IFileHandler } from \"../IFileHandler\";\n\n// This class replaces upstream's DefaultFileHandler. It doesn't perform any\n// resolution and warns the user about providing a proper file handler when\n// INCLUDE statements are parsed. Since the JavaScript parser can be executed in\n// different environments, we let the user decide which FileHandler is best for\n// their use-case. See PosixFileHandler and JsonFileHandler.\nexport class DefaultFileHandler implements IFileHandler {\n  constructor(public readonly rootPath?: string) {}\n\n  readonly ResolveInkFilename = (): string => {\n    throw Error(\n      \"Can't resolve filename because no FileHandler was provided when instantiating the parser / compiler.\"\n    );\n  };\n\n  readonly LoadInkFileContents = (): string => {\n    throw Error(\n      \"Can't load ink content because no FileHandler was provided when instantiating the parser / compiler.\"\n    );\n  };\n}\n","import { Argument } from \"./ParsedHierarchy/Argument\";\nimport { AuthorWarning } from \"./ParsedHierarchy/AuthorWarning\";\nimport { BinaryExpression } from \"./ParsedHierarchy/Expression/BinaryExpression\";\nimport { CharacterRange } from \"./CharacterRange\";\nimport { CharacterSet } from \"./CharacterSet\";\nimport { Choice } from \"./ParsedHierarchy/Choice\";\nimport { CommentEliminator } from \"./CommentEliminator\";\nimport { Conditional } from \"./ParsedHierarchy/Conditional/Conditional\";\nimport { ConditionalSingleBranch } from \"./ParsedHierarchy/Conditional/ConditionalSingleBranch\";\nimport { ContentList } from \"./ParsedHierarchy/ContentList\";\nimport { ConstantDeclaration } from \"./ParsedHierarchy/Declaration/ConstantDeclaration\";\nimport { CustomFlags } from \"./CustomFlags\";\nimport { DebugMetadata } from \"../../engine/DebugMetadata\";\nimport { Divert } from \"./ParsedHierarchy/Divert/Divert\";\nimport { DivertTarget } from \"./ParsedHierarchy/Divert/DivertTarget\";\nimport { Expression } from \"./ParsedHierarchy/Expression/Expression\";\nimport { ErrorHandler } from \"../../engine/Error\";\nimport { ExternalDeclaration } from \"./ParsedHierarchy/Declaration/ExternalDeclaration\";\nimport { FlowDecl } from \"./FlowDecl\";\nimport { FunctionCall } from \"./ParsedHierarchy/FunctionCall\";\nimport { Gather } from \"./ParsedHierarchy/Gather/Gather\";\nimport { Glue } from \"./ParsedHierarchy/Glue\";\nimport { Glue as RuntimeGlue } from \"../../engine/Glue\";\nimport { IFileHandler } from \"../IFileHandler\";\nimport { IncDecExpression } from \"./ParsedHierarchy/Expression/IncDecExpression\";\nimport { IncludedFile } from \"./ParsedHierarchy/IncludedFile\";\nimport { InfixOperator } from \"./InfixOperator\";\nimport { Knot } from \"./ParsedHierarchy/Knot\";\nimport { List } from \"./ParsedHierarchy/List/List\";\nimport { ListDefinition } from \"./ParsedHierarchy/List/ListDefinition\";\nimport { ListElementDefinition } from \"./ParsedHierarchy/List/ListElementDefinition\";\nimport { MultipleConditionExpression } from \"./ParsedHierarchy/Expression/MultipleConditionExpression\";\nimport { ParsedObject } from \"./ParsedHierarchy/Object\";\nimport { Path } from \"./ParsedHierarchy/Path\";\nimport { ReturnType } from \"./ParsedHierarchy/ReturnType\";\nimport { Sequence } from \"./ParsedHierarchy/Sequence/Sequence\";\nimport { SequenceType } from \"./ParsedHierarchy/Sequence/SequenceType\";\nimport { StatementLevel } from \"./StatementLevel\";\nimport { Stitch } from \"./ParsedHierarchy/Stitch\";\nimport { Story } from \"./ParsedHierarchy/Story\";\nimport { StringExpression } from \"./ParsedHierarchy/Expression/StringExpression\";\nimport {\n  StringParser,\n  SpecificParseRule,\n  ParseRule,\n  ParseRuleReturn,\n  ParseSuccess,\n} from \"./StringParser/StringParser\";\nimport { StringParserElement } from \"./StringParser/StringParserElement\";\nimport { Tag } from \"./ParsedHierarchy/Tag\";\nimport { Text } from \"./ParsedHierarchy/Text\";\nimport { TunnelOnwards } from \"./ParsedHierarchy/TunnelOnwards\";\nimport { VariableAssignment } from \"./ParsedHierarchy/Variable/VariableAssignment\";\nimport { VariableReference } from \"./ParsedHierarchy/Variable/VariableReference\";\nimport { UnaryExpression } from \"./ParsedHierarchy/Expression/UnaryExpression\";\nimport { asOrNull, filterUndef } from \"../../engine/TypeAssertion\";\nimport { Identifier } from \"./ParsedHierarchy/Identifier\";\nimport { NumberExpression } from \"./ParsedHierarchy/Expression/NumberExpression\";\nimport { ErrorType } from \"./ErrorType\";\nimport { DefaultFileHandler } from \"../FileHandler/DefaultFileHandler\";\n\nexport class InkParser extends StringParser {\n  /**\n   * Begin base InkParser section.\n   */\n\n  get fileHandler(): IFileHandler {\n    if (!this._fileHandler) {\n      throw new Error(\"No FileHandler defined\");\n    }\n    return this._fileHandler;\n  }\n\n  set fileHandler(value: IFileHandler) {\n    this._fileHandler = value;\n  }\n\n  constructor(\n    str: string,\n    filename: string | null = null,\n    externalErrorHandler: ErrorHandler | null = null,\n    rootParser: InkParser | null = null,\n    fileHandler: IFileHandler | null = null\n  ) {\n    super(str);\n\n    this._filename = filename;\n    this.RegisterExpressionOperators();\n    this.GenerateStatementLevelRules();\n\n    this.errorHandler = this.OnStringParserError;\n\n    this._externalErrorHandler = externalErrorHandler;\n\n    if (fileHandler === null) {\n      this._fileHandler = new DefaultFileHandler();\n    } else {\n      this._fileHandler = fileHandler;\n    }\n\n    if (rootParser === null) {\n      this._rootParser = this;\n      this._openFilenames = [];\n\n      if (this._filename !== null) {\n        const fullRootInkPath = this.fileHandler.ResolveInkFilename(\n          this._filename\n        );\n        this._openFilenames.push(fullRootInkPath);\n      }\n    } else {\n      this._rootParser = rootParser;\n    }\n  }\n\n  // Main entry point\n  // NOTE: This method is named Parse() in upstream.\n  public readonly ParseStory = (): Story => {\n    const topLevelContent: ParsedObject[] = this.StatementsAtLevel(\n      StatementLevel.Top\n    );\n\n    // Note we used to return null if there were any errors, but this would mean\n    // that include files would return completely empty rather than attempting to\n    // continue with errors. Returning an empty include files meant that anything\n    // that *did* compile successfully would otherwise be ignored, generating way\n    // more errors than necessary.\n    return new Story(topLevelContent, this._rootParser !== this);\n  };\n\n  public readonly SeparatedList = <T extends ParseRule>(\n    mainRule: SpecificParseRule<T>,\n    separatorRule: ParseRule\n  ): ParseRuleReturn[] | null => {\n    const firstElement: ParseRuleReturn = this.Parse(mainRule);\n    if (firstElement === null) {\n      return null;\n    }\n\n    const allElements = [];\n    allElements.push(firstElement);\n\n    do {\n      const nextElementRuleId: number = this.BeginRule();\n      let sep = separatorRule();\n      if (sep === null) {\n        this.FailRule(nextElementRuleId);\n        break;\n      }\n\n      const nextElement = this.Parse(mainRule);\n      if (nextElement === null) {\n        this.FailRule(nextElementRuleId);\n        break;\n      }\n\n      this.SucceedRule(nextElementRuleId);\n      allElements.push(nextElement);\n    } while (true);\n\n    return allElements;\n  };\n\n  public PreProcessInputString(str: string): string {\n    const commentEliminator = new CommentEliminator(str);\n    return commentEliminator.Process();\n  }\n\n  public readonly CreateDebugMetadata = (\n    stateAtStart: StringParserElement | null,\n    stateAtEnd: StringParserElement\n  ): DebugMetadata => {\n    const md = new DebugMetadata();\n    md.startLineNumber = (stateAtStart?.lineIndex || 0) + 1;\n    md.endLineNumber = stateAtEnd.lineIndex + 1;\n    md.startCharacterNumber = (stateAtStart?.characterInLineIndex || 0) + 1;\n    md.endCharacterNumber = stateAtEnd.characterInLineIndex + 1;\n    md.fileName = this._filename;\n\n    return md;\n  };\n\n  public readonly RuleDidSucceed = (\n    result: ParseRuleReturn,\n    stateAtStart: StringParserElement | null,\n    stateAtEnd: StringParserElement\n  ): void => {\n    // Apply DebugMetadata based on the state at the start of the rule\n    // (i.e. use line number as it was at the start of the rule)\n    const parsedObj = asOrNull(result, ParsedObject);\n    if (parsedObj) {\n      parsedObj.debugMetadata = this.CreateDebugMetadata(\n        stateAtStart,\n        stateAtEnd\n      );\n    }\n\n    // A list of objects that doesn't already have metadata?\n    const parsedListObjs: ParsedObject[] | null = Array.isArray(result)\n      ? (result as ParsedObject[])\n      : null;\n    if (parsedListObjs !== null) {\n      for (const parsedListObj of parsedListObjs) {\n        const singleObj = asOrNull(parsedListObj, ParsedObject);\n        if (!singleObj) continue;\n        if (!parsedListObj.hasOwnDebugMetadata) {\n          parsedListObj.debugMetadata = this.CreateDebugMetadata(\n            stateAtStart,\n            stateAtEnd\n          );\n        }\n      }\n    }\n\n    const id = asOrNull(result, Identifier);\n    if (id != null) {\n      id.debugMetadata = this.CreateDebugMetadata(stateAtStart, stateAtEnd);\n    }\n  };\n\n  get parsingStringExpression(): boolean {\n    return this.GetFlag(Number(CustomFlags.ParsingString));\n  }\n\n  set parsingStringExpression(value: boolean) {\n    this.SetFlag(Number(CustomFlags.ParsingString), value);\n  }\n\n  get tagActive(): boolean {\n    return this.GetFlag(Number(CustomFlags.TagActive));\n  }\n\n  set tagActive(value: boolean) {\n    this.SetFlag(Number(CustomFlags.TagActive), value);\n  }\n\n  public readonly OnStringParserError = (\n    message: string,\n    index: number,\n    lineIndex: number = 0,\n    isWarning: boolean = false\n  ): void => {\n    const warningType: string = isWarning ? \"WARNING:\" : \"ERROR:\";\n    let fullMessage: string = warningType;\n\n    if (this._filename !== null) {\n      fullMessage += ` '${this._filename}'`;\n    }\n\n    fullMessage += ` line ${lineIndex + 1}: ${message}`;\n\n    if (this._externalErrorHandler !== null) {\n      this._externalErrorHandler(\n        fullMessage,\n        isWarning ? ErrorType.Warning : ErrorType.Error\n      );\n    } else {\n      throw new Error(fullMessage);\n    }\n  };\n\n  public readonly AuthorWarning = (): AuthorWarning | null => {\n    this.Whitespace();\n\n    const identifier = this.Parse(\n      this.IdentifierWithMetadata\n    ) as unknown as Identifier | null;\n    if (identifier === null || identifier.name !== \"TODO\") {\n      return null;\n    }\n\n    this.Whitespace();\n    this.ParseString(\":\");\n    this.Whitespace();\n\n    const message = this.ParseUntilCharactersFromString(\"\\n\\r\");\n\n    if (message) {\n      return new AuthorWarning(message);\n    }\n\n    return null;\n  };\n\n  /**\n   * End base InkParser section.\n   */\n\n  /**\n   * Begin CharacterRanges section.\n   */\n\n  public static readonly LatinBasic: CharacterRange = CharacterRange.Define(\n    \"\\u0041\",\n    \"\\u007A\",\n    new CharacterSet().AddRange(\"\\u005B\", \"\\u0060\")\n  );\n\n  public static readonly LatinExtendedA: CharacterRange = CharacterRange.Define(\n    \"\\u0100\",\n    \"\\u017F\"\n    // no excludes here\n  );\n\n  public static readonly LatinExtendedB: CharacterRange = CharacterRange.Define(\n    \"\\u0180\",\n    \"\\u024F\"\n    // no excludes here\n  );\n\n  public static readonly Greek: CharacterRange = CharacterRange.Define(\n    \"\\u0370\",\n    \"\\u03FF\",\n    new CharacterSet()\n      .AddRange(\"\\u0378\", \"\\u0385\")\n      .AddCharacters(\"\\u0374\\u0375\\u0378\\u0387\\u038B\\u038D\\u03A2\")\n  );\n\n  public static readonly Cyrillic: CharacterRange = CharacterRange.Define(\n    \"\\u0400\",\n    \"\\u04FF\",\n    new CharacterSet().AddRange(\"\\u0482\", \"\\u0489\")\n  );\n\n  public static readonly Armenian: CharacterRange = CharacterRange.Define(\n    \"\\u0530\",\n    \"\\u058F\",\n    new CharacterSet()\n      .AddCharacters(\"\\u0530\")\n      .AddRange(\"\\u0557\", \"\\u0560\")\n      .AddRange(\"\\u0588\", \"\\u058E\")\n  );\n\n  public static readonly Hebrew: CharacterRange = CharacterRange.Define(\n    \"\\u0590\",\n    \"\\u05FF\",\n    new CharacterSet()\n  );\n\n  public static readonly Arabic: CharacterRange = CharacterRange.Define(\n    \"\\u0600\",\n    \"\\u06FF\",\n    new CharacterSet()\n  );\n\n  public static readonly Korean: CharacterRange = CharacterRange.Define(\n    \"\\uAC00\",\n    \"\\uD7AF\",\n    new CharacterSet()\n  );\n\n  private readonly ExtendIdentifierCharacterRanges = (\n    identifierCharSet: CharacterSet\n  ): void => {\n    const characterRanges = InkParser.ListAllCharacterRanges();\n    for (const charRange of characterRanges) {\n      identifierCharSet.AddCharacters(charRange.ToCharacterSet());\n    }\n  };\n\n  /// <summary>\n  /// Gets an array of <see cref=\"CharacterRange\" /> representing all of the currently supported\n  /// non-ASCII character ranges that can be used in identifier names.\n  /// </summary>\n  /// <returns>\n  /// An array of <see cref=\"CharacterRange\" /> representing all of the currently supported\n  /// non-ASCII character ranges that can be used in identifier names.\n  /// </returns>\n  public static readonly ListAllCharacterRanges = (): CharacterRange[] => [\n    InkParser.LatinBasic,\n    InkParser.LatinExtendedA,\n    InkParser.LatinExtendedB,\n    InkParser.Arabic,\n    InkParser.Armenian,\n    InkParser.Cyrillic,\n    InkParser.Greek,\n    InkParser.Hebrew,\n    InkParser.Korean,\n  ];\n\n  /**\n   * End CharacterRanges section.\n   */\n\n  /**\n   * Begin Choices section.\n   */\n\n  public _parsingChoice: boolean = false;\n\n  public readonly Choice = (): Choice | null => {\n    let onceOnlyChoice: boolean = true;\n    let bullets = this.Interleave<string>(\n      this.OptionalExclude(this.Whitespace),\n      this.String(\"*\")\n    );\n\n    if (!bullets) {\n      bullets = this.Interleave<string>(\n        this.OptionalExclude(this.Whitespace),\n        this.String(\"+\")\n      );\n\n      if (bullets === null) {\n        return null;\n      }\n\n      onceOnlyChoice = false;\n    }\n\n    // Optional name for the choice\n    const optionalName: Identifier = this.Parse(\n      this.BracketedName\n    ) as Identifier;\n\n    this.Whitespace();\n\n    // Optional condition for whether the choice should be shown to the player\n    const conditionExpr: Expression = this.Parse(\n      this.ChoiceCondition\n    ) as Expression;\n\n    this.Whitespace();\n\n    // Ordinarily we avoid parser state variables like these, since\n    // nesting would require us to store them in a stack. But since you should\n    // never be able to nest choices within choice content, it's fine here.\n    if (this._parsingChoice) {\n      throw new Error(\n        \"Already parsing a choice - shouldn't have nested choices\"\n      );\n    }\n\n    this._parsingChoice = true;\n\n    let startContent: ContentList | null = null;\n    const startTextAndLogic = this.Parse(\n      this.MixedTextAndLogic\n    ) as ParsedObject[];\n    if (startTextAndLogic) {\n      startContent = new ContentList(startTextAndLogic);\n    }\n\n    let optionOnlyContent: ContentList | null = null;\n    let innerContent: ContentList | null = null;\n\n    // Check for a the weave style format:\n    //   * \"Hello[.\"],\" he said.\n    const hasWeaveStyleInlineBrackets: boolean = this.ParseString(\"[\") !== null;\n    if (hasWeaveStyleInlineBrackets) {\n      this.EndTagIfNecessary(startContent);\n\n      const optionOnlyTextAndLogic = this.Parse(\n        this.MixedTextAndLogic\n      ) as ParsedObject[];\n\n      if (optionOnlyTextAndLogic !== null) {\n        optionOnlyContent = new ContentList(optionOnlyTextAndLogic);\n      }\n\n      this.Expect(this.String(\"]\"), \"closing ']' for weave-style option\");\n\n      this.EndTagIfNecessary(optionOnlyContent);\n\n      let innerTextAndLogic = this.Parse(\n        this.MixedTextAndLogic\n      ) as ParsedObject[];\n      if (innerTextAndLogic !== null) {\n        innerContent = new ContentList(innerTextAndLogic);\n      }\n    }\n\n    this.Whitespace();\n\n    this.EndTagIfNecessary(innerContent ?? startContent);\n\n    // Finally, now we know we're at the end of the main choice body, parse\n    // any diverts separately.\n    const diverts: ParsedObject[] = this.Parse(\n      this.MultiDivert\n    ) as ParsedObject[];\n\n    this._parsingChoice = false;\n\n    this.Whitespace();\n\n    // Completely empty choice without even an empty divert?\n    const emptyContent: boolean =\n      !startContent && !innerContent && !optionOnlyContent;\n\n    if (emptyContent && diverts === null) {\n      this.Warning(\n        \"Choice is completely empty. Interpretting as a default fallback choice. Add a divert arrow to remove this warning: * ->\"\n      );\n    }\n\n    if (!startContent && hasWeaveStyleInlineBrackets && !optionOnlyContent) {\n      // * [] some text\n      this.Warning(\n        \"Blank choice - if you intended a default fallback choice, use the `* ->` syntax\"\n      );\n    }\n\n    if (!innerContent) {\n      innerContent = new ContentList();\n    }\n\n    this.EndTagIfNecessary(innerContent);\n\n    // Normal diverts on the end of a choice - simply add to the normal content\n    if (diverts !== null) {\n      for (const divObj of diverts) {\n        // may be TunnelOnwards\n        const div = asOrNull(divObj, Divert);\n\n        // Empty divert serves no purpose other than to say\n        // \"this choice is intentionally left blank\"\n        // (as an invisible default choice)\n        if (div && div.isEmpty) {\n          continue;\n        }\n\n        innerContent.AddContent(divObj);\n      }\n    }\n\n    // Terminate main content with a newline since this is the end of the line\n    // Note that this will be redundant if the diverts above definitely take\n    // the flow away permanently.\n    innerContent.AddContent(new Text(\"\\n\"));\n\n    const choice = new Choice(startContent!, optionOnlyContent!, innerContent);\n    if (optionalName) choice.identifier = optionalName;\n    choice.indentationDepth = bullets.length;\n    choice.hasWeaveStyleInlineBrackets = hasWeaveStyleInlineBrackets;\n    choice.condition = conditionExpr;\n    choice.onceOnly = onceOnlyChoice;\n    choice.isInvisibleDefault = emptyContent;\n    return choice;\n  };\n\n  public readonly ChoiceCondition = (): Expression | null => {\n    const conditions = this.Interleave<Expression>(\n      this.ChoiceSingleCondition,\n      this.ChoiceConditionsSpace\n    );\n\n    if (conditions === null) {\n      return null;\n    } else if (conditions.length === 1) {\n      return conditions[0];\n    }\n\n    return new MultipleConditionExpression(conditions);\n  };\n\n  public readonly ChoiceConditionsSpace = (): typeof ParseSuccess => {\n    // Both optional\n    // Newline includes initial end of line whitespace\n    this.Newline();\n    this.Whitespace();\n\n    return ParseSuccess;\n  };\n\n  public readonly ChoiceSingleCondition = (): Expression | null => {\n    if (this.ParseString(\"{\") === null) {\n      return null;\n    }\n\n    const condExpr = this.Expect(\n      this.Expression,\n      \"choice condition inside { }\"\n    ) as Expression;\n\n    this.DisallowIncrement(condExpr);\n    this.Expect(this.String(\"}\"), \"closing '}' for choice condition\");\n\n    return condExpr;\n  };\n\n  public readonly Gather = (): Gather | null => {\n    const gatherDashCountObj: number = this.Parse(this.GatherDashes) as number;\n    if (gatherDashCountObj === null) {\n      return null;\n    }\n\n    const gatherDashCount: number = Number(gatherDashCountObj);\n\n    // Optional name for the gather\n    const optionalName: Identifier = this.Parse(\n      this.BracketedName\n    ) as Identifier;\n\n    const gather = new Gather(optionalName, gatherDashCount);\n\n    // Optional newline before gather's content begins\n    this.Newline();\n\n    return gather;\n  };\n\n  public readonly GatherDashes = (): number | null => {\n    this.Whitespace();\n\n    let gatherDashCount: number = 0;\n    while (this.ParseDashNotArrow() !== null) {\n      gatherDashCount += 1;\n      this.Whitespace();\n    }\n\n    if (gatherDashCount === 0) {\n      return null;\n    }\n\n    return gatherDashCount as number;\n  };\n\n  public readonly ParseDashNotArrow = () => {\n    const ruleId = this.BeginRule();\n\n    if (\n      this.ParseString(\"->\") === null &&\n      this.ParseSingleCharacter() === \"-\"\n    ) {\n      return this.SucceedRule(ruleId);\n    }\n\n    return this.FailRule(ruleId);\n  };\n\n  public readonly BracketedName = (): Identifier | null => {\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const name = this.Parse(this.IdentifierWithMetadata) as Identifier | null;\n    if (name === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    this.Expect(this.String(\")\"), \"closing ')' for bracketed name\");\n\n    return name;\n  };\n\n  /**\n   * End Choices section.\n   */\n\n  /**\n   * Begin Conditional section.\n   */\n\n  public readonly InnerConditionalContent = (\n    initialQueryExpression: Expression\n  ): Conditional | null => {\n    if (initialQueryExpression === undefined) {\n      const initialQueryExpression = this.Parse(this.ConditionExpression);\n      const conditional = this.Parse(() =>\n        this.InnerConditionalContent(initialQueryExpression as Expression)\n      ) as Conditional;\n\n      if (conditional === null) {\n        return null;\n      }\n\n      return conditional;\n    }\n\n    let alternatives: ConditionalSingleBranch[] | null;\n    const canBeInline: boolean = initialQueryExpression !== null;\n    const isInline: boolean = this.Parse(this.Newline) === null;\n\n    if (isInline && !canBeInline) {\n      return null;\n    }\n\n    if (isInline) {\n      // Inline innards\n      alternatives = this.InlineConditionalBranches();\n    } else {\n      // Multiline innards\n      alternatives = this.MultilineConditionalBranches();\n\n      if (alternatives === null) {\n        // Allow single piece of content within multi-line expression, e.g.:\n        // { true:\n        //    Some content that isn't preceded by '-'\n        // }\n        if (initialQueryExpression) {\n          let soleContent: ParsedObject[] = this.StatementsAtLevel(\n            StatementLevel.InnerBlock\n          );\n          if (soleContent !== null) {\n            const soleBranch = new ConditionalSingleBranch(soleContent);\n            alternatives = [soleBranch];\n\n            // Also allow a final \"- else:\" clause\n            const elseBranch = this.Parse(\n              this.SingleMultilineCondition\n            ) as ConditionalSingleBranch;\n            if (elseBranch) {\n              if (!elseBranch.isElse) {\n                this.ErrorWithParsedObject(\n                  \"Expected an '- else:' clause here rather than an extra condition\",\n                  elseBranch\n                );\n\n                elseBranch.isElse = true;\n              }\n\n              alternatives.push(elseBranch);\n            }\n          }\n        }\n\n        // Still null?\n        if (alternatives === null) {\n          return null;\n        }\n      } else if (\n        alternatives.length === 1 &&\n        alternatives[0].isElse &&\n        initialQueryExpression\n      ) {\n        // Empty true branch - didn't get parsed, but should insert one for semantic correctness,\n        // and to make sure that any evaluation stack values get tidied up correctly.\n        const emptyTrueBranch = new ConditionalSingleBranch(null);\n        emptyTrueBranch.isTrueBranch = true;\n        alternatives.unshift(emptyTrueBranch);\n      }\n\n      // Like a switch statement\n      // { initialQueryExpression:\n      //    ... match the expression\n      // }\n      if (initialQueryExpression) {\n        let earlierBranchesHaveOwnExpression: boolean = false;\n        for (let ii = 0; ii < alternatives.length; ++ii) {\n          const branch = alternatives[ii];\n          const isLast: boolean = ii === alternatives.length - 1;\n\n          // Matching equality with initial query expression\n          // We set this flag even for the \"else\" clause so that\n          // it knows to tidy up the evaluation stack at the end\n\n          // Match query\n          if (branch.ownExpression) {\n            branch.matchingEquality = true;\n            earlierBranchesHaveOwnExpression = true;\n          } else if (earlierBranchesHaveOwnExpression && isLast) {\n            // Else (final branch)\n            branch.matchingEquality = true;\n            branch.isElse = true;\n          } else {\n            // Binary condition:\n            // { trueOrFalse:\n            //    - when true\n            //    - when false\n            // }\n            if (!isLast && alternatives.length > 2) {\n              this.ErrorWithParsedObject(\n                \"Only final branch can be an 'else'. Did you miss a ':'?\",\n                branch\n              );\n            } else {\n              if (ii === 0) {\n                branch.isTrueBranch = true;\n              } else {\n                branch.isElse = true;\n              }\n            }\n          }\n        }\n      } else {\n        // No initial query, so just a multi-line conditional. e.g.:\n        // {\n        //   - x > 3:  greater than three\n        //   - x == 3: equal to three\n        //   - x < 3:  less than three\n        // }\n\n        for (let ii = 0; ii < alternatives.length; ++ii) {\n          const alt = alternatives[ii];\n          const isLast: boolean = ii === alternatives.length - 1;\n\n          if (alt.ownExpression === null) {\n            if (isLast) {\n              alt.isElse = true;\n            } else {\n              if (alt.isElse) {\n                // Do we ALSO have a valid \"else\" at the end? Let's report the error there.\n                const finalClause = alternatives[alternatives.length - 1];\n                if (finalClause.isElse) {\n                  this.ErrorWithParsedObject(\n                    \"Multiple 'else' cases. Can have a maximum of one, at the end.\",\n                    finalClause\n                  );\n                } else {\n                  this.ErrorWithParsedObject(\n                    \"'else' case in conditional should always be the final one\",\n                    alt\n                  );\n                }\n              } else {\n                this.ErrorWithParsedObject(\n                  \"Branch doesn't have condition. Are you missing a ':'? \",\n                  alt\n                );\n              }\n            }\n          }\n        }\n\n        if (\n          alternatives.length === 1 &&\n          alternatives[0].ownExpression === null\n        ) {\n          this.ErrorWithParsedObject(\n            \"Condition block with no conditions\",\n            alternatives[0]\n          );\n        }\n      }\n    }\n\n    // TODO: Come up with water-tight error conditions... it's quite a flexible system!\n    // e.g.\n    //   - inline conditionals must have exactly 1 or 2 alternatives\n    //   - multiline expression shouldn't have mixed existence of branch-conditions?\n    if (alternatives === null) {\n      return null;\n    }\n\n    for (const branch of alternatives) {\n      branch.isInline = isInline;\n    }\n\n    const cond = new Conditional(initialQueryExpression, alternatives);\n\n    return cond;\n  };\n\n  public readonly InlineConditionalBranches = ():\n    | ConditionalSingleBranch[]\n    | null => {\n    const listOfLists = this.Interleave<ParsedObject[]>(\n      this.MixedTextAndLogic,\n      this.Exclude(this.String(\"|\")),\n      null,\n      false\n    );\n\n    if (listOfLists === null || listOfLists.length === 0) {\n      return null;\n    }\n\n    const result: ConditionalSingleBranch[] = [];\n\n    if (listOfLists.length > 2) {\n      this.Error(\n        \"Expected one or two alternatives separated by '|' in inline conditional\"\n      );\n    } else {\n      const trueBranch = new ConditionalSingleBranch(listOfLists[0]);\n      trueBranch.isTrueBranch = true;\n      result.push(trueBranch);\n\n      if (listOfLists.length > 1) {\n        const elseBranch = new ConditionalSingleBranch(listOfLists[1]);\n        elseBranch.isElse = true;\n        result.push(elseBranch);\n      }\n    }\n\n    return result;\n  };\n\n  public readonly MultilineConditionalBranches = ():\n    | ConditionalSingleBranch[]\n    | null => {\n    this.MultilineWhitespace();\n\n    const multipleConditions = this.OneOrMore(this.SingleMultilineCondition);\n    if (multipleConditions === null) {\n      return null;\n    }\n\n    this.MultilineWhitespace();\n\n    return multipleConditions as ConditionalSingleBranch[];\n  };\n\n  public readonly SingleMultilineCondition =\n    (): ConditionalSingleBranch | null => {\n      this.Whitespace();\n\n      if (\n        // Make sure we're not accidentally parsing a divert\n        this.ParseString(\"->\") !== null ||\n        this.ParseString(\"-\") === null\n      ) {\n        return null;\n      }\n\n      this.Whitespace();\n\n      let expr: Expression | null = null;\n      const isElse: boolean = this.Parse(this.ElseExpression) !== null;\n\n      if (!isElse) {\n        expr = this.Parse(this.ConditionExpression) as Expression;\n      }\n\n      let content: ParsedObject[] = this.StatementsAtLevel(\n        StatementLevel.InnerBlock\n      );\n      if (expr === null && content === null) {\n        this.Error(\"expected content for the conditional branch following '-'\");\n\n        // Recover\n        content = [new Text(\"\")];\n      }\n\n      // Allow additional multiline whitespace, if the statements were empty (valid)\n      // then their surrounding multiline whitespacce needs to be handled manually.\n      // e.g.\n      // { x:\n      //   - 1:    // intentionally left blank, but newline needs to be parsed\n      //   - 2: etc\n      // }\n      this.MultilineWhitespace();\n\n      const branch = new ConditionalSingleBranch(content);\n      branch.ownExpression = expr;\n      branch.isElse = isElse;\n\n      return branch;\n    };\n\n  public readonly ConditionExpression = (): ParsedObject | null => {\n    const expr = this.Parse(this.Expression) as ParsedObject;\n    if (expr === null) {\n      return null;\n    }\n\n    this.DisallowIncrement(expr);\n\n    this.Whitespace();\n\n    if (this.ParseString(\":\") === null) {\n      return null;\n    }\n\n    return expr;\n  };\n\n  public readonly ElseExpression = (): typeof ParseSuccess | null => {\n    if (this.ParseString(\"else\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    if (this.ParseString(\":\") === null) {\n      return null;\n    }\n\n    return ParseSuccess;\n  };\n\n  /**\n   * End Conditional section.\n   */\n\n  /**\n   * Begin Content section.\n   */\n\n  public _nonTextPauseCharacters: CharacterSet | null = null;\n  public _nonTextEndCharacters: CharacterSet | null = null;\n  public _notTextEndCharactersChoice: CharacterSet | null = null;\n  public _notTextEndCharactersString: CharacterSet | null = null;\n\n  public readonly TrimEndWhitespace = (\n    mixedTextAndLogicResults: ParsedObject[],\n    terminateWithSpace: boolean\n  ): void => {\n    // Trim whitespace from end\n    if (mixedTextAndLogicResults.length > 0) {\n      const lastObjIdx = mixedTextAndLogicResults.length - 1;\n      const lastObj = mixedTextAndLogicResults[lastObjIdx];\n      if (lastObj instanceof Text) {\n        const textObj: Text = lastObj;\n        textObj.text = textObj.text.replace(new RegExp(/[ \\t]+$/g), \"\");\n\n        if (terminateWithSpace) {\n          textObj.text += \" \";\n        } else if (textObj.text.length === 0) {\n          // No content left at all? trim the whole object\n          mixedTextAndLogicResults.splice(lastObjIdx, 1);\n\n          // Recurse in case there's more whitespace\n          this.TrimEndWhitespace(mixedTextAndLogicResults, false);\n        }\n      }\n    }\n  };\n\n  public readonly LineOfMixedTextAndLogic = (): ParsedObject[] | null => {\n    // Consume any whitespace at the start of the line\n    // (Except for escaped whitespace)\n    this.Parse(this.Whitespace);\n\n    let result: ParsedObject[] = this.Parse(\n      this.MixedTextAndLogic\n    ) as ParsedObject[];\n\n    if (!result || !result.length) {\n      return null;\n    }\n\n    // Warn about accidentally writing \"return\" without \"~\"\n    const firstText = result[0] as Text;\n    if (firstText && firstText.text && firstText.text.startsWith(\"return\")) {\n      this.Warning(\n        \"Do you need a '~' before 'return'? If not, perhaps use a glue: <> (since it's lowercase) or rewrite somehow?\"\n      );\n    }\n\n    if (result.length === 0) {\n      return null;\n    }\n\n    const lastObj = result[result.length - 1];\n    if (!(lastObj instanceof Divert)) {\n      this.TrimEndWhitespace(result, false);\n    }\n\n    this.EndTagIfNecessary(result);\n\n    // If the line doens't actually contain any normal text content\n    // but is in fact entirely a tag, then let's not append\n    // a newline, since we want the tag (or tags) to be associated\n    // with the line below rather than being completely independent.\n    let lineIsPureTag =\n      result.length > 0 && result[0] instanceof Tag && result[0].isStart;\n\n    if (!lineIsPureTag) {\n      result.push(new Text(\"\\n\"));\n    }\n\n    this.Expect(this.EndOfLine, \"end of line\", this.SkipToNextLine);\n    return result;\n  };\n\n  public readonly MixedTextAndLogic = (): ParsedObject[] | null => {\n    // Check for disallowed \"~\" within this context\n    const disallowedTilde = this.ParseObject(this.Spaced(this.String(\"~\")));\n    if (disallowedTilde !== null) {\n      this.Error(\n        \"You shouldn't use a '~' here - tildas are for logic that's on its own line. To do inline logic, use { curly braces } instead\"\n      );\n    }\n\n    // Either, or both interleaved\n    let results: ParsedObject[] = this.Interleave<ParsedObject>(\n      this.Optional(this.ContentText),\n      this.Optional(this.InlineLogicOrGlueOrStartTag)\n    );\n\n    // Terminating divert?\n    // (When parsing content for the text of a choice, diverts aren't allowed.\n    //  The divert on the end of the body of a choice is handled specially.)\n    if (!this._parsingChoice) {\n      const diverts: ParsedObject[] = this.Parse(\n        this.MultiDivert\n      ) as ParsedObject[];\n      if (diverts !== null) {\n        // May not have had any results at all if there's *only* a divert!\n        if (results === null) {\n          results = [];\n        }\n\n        // End previously active tag if necessary\n        this.EndTagIfNecessary(results);\n\n        this.TrimEndWhitespace(results, true);\n\n        results.push(...diverts);\n      }\n    }\n\n    if (!results) {\n      return null;\n    }\n\n    return results;\n  };\n\n  public readonly ContentText = () => {\n    return this.ContentTextAllowingEscapeChar();\n  };\n\n  public readonly ContentTextAllowingEscapeChar = (): Text | null => {\n    let sb: string | null = null;\n\n    do {\n      let str = this.Parse(this.ContentTextNoEscape);\n      const gotEscapeChar: boolean = this.ParseString(\"\\\\\") !== null;\n\n      if (gotEscapeChar || str !== null) {\n        if (sb === null) {\n          sb = \"\";\n        }\n\n        if (str !== null) {\n          sb += String(str);\n        }\n\n        if (gotEscapeChar) {\n          const c: string = this.ParseSingleCharacter();\n          sb += c;\n        }\n      } else {\n        break;\n      }\n    } while (true);\n\n    if (sb !== null) {\n      return new Text(sb);\n    }\n\n    return null;\n  };\n\n  // Content text is an unusual parse rule compared with most since it's\n  // less about saying \"this is is the small selection of stuff that we parse\"\n  // and more \"we parse ANYTHING except this small selection of stuff\".\n  public readonly ContentTextNoEscape = (): string | null => {\n    // Eat through text, pausing at the following characters, and\n    // attempt to parse the nonTextRule.\n    // \"-\": possible start of divert or start of gather\n    // \"<\": possible start of glue\n    if (this._nonTextPauseCharacters === null) {\n      this._nonTextPauseCharacters = new CharacterSet(\"-<\");\n    }\n\n    // If we hit any of these characters, we stop *immediately* without bothering to even check the nonTextRule\n    // \"{\" for start of logic\n    // \"|\" for mid logic branch\n    if (this._nonTextEndCharacters === null) {\n      this._nonTextEndCharacters = new CharacterSet(\"{}|\\n\\r\\\\#\");\n      this._notTextEndCharactersChoice = new CharacterSet(\n        this._nonTextEndCharacters\n      );\n      this._notTextEndCharactersChoice.AddCharacters(\"[]\");\n      this._notTextEndCharactersString = new CharacterSet(\n        this._nonTextEndCharacters\n      );\n      this._notTextEndCharactersString.AddCharacters('\"');\n    }\n\n    // When the ParseUntil pauses, check these rules in case they evaluate successfully\n    const nonTextRule: ParseRule = () =>\n      this.OneOf([\n        this.ParseDivertArrow,\n        this.ParseThreadArrow,\n        this.EndOfLine,\n        this.Glue,\n      ]);\n\n    let endChars: CharacterSet | null = null;\n    if (this.parsingStringExpression) {\n      endChars = this._notTextEndCharactersString;\n    } else if (this._parsingChoice) {\n      endChars = this._notTextEndCharactersChoice;\n    } else {\n      endChars = this._nonTextEndCharacters;\n    }\n\n    const pureTextContent: string = this.ParseUntil(\n      nonTextRule,\n      this._nonTextPauseCharacters,\n      endChars\n    );\n\n    if (pureTextContent !== null) {\n      return pureTextContent;\n    }\n\n    return null;\n  };\n\n  /**\n   * End Content section.\n   */\n\n  /**\n   * Begin Divert section.\n   */\n\n  public readonly MultiDivert = (): ParsedObject[] | null => {\n    this.Whitespace();\n\n    let diverts: ParsedObject[] = [];\n\n    // Try single thread first\n    const threadDivert = this.Parse(this.StartThread) as ParsedObject;\n    if (threadDivert) {\n      diverts = [threadDivert];\n\n      return diverts;\n    }\n\n    // Normal diverts and tunnels\n    const arrowsAndDiverts = this.Interleave<ParsedObject>(\n      this.ParseDivertArrowOrTunnelOnwards,\n      this.DivertIdentifierWithArguments\n    );\n\n    if (!arrowsAndDiverts) {\n      return null;\n    }\n\n    diverts = [];\n\n    this.EndTagIfNecessary(diverts);\n\n    // Possible patterns:\n    //  ->                   -- explicit gather\n    //  ->->                 -- tunnel onwards\n    //  -> div               -- normal divert\n    //  ->-> div             -- tunnel onwards, followed by override divert\n    //  -> div ->            -- normal tunnel\n    //  -> div ->->          -- tunnel then tunnel continue\n    //  -> div -> div        -- tunnel then divert\n    //  -> div -> div ->     -- tunnel then tunnel\n    //  -> div -> div ->->\n    //  -> div -> div ->-> div    (etc)\n\n    // Look at the arrows and diverts\n    for (let ii = 0; ii < arrowsAndDiverts.length; ++ii) {\n      const isArrow: boolean = ii % 2 === 0;\n\n      // Arrow string\n      if (isArrow) {\n        // Tunnel onwards\n        if ((arrowsAndDiverts[ii] as any) === \"->->\") {\n          const tunnelOnwardsPlacementValid: boolean =\n            ii === 0 ||\n            ii === arrowsAndDiverts.length - 1 ||\n            ii === arrowsAndDiverts.length - 2;\n\n          if (!tunnelOnwardsPlacementValid) {\n            this.Error(\n              \"Tunnel onwards '->->' must only come at the begining or the start of a divert\"\n            );\n          }\n\n          const tunnelOnwards = new TunnelOnwards();\n          if (ii < arrowsAndDiverts.length - 1) {\n            const tunnelOnwardDivert = asOrNull(\n              arrowsAndDiverts[ii + 1],\n              Divert\n            );\n            tunnelOnwards.divertAfter = tunnelOnwardDivert;\n          }\n\n          diverts.push(tunnelOnwards);\n\n          // Not allowed to do anything after a tunnel onwards.\n          // If we had anything left it would be caused in the above Error for\n          // the positioning of a ->->\n          break;\n        }\n      } else {\n        // Divert\n        const divert = arrowsAndDiverts[ii] as Divert;\n        // More to come? (further arrows) Must be tunnelling.\n        if (ii < arrowsAndDiverts.length - 1) {\n          divert.isTunnel = true;\n        }\n\n        diverts.push(divert);\n      }\n    }\n\n    // Single -> (used for default choices)\n    if (diverts.length === 0 && arrowsAndDiverts.length === 1) {\n      const gatherDivert = new Divert(null);\n      gatherDivert.isEmpty = true;\n      diverts.push(gatherDivert);\n\n      if (!this._parsingChoice) {\n        this.Error(\"Empty diverts (->) are only valid on choices\");\n      }\n    }\n\n    return diverts;\n  };\n\n  public readonly StartThread = (): Divert | null => {\n    this.Whitespace();\n\n    if (this.ParseThreadArrow() === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const divert = this.Expect(\n      this.DivertIdentifierWithArguments,\n      \"target for new thread\",\n      () => new Divert(null)\n    ) as Divert;\n\n    divert.isThread = true;\n\n    return divert;\n  };\n\n  public readonly DivertIdentifierWithArguments = (): Divert | null => {\n    this.Whitespace();\n\n    const targetComponents: Identifier[] = this.Parse(\n      this.DotSeparatedDivertPathComponents\n    ) as Identifier[];\n\n    if (!targetComponents) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const optionalArguments = this.Parse(\n      this.ExpressionFunctionCallArguments\n    ) as Expression[];\n\n    this.Whitespace();\n\n    const targetPath = new Path(targetComponents);\n\n    return new Divert(targetPath, optionalArguments);\n  };\n\n  public readonly SingleDivert = (): Divert | null => {\n    const diverts = this.Parse(this.MultiDivert) as ParsedObject[];\n    if (!diverts) {\n      return null;\n    }\n\n    // Ideally we'd report errors if we get the\n    // wrong kind of divert, but unfortunately we\n    // have to hack around the fact that sequences use\n    // a very similar syntax.\n    // i.e. if you have a multi-divert at the start\n    // of a sequence, it initially tries to parse it\n    // as a divert target (part of an expression of\n    // a conditional) and gives errors. So instead\n    // we just have to blindly reject it as a single\n    // divert, and give a slightly less nice error\n    // when you DO use a multi divert as a divert taret.\n\n    if (diverts.length !== 1) {\n      return null;\n    }\n\n    const singleDivert = diverts[0];\n    if (singleDivert instanceof TunnelOnwards) {\n      return null;\n    }\n\n    const divert = diverts[0] as Divert;\n    if (divert.isTunnel) {\n      return null;\n    }\n\n    return divert;\n  };\n\n  public readonly DotSeparatedDivertPathComponents = (): Identifier[] =>\n    this.Interleave<Identifier>(\n      this.Spaced(this.IdentifierWithMetadata),\n      this.Exclude(this.String(\".\"))\n    );\n\n  public readonly ParseDivertArrowOrTunnelOnwards = (): string | null => {\n    let numArrows: number = 0;\n    while (this.ParseString(\"->\") !== null) {\n      numArrows += 1;\n    }\n\n    if (numArrows === 0) {\n      return null;\n    } else if (numArrows === 1) {\n      return \"->\";\n    } else if (numArrows === 2) {\n      return \"->->\";\n    }\n\n    this.Error(\n      \"Unexpected number of arrows in divert. Should only have '->' or '->->'\"\n    );\n\n    return \"->->\";\n  };\n\n  public readonly ParseDivertArrow = () => this.ParseString(\"->\");\n\n  public readonly ParseThreadArrow = () => this.ParseString(\"<-\");\n\n  /**\n   * End Divert section.\n   */\n\n  /**\n   * Begin Expressions section.\n   */\n\n  public _binaryOperators: InfixOperator[] = [];\n  public _maxBinaryOpLength: number = 0;\n\n  public readonly TempDeclarationOrAssignment = (): ParsedObject | null => {\n    this.Whitespace();\n\n    const isNewDeclaration: boolean = this.ParseTempKeyword();\n\n    this.Whitespace();\n\n    let varIdentifier: Identifier | null = null;\n    if (isNewDeclaration) {\n      varIdentifier = this.Expect(\n        this.IdentifierWithMetadata,\n        \"variable name\"\n      ) as Identifier;\n    } else {\n      varIdentifier = this.Parse(this.IdentifierWithMetadata) as Identifier;\n    }\n\n    if (varIdentifier === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // += -=\n    const isIncrement: boolean = this.ParseString(\"+\") !== null;\n    const isDecrement: boolean = this.ParseString(\"-\") !== null;\n\n    if (isIncrement && isDecrement) {\n      this.Error(\"Unexpected sequence '+-'\");\n    }\n\n    if (this.ParseString(\"=\") === null) {\n      // Definitely in an assignment expression?\n      if (isNewDeclaration) {\n        this.Error(\"Expected '='\");\n      }\n\n      return null;\n    }\n\n    const assignedExpression: Expression = this.Expect(\n      this.Expression,\n      \"value expression to be assigned\"\n    ) as Expression;\n\n    if (isIncrement || isDecrement) {\n      const result = new IncDecExpression(\n        varIdentifier,\n        assignedExpression,\n        isIncrement\n      );\n      return result;\n    }\n\n    const result = new VariableAssignment({\n      variableIdentifier: varIdentifier,\n      assignedExpression,\n      isTemporaryNewDeclaration: isNewDeclaration,\n    });\n\n    return result;\n  };\n\n  public readonly DisallowIncrement = (expr: ParsedObject): void => {\n    if (expr instanceof IncDecExpression) {\n      this.Error(\n        \"Can't use increment/decrement here. It can only be used on a ~ line\"\n      );\n    }\n  };\n\n  public readonly ParseTempKeyword = () => {\n    const ruleId = this.BeginRule();\n\n    if (this.Parse(this.Identifier) === \"temp\") {\n      this.SucceedRule(ruleId);\n      return true;\n    }\n\n    this.FailRule(ruleId);\n    return false;\n  };\n\n  public readonly ReturnStatement = (): ReturnType | null => {\n    this.Whitespace();\n\n    const returnOrDone = this.Parse(this.Identifier);\n    if (returnOrDone !== \"return\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const expr = this.Parse(this.Expression) as Expression;\n\n    const returnObj = new ReturnType(expr);\n\n    return returnObj;\n  };\n\n  // Pratt Parser\n  // aka \"Top down operator precedence parser\"\n  // http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n  // Algorithm overview:\n  // The two types of precedence are handled in two different ways:\n  //   ((((a . b) . c) . d) . e)\t\t\t#1\n  //   (a . (b . (c . (d . e))))\t\t\t#2\n  // Where #1 is automatically handled by successive loops within the main 'while' in this function,\n  // so long as continuing operators have lower (or equal) precedence (e.g. imagine some series of \"*\"s then \"+\" above.\n  // ...and #2 is handled by recursion of the right hand term in the binary expression parser.\n  // (see link for advice on how to extend for postfix and mixfix operators)\n  public readonly Expression = (\n    minimumPrecedence: number = 0\n  ): Expression | null => {\n    this.Whitespace();\n\n    // First parse a unary expression e.g. \"-a\" or parethensised \"(1 + 2)\"\n    let expr = this.ExpressionUnary();\n    if (expr === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // Attempt to parse (possibly multiple) continuing infix expressions (e.g. 1 + 2 + 3)\n    while (true) {\n      const ruleId = this.BeginRule();\n\n      // Operator\n      const infixOp = this.ParseInfixOperator();\n      if (infixOp !== null && infixOp.precedence > minimumPrecedence) {\n        // Expect right hand side of operator\n        const expectationMessage = `right side of '${infixOp.type}' expression`;\n        const multiaryExpr = this.Expect(\n          () => this.ExpressionInfixRight(expr, infixOp),\n          expectationMessage\n        );\n\n        if (multiaryExpr === null) {\n          // Fail for operator and right-hand side of multiary expression\n          this.FailRule(ruleId);\n\n          return null;\n        }\n\n        expr = this.SucceedRule(ruleId, multiaryExpr) as Expression;\n\n        continue;\n      }\n\n      this.FailRule(ruleId);\n      break;\n    }\n\n    this.Whitespace();\n\n    return expr;\n  };\n\n  public readonly ExpressionUnary = (): Expression | null => {\n    // Divert target is a special case - it can't have any other operators\n    // applied to it, and we also want to check for it first so that we don't\n    // confuse \"->\" for subtraction.\n    const divertTarget = this.Parse(this.ExpressionDivertTarget) as Expression;\n    if (divertTarget !== null) {\n      return divertTarget;\n    }\n\n    let prefixOp: Expression = this.OneOf([\n      this.String(\"-\"),\n      this.String(\"!\"),\n    ]) as Expression;\n\n    // Don't parse like the string rules above, in case its actually\n    // a variable that simply starts with \"not\", e.g. \"notable\".\n    // This rule uses the Identifier rule, which will scan as much text\n    // as possible before returning.\n    if (prefixOp === null) {\n      prefixOp = this.Parse(this.ExpressionNot) as Expression;\n    }\n\n    this.Whitespace();\n\n    // - Since we allow numbers at the start of variable names, variable names are checked before literals\n    // - Function calls before variable names in case we see parentheses\n    let expr = this.OneOf([\n      this.ExpressionList,\n      this.ExpressionParen,\n      this.ExpressionFunctionCall,\n      this.ExpressionVariableName,\n      this.ExpressionLiteral,\n    ]) as Expression | null;\n\n    // Only recurse immediately if we have one of the (usually optional) unary ops\n    if (expr === null && prefixOp !== null) {\n      expr = this.ExpressionUnary();\n    }\n\n    if (expr === null) {\n      return null;\n    } else if (prefixOp !== null) {\n      expr = UnaryExpression.WithInner(expr, prefixOp as any) as Expression;\n    }\n\n    this.Whitespace();\n\n    const postfixOp = this.OneOf([this.String(\"++\"), this.String(\"--\")]);\n\n    if (postfixOp !== null) {\n      const isInc: boolean = postfixOp === \"++\";\n\n      if (!(expr instanceof VariableReference)) {\n        this.Error(\n          `can only increment and decrement variables, but saw '${expr}'.`\n        );\n\n        // Drop down and succeed without the increment after reporting error\n      } else {\n        const varRef = expr as VariableReference;\n        expr = new IncDecExpression(varRef.identifier, isInc);\n      }\n    }\n\n    return expr;\n  };\n\n  public readonly ExpressionNot = (): string | null => {\n    const id = this.Identifier();\n    if (id === \"not\") {\n      return id;\n    }\n\n    return null;\n  };\n\n  public readonly ExpressionLiteral = (): Expression =>\n    this.OneOf([\n      this.ExpressionFloat,\n      this.ExpressionInt,\n      this.ExpressionBool,\n      this.ExpressionString,\n    ]) as Expression;\n\n  public readonly ExpressionDivertTarget = (): Expression | null => {\n    this.Whitespace();\n\n    const divert = this.Parse(this.SingleDivert) as Divert;\n    if (!divert || (divert && divert.isThread)) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    return new DivertTarget(divert);\n  };\n\n  public readonly ExpressionInt = (): NumberExpression | null => {\n    const intOrNull: number = this.ParseInt() as number;\n    if (intOrNull === null) {\n      return null;\n    }\n\n    return new NumberExpression(intOrNull, \"int\");\n  };\n\n  public readonly ExpressionFloat = (): NumberExpression | null => {\n    const floatOrNull: number = this.ParseFloat() as number;\n    if (floatOrNull === null) {\n      return null;\n    }\n\n    return new NumberExpression(floatOrNull, \"float\");\n  };\n\n  public readonly ExpressionString = (): StringExpression | null => {\n    const openQuote = this.ParseString('\"');\n    if (openQuote === null) {\n      return null;\n    }\n\n    // Set custom parser state flag so that within the text parser,\n    // it knows to treat the quote character (\") as an end character\n    this.parsingStringExpression = true;\n\n    let textAndLogic: ParsedObject[] = this.Parse(\n      this.MixedTextAndLogic\n    ) as ParsedObject[];\n\n    this.Expect(this.String('\"'), \"close quote for string expression\");\n\n    this.parsingStringExpression = false;\n\n    if (textAndLogic === null) {\n      textAndLogic = [new Text(\"\")];\n    } else if (textAndLogic.find((c) => c instanceof Divert)) {\n      this.Error(\"String expressions cannot contain diverts (->)\");\n    }\n\n    return new StringExpression(textAndLogic);\n  };\n\n  public readonly ExpressionBool = (): NumberExpression | null => {\n    const id = this.Parse(this.Identifier);\n    if (id === \"true\") {\n      return new NumberExpression(true, \"bool\");\n    } else if (id === \"false\") {\n      return new NumberExpression(false, \"bool\");\n    }\n\n    return null;\n  };\n\n  public readonly ExpressionFunctionCall = (): Expression | null => {\n    const iden = this.Parse(this.IdentifierWithMetadata);\n    if (iden === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const args = this.Parse(this.ExpressionFunctionCallArguments);\n    if (args === null) {\n      return null;\n    }\n\n    return new FunctionCall(iden as Identifier, args as any);\n  };\n\n  public readonly ExpressionFunctionCallArguments = (): Expression[] | null => {\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    // \"Exclude\" requires the rule to succeed, but causes actual comma string to be excluded from the list of results\n    const commas: ParseRule = this.Exclude(this.String(\",\"));\n    let args = this.Interleave<Expression>(this.Expression, commas);\n    if (args === null) {\n      args = [];\n    }\n\n    this.Whitespace();\n\n    this.Expect(this.String(\")\"), \"closing ')' for function call\");\n\n    return args;\n  };\n\n  public readonly ExpressionVariableName = (): Expression | null => {\n    const path = this.Interleave<Identifier>(\n      this.IdentifierWithMetadata,\n      this.Exclude(this.Spaced(this.String(\".\")))\n    );\n\n    if (path === null || Story.IsReservedKeyword(path[0].name)) {\n      return null;\n    }\n\n    return new VariableReference(path);\n  };\n\n  public readonly ExpressionParen = (): Expression | null => {\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    const innerExpr = this.Parse(this.Expression) as Expression;\n    if (innerExpr === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    this.Expect(this.String(\")\"), \"closing parenthesis ')' for expression\");\n\n    return innerExpr;\n  };\n\n  public readonly ExpressionInfixRight = (\n    left: Expression | null,\n    op: InfixOperator\n  ) => {\n    if (!left) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const right = this.Parse(() =>\n      this.Expression(op.precedence)\n    ) as Expression;\n    if (right) {\n      // We assume that the character we use for the operator's type is the same\n      // as that used internally by e.g. Runtime.Expression.Add, Runtime.Expression.Multiply etc\n      const expr = new BinaryExpression(left, right, op.type);\n      return expr;\n    }\n\n    return null;\n  };\n\n  private readonly ParseInfixOperator = (): InfixOperator | null => {\n    for (const op of this._binaryOperators) {\n      const ruleId: number = this.BeginRule();\n\n      if (this.ParseString(op.type) !== null) {\n        if (op.requireWhitespace) {\n          if (this.Whitespace() === null) {\n            this.FailRule(ruleId);\n\n            continue;\n          }\n        }\n\n        return this.SucceedRule(ruleId, op) as InfixOperator;\n      }\n\n      this.FailRule(ruleId);\n    }\n\n    return null;\n  };\n\n  public readonly ExpressionList = (): List | null => {\n    this.Whitespace();\n\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // When list has:\n    //  - 0 elements (null list) - this is okay, it's an empty list: \"()\"\n    //  - 1 element - it could be confused for a single non-list related\n    //    identifier expression in brackets, but this is a useless thing\n    //    to do, so we reserve that syntax for a list with one item.\n    //  - 2 or more elements - normal!\n    const memberNames: Identifier[] = this.SeparatedList(\n      this.ListMember,\n      this.Spaced(this.String(\",\"))\n    ) as Identifier[];\n\n    this.Whitespace();\n\n    // May have failed to parse the inner list - the parentheses may\n    // be for a normal expression\n    if (this.ParseString(\")\") === null) {\n      return null;\n    }\n    return new List(memberNames);\n  };\n\n  public readonly ListMember = (): Identifier | null => {\n    this.Whitespace();\n\n    let identifier: Identifier = this.Parse(\n      this.IdentifierWithMetadata\n    ) as Identifier;\n    if (identifier === null) {\n      return null;\n    }\n\n    const dot = this.ParseString(\".\");\n    if (dot !== null) {\n      const identifier2: Identifier = this.Expect(\n        this.IdentifierWithMetadata,\n        `element name within the set ${identifier}`\n      ) as Identifier;\n\n      identifier.name += `.${identifier2?.name}`;\n    }\n\n    this.Whitespace();\n\n    return identifier;\n  };\n\n  public readonly RegisterExpressionOperators = () => {\n    // These will be tried in order, so we need \"<=\" before \"<\"\n    // for correctness\n\n    this.RegisterBinaryOperator(\"&&\", 1);\n    this.RegisterBinaryOperator(\"||\", 1);\n    this.RegisterBinaryOperator(\"and\", 1, true);\n    this.RegisterBinaryOperator(\"or\", 1, true);\n    this.RegisterBinaryOperator(\"==\", 2);\n    this.RegisterBinaryOperator(\">=\", 2);\n    this.RegisterBinaryOperator(\"<=\", 2);\n    this.RegisterBinaryOperator(\"<\", 2);\n    this.RegisterBinaryOperator(\">\", 2);\n    this.RegisterBinaryOperator(\"!=\", 2);\n\n    // (apples, oranges) + cabbages has (oranges, cabbages) === true\n    this.RegisterBinaryOperator(\"?\", 3);\n    this.RegisterBinaryOperator(\"has\", 3, true);\n    this.RegisterBinaryOperator(\"!?\", 3);\n    this.RegisterBinaryOperator(\"hasnt\", 3, true);\n    this.RegisterBinaryOperator(\"^\", 3);\n\n    this.RegisterBinaryOperator(\"+\", 4);\n    this.RegisterBinaryOperator(\"-\", 5);\n    this.RegisterBinaryOperator(\"*\", 6);\n    this.RegisterBinaryOperator(\"/\", 7);\n\n    this.RegisterBinaryOperator(\"%\", 8);\n    this.RegisterBinaryOperator(\"mod\", 8, true);\n  };\n\n  public readonly RegisterBinaryOperator = (\n    op: string,\n    precedence: number,\n    requireWhitespace: boolean = false\n  ): void => {\n    const infix = new InfixOperator(op, precedence, requireWhitespace);\n    this._binaryOperators.push(infix);\n    this._maxBinaryOpLength = Math.max(this._maxBinaryOpLength, op.length);\n  };\n\n  /**\n   * End Expressions section.\n   */\n\n  /**\n   * Begin Include section.\n   */\n\n  private _rootParser: InkParser;\n  private _openFilenames: string[] = [];\n\n  public readonly IncludeStatement = () => {\n    this.Whitespace();\n\n    if (this.ParseString(\"INCLUDE\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    let filename: string = this.Expect(\n      () => this.ParseUntilCharactersFromString(\"\\n\\r\"),\n      \"filename for include statement\"\n    ) as string;\n\n    filename = filename.replace(new RegExp(/[ \\t]+$/g), \"\");\n\n    // Working directory should already have been set up relative to the root ink file.\n    const fullFilename = this.fileHandler.ResolveInkFilename(filename);\n\n    if (this.FilenameIsAlreadyOpen(fullFilename)) {\n      this.Error(\n        `Recursive INCLUDE detected: '${fullFilename}' is already open.`\n      );\n      this.ParseUntilCharactersFromString(\"\\r\\n\");\n      return new IncludedFile(null);\n    } else {\n      this.AddOpenFilename(fullFilename);\n    }\n\n    let includedStory: Story | null = null;\n    let includedString: string = \"\";\n    try {\n      includedString =\n        this._rootParser.fileHandler.LoadInkFileContents(fullFilename);\n    } catch (err) {\n      this.Error(`Failed to load: '${filename}'.\\nError:${err}`);\n    }\n\n    if (includedString) {\n      const parser: InkParser = new InkParser(\n        includedString,\n        filename,\n        this._externalErrorHandler,\n        this._rootParser,\n        this.fileHandler\n      );\n\n      includedStory = parser.ParseStory();\n    }\n\n    this.RemoveOpenFilename(fullFilename);\n\n    // Return valid IncludedFile object even if there were errors when parsing.\n    // We don't want to attempt to re-parse the include line as something else,\n    // and we want to include the bits that *are* valid, so we don't generate\n    // more errors than necessary.\n    return new IncludedFile(includedStory);\n  };\n\n  public readonly FilenameIsAlreadyOpen = (fullFilename: string): boolean =>\n    this._rootParser._openFilenames.includes(fullFilename);\n\n  public readonly AddOpenFilename = (fullFilename: string): void => {\n    this._rootParser._openFilenames.push(fullFilename);\n  };\n\n  public readonly RemoveOpenFilename = (fullFilename: string) => {\n    this._rootParser._openFilenames.splice(\n      this._rootParser._openFilenames.indexOf(fullFilename),\n      1\n    );\n  };\n\n  /**\n   * End Include section.\n   */\n\n  /**\n   * Begin Knot section.\n   */\n\n  public readonly KnotDefinition = (): Knot | null => {\n    const knotDecl: FlowDecl = this.Parse(this.KnotDeclaration) as FlowDecl;\n    if (knotDecl === null) {\n      return null;\n    }\n\n    this.Expect(\n      this.EndOfLine,\n      \"end of line after knot name definition\",\n      this.SkipToNextLine\n    );\n\n    const innerKnotStatements: ParseRule = (): ParsedObject[] =>\n      this.StatementsAtLevel(StatementLevel.Knot);\n\n    const content = this.Expect(\n      innerKnotStatements,\n      \"at least one line within the knot\",\n      this.KnotStitchNoContentRecoveryRule\n    ) as ParsedObject[];\n\n    return new Knot(knotDecl.name, content, knotDecl.args, knotDecl.isFunction);\n  };\n\n  public readonly KnotDeclaration = (): FlowDecl | null => {\n    this.Whitespace();\n\n    if (this.KnotTitleEquals() === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const identifier: Identifier = this.Parse(\n      this.IdentifierWithMetadata\n    ) as Identifier;\n    let knotName: Identifier;\n\n    const isFunc: boolean = identifier?.name === \"function\";\n    if (isFunc) {\n      this.Expect(this.Whitespace, \"whitespace after the 'function' keyword\");\n\n      knotName = this.Parse(this.IdentifierWithMetadata) as Identifier;\n    } else {\n      knotName = identifier;\n    }\n\n    if (knotName === null) {\n      this.Error(`Expected the name of the ${isFunc ? \"function\" : \"knot\"}`);\n      knotName = new Identifier(\"\"); // prevent later null ref\n    }\n\n    this.Whitespace();\n\n    const parameterNames: Argument[] = this.Parse(\n      this.BracketedKnotDeclArguments\n    ) as Argument[];\n\n    this.Whitespace();\n\n    // Optional equals after name\n    this.Parse(this.KnotTitleEquals);\n\n    return new FlowDecl(knotName, parameterNames, isFunc);\n  };\n\n  public readonly KnotTitleEquals = (): string | null => {\n    // 2+ \"=\" starts a knot\n    const multiEquals = this.ParseCharactersFromString(\"=\");\n    if (multiEquals === null || multiEquals.length <= 1) {\n      return null;\n    }\n\n    return multiEquals;\n  };\n\n  public readonly StitchDefinition = (): ParseRuleReturn => {\n    const decl = this.Parse(this.StitchDeclaration) as FlowDecl;\n    if (decl === null) {\n      return null;\n    }\n\n    this.Expect(\n      this.EndOfLine,\n      \"end of line after stitch name\",\n      this.SkipToNextLine\n    );\n\n    const innerStitchStatements: ParseRule = () =>\n      this.StatementsAtLevel(StatementLevel.Stitch);\n\n    const content = this.Expect(\n      innerStitchStatements,\n      \"at least one line within the stitch\",\n      this.KnotStitchNoContentRecoveryRule\n    ) as ParsedObject[];\n\n    return new Stitch(decl.name, content, decl.args, decl.isFunction);\n  };\n\n  public readonly StitchDeclaration = (): FlowDecl | null => {\n    this.Whitespace();\n\n    // Single \"=\" to define a stitch\n    if (this.ParseString(\"=\") === null) {\n      return null;\n    }\n\n    // If there's more than one \"=\", that's actually a knot definition (or divert), so this rule should fail\n    if (this.ParseString(\"=\") !== null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // Stitches aren't allowed to be functions, but we parse it anyway and report the error later\n    const isFunc: boolean = this.ParseString(\"function\") !== null;\n    if (isFunc) {\n      this.Whitespace();\n    }\n\n    const stitchName: Identifier = this.Parse(\n      this.IdentifierWithMetadata\n    ) as Identifier;\n    if (stitchName === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const flowArgs: Argument[] = this.Parse(\n      this.BracketedKnotDeclArguments\n    ) as Argument[];\n\n    this.Whitespace();\n\n    return new FlowDecl(stitchName, flowArgs, isFunc);\n  };\n\n  public readonly KnotStitchNoContentRecoveryRule = (): ParseRuleReturn => {\n    // Jump ahead to the next knot or the end of the file\n    this.ParseUntil(this.KnotDeclaration, new CharacterSet(\"=\"), null);\n\n    const recoveredFlowContent: ParsedObject[] = [new Text(\"<ERROR IN FLOW>\")];\n\n    return recoveredFlowContent;\n  };\n\n  public readonly BracketedKnotDeclArguments = (): Argument[] | null => {\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    let flowArguments = this.Interleave<Argument>(\n      this.Spaced(this.FlowDeclArgument),\n      this.Exclude(this.String(\",\"))\n    );\n\n    this.Expect(this.String(\")\"), \"closing ')' for parameter list\");\n\n    // If no parameters, create an empty list so that this method is type safe and\n    // doesn't attempt to return the ParseSuccess object\n    if (flowArguments === null) {\n      flowArguments = [];\n    }\n\n    return flowArguments;\n  };\n\n  public readonly FlowDeclArgument = (): Argument | null => {\n    // Possible forms:\n    //  name\n    //  -> name      (variable divert target argument\n    //  ref name\n    //  ref -> name  (variable divert target by reference)\n    const firstIden = this.Parse(this.IdentifierWithMetadata) as Identifier;\n    this.Whitespace();\n\n    const divertArrow = this.ParseDivertArrow();\n\n    this.Whitespace();\n\n    const secondIden = this.Parse(this.IdentifierWithMetadata) as Identifier;\n\n    if (firstIden == null && secondIden === null) {\n      return null;\n    }\n\n    const flowArg = new Argument();\n    if (divertArrow !== null) {\n      flowArg.isDivertTarget = true;\n    }\n\n    // Passing by reference\n    if (firstIden !== null && firstIden.name === \"ref\") {\n      if (secondIden === null) {\n        this.Error(\"Expected an parameter name after 'ref'\");\n      }\n\n      flowArg.identifier = secondIden;\n      flowArg.isByReference = true;\n    } else {\n      // Simple argument name\n      if (flowArg.isDivertTarget) {\n        flowArg.identifier = secondIden;\n      } else {\n        flowArg.identifier = firstIden;\n      }\n\n      if (flowArg.identifier === null) {\n        this.Error(\"Expected an parameter name\");\n      }\n\n      flowArg.isByReference = false;\n    }\n\n    return flowArg;\n  };\n\n  public readonly ExternalDeclaration = (): ExternalDeclaration | null => {\n    this.Whitespace();\n\n    const external = this.Parse(\n      this.IdentifierWithMetadata\n    ) as Identifier | null;\n    if (external === null || external.name != \"EXTERNAL\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const funcIdentifier: Identifier =\n      (this.Expect(\n        this.IdentifierWithMetadata,\n        \"name of external function\"\n      ) as Identifier | null) || new Identifier(\"\");\n\n    this.Whitespace();\n\n    let parameterNames = this.Expect(\n      this.BracketedKnotDeclArguments,\n      `declaration of arguments for EXTERNAL, even if empty, i.e. 'EXTERNAL ${funcIdentifier}()'`\n    ) as Argument[];\n\n    if (parameterNames === null) {\n      parameterNames = [];\n    }\n\n    const argNames = parameterNames\n      .map((arg) => arg.identifier?.name)\n      .filter(filterUndef);\n\n    return new ExternalDeclaration(funcIdentifier, argNames);\n  };\n\n  /**\n   * End Knot section.\n   */\n\n  /**\n   * Start Logic section.\n   */\n\n  private _identifierCharSet: CharacterSet | null = null;\n\n  get identifierCharSet(): CharacterSet {\n    if (this._identifierCharSet === null) {\n      (this._identifierCharSet = new CharacterSet())\n        .AddRange(\"A\", \"Z\")\n        .AddRange(\"a\", \"z\")\n        .AddRange(\"0\", \"9\")\n        .Add(\"_\");\n\n      // Enable non-ASCII characters for story identifiers.\n      this.ExtendIdentifierCharacterRanges(this._identifierCharSet);\n    }\n\n    return this._identifierCharSet;\n  }\n\n  public readonly LogicLine = (): ParsedObject | null => {\n    this.Whitespace();\n\n    if (this.ParseString(\"~\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // Some example lines we need to be able to distinguish between:\n    // ~ temp x = 5  -- var decl + assign\n    // ~ temp x      -- var decl\n    // ~ x = 5       -- var assign\n    // ~ x           -- expr (not var decl or assign)\n    // ~ f()         -- expr\n    // We don't treat variable decl/assign as an expression since we don't want an assignment\n    // to have a return value, or to be used in compound expressions.\n    const afterTilde: ParseRule = () =>\n      this.OneOf([\n        this.ReturnStatement,\n        this.TempDeclarationOrAssignment,\n        this.Expression,\n      ]);\n\n    let result = this.Expect(\n      afterTilde,\n      \"expression after '~'\",\n      this.SkipToNextLine\n    ) as ParsedObject;\n\n    // Prevent further errors, already reported expected expression and have skipped to next line.\n    if (result === null) {\n      return new ContentList();\n    }\n\n    // Parse all expressions, but tell the writer off if they did something useless like:\n    //  ~ 5 + 4\n    // And even:\n    //  ~ false && myFunction()\n    // ...since it's bad practice, and won't do what they expect if\n    // they're expecting C's lazy evaluation.\n    if (\n      result instanceof Expression &&\n      !(result instanceof FunctionCall || result instanceof IncDecExpression)\n    ) {\n      this.Error(\n        \"Logic following a '~' can't be that type of expression. It can only be something like:\\n\\t~ return\\n\\t~ var x = blah\\n\\t~ x++\\n\\t~ myFunction()\"\n      );\n    }\n\n    // Line is pure function call? e.g.\n    //  ~ f()\n    // Add extra pop to make sure we tidy up after ourselves.\n    // We no longer need anything on the evaluation stack.\n    const funCall = asOrNull(result, FunctionCall);\n    if (funCall) {\n      funCall.shouldPopReturnedValue = true;\n    }\n\n    // If the expression contains a function call, then it could produce a text side effect,\n    // in which case it needs a newline on the end. e.g.\n    //  ~ printMyName()\n    //  ~ x = 1 + returnAValueAndAlsoPrintStuff()\n    // If no text gets printed, then the extra newline will have to be culled later.\n    // Multiple newlines on the output will be removed, so there will be no \"leak\" for\n    // long running calculations. It's disappointingly messy though :-/\n    if (result.Find(FunctionCall)() !== null) {\n      result = new ContentList(result as any, new Text(\"\\n\"));\n    }\n\n    this.Expect(this.EndOfLine, \"end of line\", this.SkipToNextLine);\n\n    return result as ParsedObject;\n  };\n\n  public readonly VariableDeclaration = (): ParsedObject | null => {\n    this.Whitespace();\n\n    const id = this.Parse(this.Identifier);\n    if (id !== \"VAR\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const varName = this.Expect(\n      this.IdentifierWithMetadata,\n      \"variable name\"\n    ) as Identifier;\n\n    this.Whitespace();\n\n    this.Expect(\n      this.String(\"=\"),\n      \"the '=' for an assignment of a value, e.g. '= 5' (initial values are mandatory)\"\n    );\n\n    this.Whitespace();\n\n    const definition = this.Expect(this.Expression, \"initial value for \");\n\n    const expr = definition as Expression;\n\n    if (expr) {\n      const check =\n        expr instanceof NumberExpression ||\n        expr instanceof StringExpression ||\n        expr instanceof DivertTarget ||\n        expr instanceof VariableReference ||\n        expr instanceof List;\n\n      if (!check) {\n        this.Error(\n          \"initial value for a variable must be a number, constant, list or divert target\"\n        );\n      }\n\n      if (this.Parse(this.ListElementDefinitionSeparator) !== null) {\n        this.Error(\n          \"Unexpected ','. If you're trying to declare a new list, use the LIST keyword, not VAR\"\n        );\n      } else if (expr instanceof StringExpression) {\n        // Ensure string expressions are simple\n        const strExpr = expr as StringExpression;\n        if (!strExpr.isSingleString) {\n          this.Error(\"Constant strings cannot contain any logic.\");\n        }\n      }\n\n      const result = new VariableAssignment({\n        assignedExpression: expr,\n        isGlobalDeclaration: true,\n        variableIdentifier: varName,\n      });\n\n      return result;\n    }\n\n    return null;\n  };\n\n  public readonly ListDeclaration = (): VariableAssignment | null => {\n    this.Whitespace();\n\n    const id = this.Parse(this.Identifier);\n    if (id != \"LIST\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const varName = this.Expect(\n      this.IdentifierWithMetadata,\n      \"list name\"\n    ) as Identifier;\n\n    this.Whitespace();\n\n    this.Expect(\n      this.String(\"=\"),\n      \"the '=' for an assignment of the list definition\"\n    );\n\n    this.Whitespace();\n\n    const definition = this.Expect(\n      this.ListDefinition,\n      \"list item names\"\n    ) as ListDefinition;\n\n    if (definition) {\n      definition.identifier = new Identifier(varName.name);\n      return new VariableAssignment({\n        variableIdentifier: varName,\n        listDef: definition,\n      });\n    }\n\n    return null;\n  };\n\n  public readonly ListDefinition = (): ListDefinition | null => {\n    this.AnyWhitespace();\n\n    const allElements = this.SeparatedList(\n      this.ListElementDefinition,\n      this.ListElementDefinitionSeparator\n    ) as ListElementDefinition[];\n\n    if (allElements === null) {\n      return null;\n    }\n\n    return new ListDefinition(allElements);\n  };\n\n  public readonly ListElementDefinitionSeparator = (): string | null => {\n    this.AnyWhitespace();\n\n    if (this.ParseString(\",\") === null) {\n      return null;\n    }\n\n    this.AnyWhitespace();\n\n    return \",\";\n  };\n\n  public readonly ListElementDefinition = () => {\n    const inInitialList = this.ParseString(\"(\") !== null;\n    let needsToCloseParen = inInitialList;\n\n    this.Whitespace();\n\n    const name = this.Parse(this.IdentifierWithMetadata) as Identifier | null;\n    if (name === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    if (inInitialList) {\n      if (this.ParseString(\")\") != null) {\n        needsToCloseParen = false;\n        this.Whitespace();\n      }\n    }\n\n    let elementValue: number | null = null;\n    if (this.ParseString(\"=\") !== null) {\n      this.Whitespace();\n\n      const elementValueNum = this.Expect(\n        this.ExpressionInt,\n        \"value to be assigned to list item\"\n      ) as NumberExpression;\n\n      if (elementValueNum !== null) {\n        elementValue = elementValueNum.value as number;\n      }\n\n      if (needsToCloseParen) {\n        this.Whitespace();\n\n        if (this.ParseString(\")\") !== null) {\n          needsToCloseParen = false;\n        }\n      }\n    }\n\n    if (needsToCloseParen) {\n      this.Error(\"Expected closing ')'\");\n    }\n\n    return new ListElementDefinition(name, inInitialList, elementValue);\n  };\n\n  public readonly ConstDeclaration = (): ParsedObject | null => {\n    this.Whitespace();\n\n    const id = this.Parse(this.Identifier);\n    if (id !== \"CONST\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const varName = this.Expect(\n      this.IdentifierWithMetadata,\n      \"constant name\"\n    ) as Identifier;\n\n    this.Whitespace();\n\n    this.Expect(\n      this.String(\"=\"),\n      \"the '=' for an assignment of a value, e.g. '= 5' (initial values are mandatory)\"\n    );\n\n    this.Whitespace();\n\n    const expr = this.Expect(\n      this.Expression,\n      \"initial value for \"\n    ) as Expression;\n\n    const check =\n      expr instanceof NumberExpression ||\n      expr instanceof DivertTarget ||\n      expr instanceof StringExpression;\n\n    if (!check) {\n      this.Error(\n        \"initial value for a constant must be a number or divert target\"\n      );\n    } else if (expr instanceof StringExpression) {\n      // Ensure string expressions are simple\n      const strExpr = expr as StringExpression;\n      if (!strExpr.isSingleString) {\n        this.Error(\"Constant strings cannot contain any logic.\");\n      }\n    }\n\n    const result = new ConstantDeclaration(varName, expr);\n\n    return result;\n  };\n\n  public readonly InlineLogicOrGlueOrStartTag = (): ParsedObject =>\n    this.OneOf([this.InlineLogic, this.Glue, this.StartTag]) as ParsedObject;\n\n  public readonly Glue = (): Glue | null => {\n    // Don't want to parse whitespace, since it might be important\n    // surrounding the glue.\n    const glueStr = this.ParseString(\"<>\");\n    if (glueStr !== null) {\n      return new Glue(new RuntimeGlue());\n    }\n\n    return null;\n  };\n\n  public readonly InlineLogic = () => {\n    if (this.ParseString(\"{\") === null) {\n      return null;\n    }\n\n    let wasParsingString = this.parsingStringExpression;\n    let wasTagActive = this.tagActive;\n\n    this.Whitespace();\n\n    const logic = this.Expect(\n      this.InnerLogic,\n      \"some kind of logic, conditional or sequence within braces: { ... }\"\n    ) as ParsedObject;\n\n    if (logic === null) {\n      this.parsingStringExpression = wasParsingString;\n      return null;\n    }\n\n    this.DisallowIncrement(logic);\n\n    let contentList = asOrNull(logic, ContentList);\n    if (!contentList) {\n      contentList = new ContentList(logic as any);\n    }\n\n    this.Whitespace();\n\n    this.Expect(this.String(\"}\"), \"closing brace '}' for inline logic\");\n\n    // Allow nested strings and logic\n    this.parsingStringExpression = wasParsingString;\n\n    // Difference between:\n    //\n    //     1) A thing # {image}.jpg\n    //     2) A {red #red|blue #blue} sequence.\n    //\n    //  When logic ends in (1) we still want tag to continue.\n    //  When logic ends in (2) we want to auto-end the tag.\n    //  Side note: we simply disallow tags within strings.\n    if (!wasTagActive) this.EndTagIfNecessary(contentList);\n\n    return contentList;\n  };\n\n  public readonly InnerLogic = (): ParsedObject | null => {\n    this.Whitespace();\n\n    // Explicitly try the combinations of inner logic\n    // that could potentially have conflicts first.\n\n    // Explicit sequence annotation?\n    const explicitSeqType: SequenceType = this.ParseObject(\n      this.SequenceTypeAnnotation\n    ) as SequenceType;\n\n    if (explicitSeqType !== null) {\n      const contentLists = this.Expect(\n        this.InnerSequenceObjects,\n        \"sequence elements (for cycle/stoping etc)\"\n      ) as ContentList[];\n\n      if (contentLists === null) {\n        return null;\n      }\n\n      return new Sequence(contentLists, explicitSeqType);\n    }\n\n    // Conditional with expression?\n    const initialQueryExpression = this.Parse(\n      this.ConditionExpression\n    ) as Expression;\n    if (initialQueryExpression) {\n      const conditional = this.Expect(\n        () => this.InnerConditionalContent(initialQueryExpression),\n        \"conditional content following query\"\n      ) as Conditional;\n\n      return conditional;\n    }\n\n    // Now try to evaluate each of the \"full\" rules in turn\n    const rules: ParseRule[] = [\n      // Conditional still necessary, since you can have a multi-line conditional\n      // without an initial query expression:\n      // {\n      //   - true:  this is true\n      //   - false: this is false\n      // }\n      this.InnerConditionalContent as ParseRule,\n      this.InnerSequence,\n      this.InnerExpression,\n    ];\n\n    let wasTagActiveAtStartOfScope = this.tagActive;\n\n    // Adapted from \"OneOf\" structuring rule except that in\n    // order for the rule to succeed, it has to maximally\n    // cover the entire string within the { }. Used to\n    // differentiate between:\n    //  {myVar}                 -- Expression (try first)\n    //  {my content is jolly}   -- sequence with single element\n    for (const rule of rules) {\n      const ruleId: number = this.BeginRule();\n\n      const result: ParsedObject = this.ParseObject(rule) as ParsedObject;\n      if (result) {\n        // Not yet at end?\n        if (this.Peek(this.Spaced(this.String(\"}\"))) === null) {\n          this.FailRule(ruleId);\n        } else {\n          // Full parse of content within braces\n          return this.SucceedRule(ruleId, result) as ParsedObject;\n        }\n      } else {\n        this.FailRule(ruleId);\n      }\n    }\n\n    return null;\n  };\n\n  public readonly InnerExpression = (): ParsedObject => {\n    const expr = this.Parse(this.Expression) as Expression;\n    if (expr) {\n      expr.outputWhenComplete = true;\n    }\n\n    return expr;\n  };\n\n  public readonly IdentifierWithMetadata = (): Identifier | null => {\n    const id = this.Identifier();\n    if (id === null) {\n      return null;\n    }\n    return new Identifier(id);\n  };\n\n  // Note: we allow identifiers that start with a number,\n  // but not if they *only* comprise numbers\n  public readonly Identifier = (): string | null => {\n    // Parse remaining characters (if any)\n    const name = this.ParseCharactersFromCharSet(this.identifierCharSet);\n    if (name === null) {\n      return null;\n    }\n\n    // Reject if it's just a number\n    let isNumberCharsOnly: boolean = true;\n    for (let c of name) {\n      if (!(c >= \"0\" && c <= \"9\")) {\n        isNumberCharsOnly = false;\n        break;\n      }\n    }\n\n    if (isNumberCharsOnly) {\n      return null;\n    }\n\n    return name;\n  };\n\n  /**\n   * End Logic section.\n   */\n\n  /**\n   * Begin Sequences section.\n   */\n\n  public _sequenceTypeSymbols: CharacterSet = new CharacterSet(\"!&~$\");\n\n  public readonly InnerSequence = (): Sequence | null => {\n    this.Whitespace();\n\n    // Default sequence type\n    let seqType: SequenceType = SequenceType.Stopping;\n\n    // Optional explicit sequence type\n    const parsedSeqType: SequenceType = this.Parse(\n      this.SequenceTypeAnnotation\n    ) as SequenceType;\n\n    if (parsedSeqType !== null) {\n      seqType = parsedSeqType;\n    }\n\n    const contentLists = this.Parse(this.InnerSequenceObjects) as ContentList[];\n    if (contentLists === null || contentLists.length <= 1) {\n      return null;\n    }\n\n    return new Sequence(contentLists, seqType);\n  };\n\n  public readonly SequenceTypeAnnotation = (): ParseRuleReturn => {\n    let annotation = this.Parse(\n      this.SequenceTypeSymbolAnnotation\n    ) as SequenceType;\n\n    if (annotation === null) {\n      annotation = this.Parse(this.SequenceTypeWordAnnotation) as SequenceType;\n    }\n\n    if (annotation === null) {\n      return null;\n    }\n\n    switch (annotation) {\n      case SequenceType.Once:\n      case SequenceType.Cycle:\n      case SequenceType.Stopping:\n      case SequenceType.Shuffle:\n      case SequenceType.Shuffle | SequenceType.Stopping:\n      case SequenceType.Shuffle | SequenceType.Once:\n        break;\n      default:\n        this.Error(`Sequence type combination not supported: ${annotation}`);\n        return SequenceType.Stopping;\n    }\n\n    return annotation;\n  };\n\n  public readonly SequenceTypeSymbolAnnotation = (): ParseRuleReturn => {\n    if (this._sequenceTypeSymbols === null) {\n      this._sequenceTypeSymbols = new CharacterSet(\"!&~$ \");\n    }\n\n    let sequenceType = 0 as SequenceType;\n    const sequenceAnnotations = this.ParseCharactersFromCharSet(\n      this._sequenceTypeSymbols\n    );\n\n    if (sequenceAnnotations === null) {\n      return null;\n    }\n\n    for (const symbolChar of sequenceAnnotations) {\n      switch (symbolChar) {\n        case \"!\":\n          sequenceType |= SequenceType.Once;\n          break;\n        case \"&\":\n          sequenceType |= SequenceType.Cycle;\n          break;\n        case \"~\":\n          sequenceType |= SequenceType.Shuffle;\n          break;\n        case \"$\":\n          sequenceType |= SequenceType.Stopping;\n          break;\n      }\n    }\n\n    if (sequenceType === (0 as SequenceType)) {\n      return null;\n    }\n\n    return sequenceType;\n  };\n\n  public readonly SequenceTypeWordAnnotation = (): ParseRuleReturn => {\n    const sequenceTypes = this.Interleave<SequenceType | null>(\n      this.SequenceTypeSingleWord,\n      this.Exclude(this.Whitespace)\n    );\n\n    if (sequenceTypes === null || sequenceTypes.length === 0) {\n      return null;\n    }\n\n    if (this.ParseString(\":\") === null) {\n      return null;\n    }\n\n    let combinedSequenceType = 0 as SequenceType;\n    for (const seqType of sequenceTypes) {\n      combinedSequenceType |= seqType!;\n    }\n\n    return combinedSequenceType;\n  };\n\n  public readonly SequenceTypeSingleWord = () => {\n    let seqType: SequenceType | null = null;\n\n    const word = this.Parse(this.IdentifierWithMetadata) as Identifier | null;\n\n    if (word !== null) {\n      switch (word.name) {\n        case \"once\":\n          seqType = SequenceType.Once;\n          break;\n        case \"cycle\":\n          seqType = SequenceType.Cycle;\n          break;\n        case \"shuffle\":\n          seqType = SequenceType.Shuffle;\n          break;\n        case \"stopping\":\n          seqType = SequenceType.Stopping;\n          break;\n      }\n    }\n\n    if (seqType === null) {\n      return null;\n    }\n\n    return seqType;\n  };\n\n  public readonly InnerSequenceObjects = (): ContentList[] => {\n    const multiline = this.Parse(this.Newline) !== null;\n\n    let result: ContentList[] | null = null;\n    if (multiline) {\n      result = this.Parse(this.InnerMultilineSequenceObjects) as ContentList[];\n    } else {\n      result = this.Parse(this.InnerInlineSequenceObjects) as ContentList[];\n    }\n\n    return result;\n  };\n\n  public readonly InnerInlineSequenceObjects = (): ContentList[] | null => {\n    const interleavedContentAndPipes = this.Interleave<ParsedObject>(\n      this.Optional(this.MixedTextAndLogic),\n      this.String(\"|\"),\n      null,\n      false\n    );\n\n    if (interleavedContentAndPipes === null) {\n      return null;\n    }\n\n    const result = [];\n\n    // The content and pipes won't necessarily be perfectly interleaved in the sense that\n    // the content can be missing, but in that case it's intended that there's blank content.\n    let justHadContent: boolean = false;\n    for (const contentOrPipe of interleavedContentAndPipes) {\n      // Pipe/separator\n      if ((contentOrPipe as any) === \"|\") {\n        // Expected content, saw pipe - need blank content now\n        if (!justHadContent) {\n          // Add blank content\n          result.push(new ContentList());\n        }\n\n        justHadContent = false;\n      } else {\n        // Real content\n        const content = contentOrPipe as any;\n        if (content === null) {\n          this.Error(\n            `Expected content, but got ${contentOrPipe} (this is an ink compiler bug!)`\n          );\n        } else {\n          result.push(new ContentList(content));\n        }\n\n        justHadContent = true;\n      }\n    }\n\n    // Ended in a pipe? Need to insert final blank content\n    if (!justHadContent) {\n      result.push(new ContentList());\n    }\n\n    return result;\n  };\n\n  public readonly InnerMultilineSequenceObjects = (): ContentList[] | null => {\n    this.MultilineWhitespace();\n\n    const contentLists = this.OneOrMore(\n      this.SingleMultilineSequenceElement\n    ) as ContentList[];\n    if (contentLists === null) {\n      return null;\n    }\n\n    return contentLists;\n  };\n\n  public readonly SingleMultilineSequenceElement = () => {\n    this.Whitespace();\n\n    // Make sure we're not accidentally parsing a divert\n    if (this.ParseString(\"->\") !== null) {\n      return null;\n    }\n\n    if (this.ParseString(\"-\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const content: ParsedObject[] = this.StatementsAtLevel(\n      StatementLevel.InnerBlock\n    );\n\n    if (content === null) {\n      this.MultilineWhitespace();\n    } else {\n      // Add newline at the start of each branch\n      content.unshift(new Text(\"\\n\"));\n    }\n\n    return new ContentList(content);\n  };\n\n  /**\n   * End Sequences section.\n   */\n\n  /**\n   * Begin Statements section.\n   */\n\n  private _statementRulesAtLevel: ParseRule[][] = [];\n  private _statementBreakRulesAtLevel: ParseRule[][] = [];\n\n  public readonly StatementsAtLevel = (\n    level: StatementLevel\n  ): ParsedObject[] => {\n    // Check for error: Should not be allowed gather dashes within an inner block\n    if (level === StatementLevel.InnerBlock) {\n      const badGatherDashCount = this.Parse(this.GatherDashes) as ParsedObject;\n      if (badGatherDashCount !== null) {\n        this.Error(\n          \"You can't use a gather (the dashes) within the { curly braces } context. For multi-line sequences and conditions, you should only use one dash.\"\n        );\n      }\n    }\n\n    return this.Interleave<ParsedObject>(\n      this.Optional(this.MultilineWhitespace),\n      () => this.StatementAtLevel(level),\n      () => this.StatementsBreakForLevel(level)\n    );\n  };\n\n  public readonly StatementAtLevel = (level: StatementLevel): ParsedObject => {\n    const rulesAtLevel: ParseRule[] =\n      this._statementRulesAtLevel[level as number];\n    const statement = this.OneOf(rulesAtLevel) as ReturnType;\n\n    // For some statements, allow them to parse, but create errors, since\n    // writers may think they can use the statement, so it's useful to have\n    // the error message.\n    if (level === StatementLevel.Top) {\n      if (statement instanceof ReturnType) {\n        this.Error(\"should not have return statement outside of a knot\");\n      }\n    }\n\n    return statement;\n  };\n\n  public readonly StatementsBreakForLevel = (\n    level: StatementLevel\n  ): ParseRuleReturn => {\n    this.Whitespace();\n\n    const breakRules: ParseRule[] =\n      this._statementBreakRulesAtLevel[level as number];\n    const breakRuleResult = this.OneOf(breakRules);\n    if (breakRuleResult === null) {\n      return null;\n    }\n\n    return breakRuleResult;\n  };\n\n  public readonly GenerateStatementLevelRules = () => {\n    const levels = Object.values(StatementLevel);\n\n    this._statementRulesAtLevel = \"f\"\n      .repeat(levels.length)\n      .split(\"f\")\n      .map(() => []);\n\n    this._statementBreakRulesAtLevel = \"f\"\n      .repeat(levels.length)\n      .split(\"f\")\n      .map(() => []);\n\n    for (const level of levels) {\n      const rulesAtLevel: ParseRule[] = [];\n      const breakingRules: ParseRule[] = [];\n\n      // Diverts can go anywhere\n      rulesAtLevel.push(this.Line(this.MultiDivert));\n\n      // Knots can only be parsed at Top/Global scope\n      if (level >= StatementLevel.Top) {\n        rulesAtLevel.push(this.KnotDefinition);\n      }\n\n      rulesAtLevel.push(this.Line(this.Choice));\n\n      rulesAtLevel.push(this.Line(this.AuthorWarning));\n\n      // Gather lines would be confused with multi-line block separators, like\n      // within a multi-line if statement\n      if (level > StatementLevel.InnerBlock) {\n        rulesAtLevel.push(this.Gather);\n      }\n\n      // Stitches (and gathers) can (currently) only go in Knots and top level\n      if (level >= StatementLevel.Knot) {\n        rulesAtLevel.push(this.StitchDefinition);\n      }\n\n      // Global variable declarations can go anywhere\n      rulesAtLevel.push(this.Line(this.ListDeclaration));\n      rulesAtLevel.push(this.Line(this.VariableDeclaration));\n      rulesAtLevel.push(this.Line(this.ConstDeclaration));\n      rulesAtLevel.push(this.Line(this.ExternalDeclaration));\n\n      // Global include can go anywhere\n      rulesAtLevel.push(this.Line(this.IncludeStatement));\n\n      // Normal logic / text can go anywhere\n      rulesAtLevel.push(this.LogicLine);\n      rulesAtLevel.push(this.LineOfMixedTextAndLogic);\n\n      // --------\n      // Breaking rules\n\n      // Break current knot with a new knot\n      if (level <= StatementLevel.Knot) {\n        breakingRules.push(this.KnotDeclaration);\n      }\n\n      // Break current stitch with a new stitch\n      if (level <= StatementLevel.Stitch) {\n        breakingRules.push(this.StitchDeclaration);\n      }\n\n      // Breaking an inner block (like a multi-line condition statement)\n      if (level <= StatementLevel.InnerBlock) {\n        breakingRules.push(this.ParseDashNotArrow);\n        breakingRules.push(this.String(\"}\"));\n      }\n\n      this._statementRulesAtLevel[level as number] = rulesAtLevel;\n      this._statementBreakRulesAtLevel[level as number] = breakingRules;\n    }\n  };\n\n  public readonly SkipToNextLine = (): typeof ParseSuccess => {\n    this.ParseUntilCharactersFromString(\"\\n\\r\");\n    this.ParseNewline();\n\n    return ParseSuccess;\n  };\n\n  // Modifier to turn a rule into one that expects a newline on the end.\n  // e.g. anywhere you can use \"MixedTextAndLogic\" as a rule, you can use\n  // \"Line(MixedTextAndLogic)\" to specify that it expects a newline afterwards.\n  public readonly Line =\n    (inlineRule: ParseRule): ParseRule =>\n    () => {\n      const result = this.ParseObject(inlineRule);\n      if (result === null) {\n        return null;\n      }\n\n      this.Expect(this.EndOfLine, \"end of line\", this.SkipToNextLine);\n\n      return result;\n    };\n\n  /**\n   * End Statements section.\n   */\n\n  /**\n   * Begin Tags section.\n   */\n\n  public readonly StartTag = (): ParsedObject | null => {\n    this.Whitespace();\n\n    if (this.ParseString(\"#\") === null) {\n      return null;\n    }\n\n    if (this.parsingStringExpression) {\n      this.Error(\n        \"Tags aren't allowed inside of strings. Please use \\\\# if you want a hash symbol.\"\n      );\n    }\n\n    let result: ParsedObject | null = null;\n    if (this.tagActive) {\n      let contentList = new ContentList();\n      contentList.AddContent(new Tag(/*isStart:*/ false));\n      contentList.AddContent(new Tag(/*isStart:*/ true));\n      result = contentList;\n    } else {\n      result = new Tag(/*isStart:*/ true);\n    }\n    this.tagActive = true;\n\n    this.Whitespace();\n\n    return result;\n  };\n\n  public EndTagIfNecessary(outputContentList: ParsedObject[] | null): void;\n  public EndTagIfNecessary(outputContentList: ContentList | null): void;\n  public EndTagIfNecessary(\n    outputContentList: ParsedObject[] | ContentList | null\n  ): void {\n    if (this.tagActive) {\n      if (outputContentList != null) {\n        if (outputContentList instanceof ContentList) {\n          outputContentList.AddContent(new Tag(/*isStart:*/ false));\n        } else {\n          outputContentList.push(new Tag(/*isStart:*/ false));\n        }\n      }\n      this.tagActive = false;\n    }\n  }\n\n  /**\n   * End Tags section.\n   */\n\n  /**\n   * Begin Whitespace section.\n   */\n\n  private _inlineWhitespaceChars: CharacterSet = new CharacterSet(\" \\t\");\n\n  // Handles both newline and endOfFile\n  public readonly EndOfLine = () => this.OneOf([this.Newline, this.EndOfFile]);\n\n  // Allow whitespace before the actual newline\n  public readonly Newline = (): typeof ParseSuccess | null => {\n    this.Whitespace();\n\n    const gotNewline: boolean = this.ParseNewline() !== null;\n\n    // Optional \\r, definite \\n to support Windows (\\r\\n) and Mac/Unix (\\n)\n\n    if (!gotNewline) {\n      return null;\n    }\n\n    return ParseSuccess;\n  };\n\n  public readonly EndOfFile = (): typeof ParseSuccess | null => {\n    this.Whitespace();\n\n    if (!this.endOfInput) return null;\n\n    return ParseSuccess;\n  };\n\n  // General purpose space, returns N-count newlines (fails if no newlines)\n  public readonly MultilineWhitespace = (): typeof ParseSuccess | null => {\n    let newlines: ParseRuleReturn[] | null = this.OneOrMore(this.Newline);\n    if (newlines === null) {\n      return null;\n    }\n\n    // Use content field of Token to say how many newlines there were\n    // (in most circumstances it's unimportant)\n    const numNewlines: number = newlines.length;\n    if (numNewlines >= 1) {\n      return ParseSuccess;\n    }\n\n    return null;\n  };\n\n  public readonly Whitespace = (): typeof ParseSuccess | null => {\n    const doneParsed = this.ParseCharactersFromCharSet(\n      this._inlineWhitespaceChars\n    );\n\n    if (doneParsed !== null) {\n      return ParseSuccess;\n    }\n\n    return null;\n  };\n\n  public readonly Spaced =\n    (rule: ParseRule): ParseRule =>\n    () => {\n      this.Whitespace();\n\n      const result = this.ParseObject(rule);\n      if (result === null) {\n        return null;\n      }\n\n      this.Whitespace();\n\n      return result;\n    };\n\n  public readonly AnyWhitespace = (): typeof ParseSuccess | null => {\n    let anyWhitespace: boolean = false;\n\n    while (this.OneOf([this.Whitespace, this.MultilineWhitespace]) !== null) {\n      anyWhitespace = true;\n    }\n\n    return anyWhitespace ? ParseSuccess : null;\n  };\n\n  public readonly MultiSpaced =\n    (rule: ParseRule): ParseRuleReturn =>\n    () => {\n      this.AnyWhitespace();\n\n      const result = this.ParseObject(rule);\n      if (result === null) {\n        return null;\n      }\n\n      this.AnyWhitespace();\n\n      return result;\n    };\n\n  private _filename: string | null = null;\n  private _externalErrorHandler: ErrorHandler | null = null;\n  private _fileHandler: IFileHandler | null = null;\n\n  /**\n   * End Whitespace section.\n   */\n}\n","import { CompilerOptions } from \"./CompilerOptions\";\nimport { DebugSourceRange } from \"./DebugSourceRange\";\nimport { ErrorType } from \"./Parser/ErrorType\";\nimport { InkParser } from \"./Parser/InkParser\";\nimport { Story } from \"../engine/Story\";\nimport { Story as ParsedStory } from \"./Parser/ParsedHierarchy/Story\";\nimport { DebugMetadata } from \"../engine/DebugMetadata\";\nimport { StringValue } from \"../engine/Value\";\nimport { asOrNull } from \"../engine/TypeAssertion\";\n\nexport { CompilerOptions } from \"./CompilerOptions\";\nexport { JsonFileHandler } from \"./FileHandler/JsonFileHandler\";\nexport { InkList, Story } from \"../engine/Story\";\n\nexport class Compiler {\n  private _errors: string[] = [];\n  get errors(): string[] {\n    return this._errors;\n  }\n\n  private _warnings: string[] = [];\n  get warnings(): string[] {\n    return this._warnings;\n  }\n\n  private _authorMessages: string[] = [];\n  get authorMessages(): string[] {\n    return this._authorMessages;\n  }\n\n  private _inputString: string;\n  get inputString(): string {\n    return this._inputString;\n  }\n\n  private _options: CompilerOptions;\n  get options(): CompilerOptions {\n    return this._options;\n  }\n\n  private _parsedStory: ParsedStory | null = null;\n  get parsedStory(): ParsedStory {\n    if (!this._parsedStory) {\n      throw new Error();\n    }\n\n    return this._parsedStory;\n  }\n\n  private _runtimeStory: Story | null = null;\n  get runtimeStory(): Story {\n    if (!this._runtimeStory) {\n      throw new Error(\"Compilation failed.\");\n    }\n\n    return this._runtimeStory;\n  }\n\n  private _parser: InkParser | null = null;\n  get parser(): InkParser {\n    if (!this._parser) {\n      throw new Error();\n    }\n\n    return this._parser;\n  }\n\n  private _debugSourceRanges: DebugSourceRange[] = [];\n  get debugSourceRanges(): DebugSourceRange[] {\n    return this._debugSourceRanges;\n  }\n\n  constructor(inkSource: string, options: CompilerOptions | null = null) {\n    this._inputString = inkSource;\n    this._options = options || new CompilerOptions();\n  }\n\n  public readonly Compile = (): Story => {\n    this._parser = new InkParser(\n      this.inputString,\n      this.options.sourceFilename || null,\n      this.OnError,\n      null,\n      this.options.fileHandler\n    );\n\n    this._parsedStory = this.parser.ParseStory();\n\n    if (this.errors.length === 0) {\n      this.parsedStory.countAllVisits = this.options.countAllVisits;\n      this._runtimeStory = this.parsedStory.ExportRuntime(this.OnError);\n    } else {\n      this._runtimeStory = null;\n    }\n\n    return this.runtimeStory;\n  };\n\n  public readonly RetrieveDebugSourceForLatestContent = (): void => {\n    for (const outputObj of this.runtimeStory.state.outputStream) {\n      const textContent = asOrNull(outputObj, StringValue);\n      if (textContent !== null) {\n        const range = new DebugSourceRange(\n          textContent.value?.length || 0,\n          textContent.debugMetadata,\n          textContent.value || \"unknown\"\n        );\n\n        this.debugSourceRanges.push(range);\n      }\n    }\n  };\n\n  public readonly DebugMetadataForContentAtOffset = (\n    offset: number\n  ): DebugMetadata | null => {\n    let currOffset = 0;\n\n    let lastValidMetadata: DebugMetadata | null = null;\n    for (const range of this.debugSourceRanges) {\n      if (range.debugMetadata !== null) {\n        lastValidMetadata = range.debugMetadata;\n      }\n\n      if (offset >= currOffset && offset < currOffset + range.length) {\n        return lastValidMetadata;\n      }\n\n      currOffset += range.length;\n    }\n\n    return null;\n  };\n\n  public readonly OnError = (message: string, errorType: ErrorType) => {\n    switch (errorType) {\n      case ErrorType.Author:\n        this._authorMessages.push(message);\n        break;\n\n      case ErrorType.Warning:\n        this._warnings.push(message);\n        break;\n\n      case ErrorType.Error:\n        this._errors.push(message);\n        break;\n    }\n\n    if (this.options.errorHandler !== null) {\n      this.options.errorHandler(message, errorType);\n    }\n  };\n}\n","import { IFileHandler } from \"../IFileHandler\";\n\nexport class JsonFileHandler implements IFileHandler {\n  constructor(public readonly fileHierarchy: Record<string, string>) {}\n\n  readonly ResolveInkFilename = (filename: string): string => {\n    if (Object.keys(this.fileHierarchy).includes(filename)) return filename;\n    throw new Error(\n      `Cannot locate ${filename}. Are you trying a relative import ? This is not yet implemented.`\n    );\n  };\n\n  readonly LoadInkFileContents = (filename: string): string => {\n    if (Object.keys(this.fileHierarchy).includes(filename)) {\n      return this.fileHierarchy[filename];\n    } else {\n      throw new Error(`Cannot open ${filename}.`);\n    }\n  };\n}\n"],"names":["CompilerOptions","constructor","sourceFilename","pluginNames","countAllVisits","errorHandler","fileHandler","this","DebugSourceRange","length","debugMetadata","text","ErrorType","Debug","ValueType","PushPopType","SymbolType","Argument","identifier","isByReference","isDivertTarget","asOrNull","obj","type","unsafeTypeAssertion","asOrThrows","Error","asINamedContentOrNull","hasValidName","name","nullIfUndefined","isEquatable","Equals","filterUndef","element","undefined","ParsedObject","_alreadyHadError","_alreadyHadWarning","_debugMetadata","_runtimeObject","content","parent","GetType","typeName","AddContent","subContent","sub","Array","isArray","ss","hasOwnProperty","push","InsertContent","index","splice","Find","queryFunc","tObj","nestedResult","FindAll","foundSoFar","found","Warning","message","source","value","hasOwnDebugMetadata","Boolean","story","ancestor","runtimeObject","GenerateRuntimeObject","runtimePath","path","containerForCounting","ancestry","result","reverse","ResolveReferences","context","isWarning","AuthorWarning","warningMessage","super","Path","_components","_componentsString","_isRelative","arguments","componentsString","Component","head","tail","concat","relative","isRelative","componentCount","tailComps","slice","self","lastComponent","lastComponentIdx","containsNamedComponent","i","l","isIndex","GetComponent","PathByAppendingPath","pathToAppend","p","upwardMoves","isParent","join","substring","componentStrings","split","str","test","parseInt","toString","otherPath","PathByAppendingComponent","c","parentId","indexOrName","ToParent","otherComp","Assert","condition","console","warn","trace","AssertType","variable","NullException","throwNullException","InkObject","_path","ownDebugMetadata","DebugLineNumberOfPath","root","rootContentContainer","targetContent","ContentAtPath","dm","startLineNumber","comps","child","container","Container","namedChild","unshift","indexOf","ResolvePath","nearestContainer","contentContainer","ConvertPathToRelative","globalPath","ownPath","minPathLength","Math","min","lastSharedPathCompIndex","ownComp","numUpwardsMoves","newPathComps","up","down","CompactPathString","globalPathStr","relativePathStr","Copy","SetChild","prop","StringBuilder","string","Length","Append","AppendLine","AppendFormat","format","args","replace","match","num","Clear","InkListItem","originName","itemName","nameParts","Null","isNull","fullName","otherItem","copy","serialized","JSON","stringify","fromSerializedKey","key","parse","isLikeInkListItem","inkListItem","item","InkList","Map","origins","_originNames","otherList","otherOriginNames","originNames","singleOriginListName","originStory","SetInitialOriginName","listDefinitions","def","TryListGetDefinition","exists","singleElement","Add","Key","Value","FromString","myListItem","listValue","_a","FindSingleItemListWithName","AddItem","itemOrItemName","origin","intVal","TryGetValueForItem","foundListDef","ContainsItemWithName","itemVal","ValueForItem","ContainsItemNamed","ContainsKey","has","serializedKey","set","Remove","delete","Count","size","originOfMaxItem","maxOriginName","maxItem","every","initialOriginName","SetInitialOriginNames","initialOriginNames","max","minItem","inverse","list","items","all","Union","union","Intersect","intersection","HasIntersection","Without","listToRemove","Contains","what","GreaterThan","GreaterThanOrEquals","LessThan","LessThanOrEquals","MaxAsList","MinAsList","ListWithSubRange","minBound","maxBound","ordered","orderedItems","minValue","maxValue","Number","MAX_SAFE_INTEGER","isInteger","subList","otherInkList","sort","x","y","localeCompare","sb","valueOf","NaN","StoryException","useEndLineNumber","tryGetValueFromMap","map","val","get","AbstractValue","Create","preferredNumberType","Int","IntValue","Float","isNaN","FloatValue","BoolValue","StringValue","String","DivertTargetValue","ListValue","valueObject","BadCastException","targetType","valueType","isTruthy","Bool","Cast","newType","_isNewline","_isInlineWhitespace","isNewline","isInlineWhitespace","isNonWhitespace","parsedInt","defaultValue","tryParseInt","parsedFloat","parseFloat","tryParseFloat","targetPath","DivertTarget","VariablePointerValue","variableName","contextIndex","_contextIndex","VariablePointer","List","listOrSingleItem","singleValue","RetainListOriginsForAssignment","oldValue","newValue","oldList","newList","SearchResult","approximate","correctObj","searchResult","_content","namedContent","visitsShouldBeCounted","turnIndexShouldBeCounted","countingAtStartOnly","_pathToFirstLeafContent","namedOnlyContent","namedOnlyContentDict","inkObject","named","existingNamedOnly","AddToNamedContentOnly","countFlags","flags","CountFlags","Visits","Turns","CountStartOnly","flag","pathToFirstLeafContent","internalPathToFirstLeafContent","components","contentObjOrList","contentList","contentObj","TryAddNamedContent","namedContentObj","partialPathStart","partialPathLength","currentContainer","currentObj","comp","foundObj","ContentWithPathComponent","AddContentsOfContainer","otherContainer","component","foundContent","BuildStringOfHierarchy","indentation","pointedObj","appendIndentation","onlyNamed","ControlCommand","commandType","CommandType","NotSet","_commandType","EvalStart","EvalOutput","EvalEnd","Duplicate","PopEvaluatedValue","PopFunction","PopTunnel","BeginString","EndString","NoOp","ChoiceCount","TurnsSince","ReadCount","Random","SeedRandom","VisitIndex","SequenceShuffleIndex","StartThread","Done","End","ListFromInt","ListRange","ListRandom","BeginTag","EndTag","Expression","_prototypeRuntimeConstantExpression","outputWhenComplete","RuntimeContainer","RuntimeControlCommand","GenerateIntoContainer","GenerateConstantIntoContainer","runtimeObj","Void","NativeFunctionCall","_name","_numberOfParameters","_prototype","_isPrototype","_operationFuncs","GenerateNativeFunctionsIfNecessary","numberOfParameters","CallWithName","functionName","CallExistsWithName","_nativeFunctions","Call","parameters","hasList","CallBinaryListOperation","coercedParams","CoerceValuesToSingleType","coercedType","CallType","parametersOfSingleType","param1","valType","val1","paramCount","opForTypeObj","val2","opForType","resultVal","CallListIncrementOperation","v1","v2","op","asBooleanOrThrows","listIntParams","listVal","resultInkList","listItemKey","listItemValue","listItem","intOp","targetInt","itemOrigin","incrementedItem","TryGetItemWithValue","parametersIn","specialCaseList","parametersOut","inkObjectVal","castedValue","Identity","t","AddIntBinaryOp","Subtract","Multiply","Divide","floor","Mod","AddIntUnaryOp","Negate","Equal","Greater","Less","NotEquals","Not","And","Or","Max","Min","Pow","pow","Floor","Ceiling","AddFloatBinaryOp","AddFloatUnaryOp","ceil","AddStringBinaryOp","Has","includes","Hasnt","AddListBinaryOp","AddListUnaryOp","Invert","All","ListMin","ListMax","ValueOfList","divertTargetsEqual","d1","d2","divertTargetsNotEqual","AddOpToNativeFunc","AddOpFuncForType","nativeFunc","NumberExpression","subtype","isInt","isFloat","isBool","numberExpression","UnaryExpression","inner","innerExpression","nativeNameForOp","WithInner","innerNumber","BinaryExpression","left","right","opName","leftExpression","rightExpression","NativeNameForOp","leftUnary","CharacterSet","arg","Set","add","AddRange","start","end","charCodeAt","fromCharCode","AddCharacters","chars","FromRange","CharacterRange","_start","_end","excludes","_correspondingCharSet","_excludes","ToCharacterSet","ii","Define","ChoicePoint","onceOnly","_pathOnChoice","hasCondition","hasStartContent","hasChoiceOnlyContent","isInvisibleDefault","pathOnChoice","choiceTargetObj","choiceTarget","pathStringOnChoice","Pointer","Resolve","StartOf","Divert","stackPushType","_targetPath","_targetPointer","variableDivertName","pushesToStack","isExternal","externalArgs","isConditional","targetObj","targetPointer","targetPathString","hasVariableTarget","otherDivert","targetStr","Function","VariableAssignment","isNewDeclaration","isGlobal","Choice","startContent","choiceOnlyContent","innerContent","_condition","_innerContentContainer","_outerContainer","_runtimeChoice","_returnToR1","_returnToR2","_r1Label","_r2Label","_divertToStartContentOuter","_divertToStartContentInner","_startContentRuntimeContainer","hasWeaveStyleInlineBrackets","varAssign","RuntimeVariableAssignment","RuntimeDivert","varDivert","choiceOnlyRuntimeContent","innerChoiceOnlyContent","indentationDepth","runtimeChoice","runtimeContainer","innerContentContainer","CheckForNamingCollisions","SubFlowAndWeave","StringParserElement","characterIndex","characterInLineIndex","lineIndex","reportedErrorInScope","uniqueId","customFlags","CopyFrom","fromElement","_uniqueIdCounter","SquashFrom","StringParserState","_stack","_numElements","Push","prevElement","newElement","Pop","expectedRuleId","currentElement","Peek","PeekPenultimate","Squash","penultimateEl","lastEl","NoteErrorReported","el","errorReportedAlreadyInScope","stackHeight","ParseSuccess","Symbol","StringParser","ParseRule","hadError","BeginRule","state","FailRule","CancelRule","SucceedRule","stateAtSucceedRule","stateAtBeginRule","RuleDidSucceed","finalResult","Expect","rule","recoveryRule","ParseObject","butSaw","lineRemainder","LineRemainder","ErrorOnLine","ErrorWithParsedObject","lineNumber","errorType","ParseUntilCharactersFromString","SetFlag","trueOrFalse","GetFlag","ruleId","stackHeightBefore","Parse","OneOf","array","OneOrMore","results","Optional","Exclude","OptionalExclude","ParseString","TryAddResultToList","flatten","resultCollection","Interleave","ruleA","ruleB","untilTerminator","firstA","lastMainResult","outerResult","remainingLength","cli","li","success","tempIdx","_chars","ParseSingleCharacter","maxCount","ParseCharactersFromString","ParseUntilCharactersFromCharSet","charSet","ParseCharactersFromCharSet","maxCountOrShouldIncludeStrChars","shouldIncludeChars","startIndex","count","ParseInt","oldIndex","oldCharacterInLineIndex","negative","parsedString","numbersCharacterSet","MIN_SAFE_INTEGER","ParseFloat","leadingInt","afterDecimalPointStr","ParseNewline","strPreProc","PreProcessInputString","inputString","currentCharacter","endOfInput","remainingString","ParseUntil","stopRule","pauseCharacters","endCharacters","pauseAndEnd","values","ruleResultAtPause","partialParsedString","pauseCharacter","CommentEliminator","_commentOrNewlineStartCharacter","_commentBlockEndCharacter","_newlineCharacters","Process","stringList","CommentsAndNewlines","MainInk","newLines","ParseSingleComment","EndOfLineComment","BlockComment","startLineIndex","commentResult","repeat","Conditional","initialCondition","branches","_reJoinTarget","branch","branchContainer","ownExpression","isElse","pathToReJoin","returnDivert","Text","ConstantDeclaration","assignedExpression","_expression","constantIdentifier","constantName","expression","Var","FlowLevel","SequenceType","CustomFlags","StatementLevel","Gather","_b","argOne","argTwo","_dotSeparatedComponents","baseTargetLevel","WeavePoint","dotSeparatedComponents","ResolveFromContext","baseTargetObject","ResolveBaseTarget","ResolveTailComponents","originalContext","firstComp","firstComponent","ancestorContext","deepSearch","foundBase","GetChildFromContext","rootTarget","foundComponent","compName","minimumExpectedLevel","foundFlow","FlowBase","flowLevel","childName","minimumLevel","forceDeepSearch","ambiguousChildLevel","weaveContext","Weave","WeavePointNamed","flowContext","shouldDeepSearch","Knot","ContentWithNameAtLevel","Object","_baseTargetLevel","baseLevelIsAmbiguous","Story","numberOfComponents","filter","ReturnType","returnedExpression","ClosestFlowBase","iamFlowbase","Identifier","topLevelObjects","isFunction","isIncludedStory","_rootWeave","_subFlowsByName","_startingSubFlowDivert","_startingSubFlowRuntime","_firstChildFlow","variableDeclarations","SplitWeaveAndSubFlowContent","contentObjs","isRootStory","weaveObjs","subFlowObjs","subFlow","finalContent","ResolveVariableWithName","varName","fromNode","ownerFlow","isArgument","isTemporary","AddNewVariableDeclaration","varDecl","varab","prevDeclError","ResolveWeavePointNaming","foundReturn","CheckForDisallowedFunctionFlowControl","Stitch","GenerateArgumentVariableAssignments","contentIdx","childFlow","childFlowRuntime","hasParameters","existingChild","errorMsg","ValidateTermination","WarningInTermination","paramName","assign","level","weavePointResult","DeepSearchForAnyLevelContent","weaveResultSelf","deepResult","allDiverts","divert","isFunctionCall","allChoices","choice","terminatingObject","terminatingDivert","isTunnel","target","PreProcessTopLevelObjects","subFlowsByName","_","Arg","jj","symbolType","ContentList","objects","moreObjects","dontFlatten","TrimTrailingWhitespace","RegExp","contentObjRuntime","DontFlattenContainer","VariableReference","pathForCount","containerForCount","pathStringForCount","pathIdentifiers","_runtimeVarRef","isConstantReference","isListItemReference","constantValue","constants","RuntimeVariableReference","listItemName","listName","ResolveListItem","id","runtimeVarRef","parsedPath","targetForCount","targetFlow","FunctionCall","_divertTargetToCount","_variableReferenceToCount","shouldPopReturnedValue","foundList","ResolveList","usingProxyDivert","isChoiceCount","isTurns","isTurnsSince","isReadCount","divertTarget","variableDivertTarget","isRandom","isSeedRandom","isListRange","isListRandom","nativeCall","msg","RuntimeInkList","_proxyDivert","strArgs","proxyDivert","runtimeDivert","attemptingTurnCountOfVariableTarget","targetObject","IsBuiltIn","MultipleConditionExpression","conditionExpressions","isFirst","conditionExpr","subExpressions","_runtimeDivert","_runtimeDivertTargetValue","runtimeDivertTargetValue","otherDivTarget","isDone","isEnd","usageContext","badUsage","foundUsage","usageParent","binaryExprParent","funcCall","ConditionalSingleBranch","parentFunc","isEmpty","isThread","ResolveTargetContent","CheckArgumentValidity","requiresArgCodeGen","targetArguments","argToPass","argExpected","varRef","varPointer","Tunnel","PathAsVariableName","variableTargetName","flowBaseScope","resolveResult","argument","find","a","numArgs","butClause","flowArg","divArgExpr","knotCountPath","CheckExternalArgumentValidity","externalName","external","externals","externalArgCount","argumentNames","ownArgCount","returnString","targetWasFound","isBuiltIn","IsExternal","RuntimePath","GatherPointToResolve","targetRuntimeObj","SequenceDivertToResolve","Sequence","elementContentLists","sequenceType","_sequenceDivertsToResolve","once","Once","cycle","Cycle","stopping","Stopping","shuffle","Shuffle","seqBranchCount","sequenceElements","postShuffleNoOp","lastIdx","skipShuffleDivert","AddDivertToResolve","elementCountToShuffle","postSequenceNoOp","elIndex","sequenceDivert","contentContainerForSequenceBranch","seqBranchCompleteDivert","elementContentList","seqElObject","toResolve","TunnelOnwards","_overrideDivertTarget","_divertAfter","divertAfter","returnRuntimeObj","returnRuntimeContainer","evalStart","evalEnd","cmd","returnDivertObj","ListDefinition","_items","_itemNameToValues","ContainsItem","itemDefinitions","variableAssignment","_elementsByName","ItemNamed","initialValues","itemDef","inInitialList","RuntimeInkListItem","seriesValue","currentValue","e","explicitValue","runtimeListDefinition","allItems","RuntimeListDefinition","isGlobalDeclaration","isTemporaryNewDeclaration","listDef","variableIdentifier","_runtimeAssignment","listDefinition","newDeclScope","isNewTemporaryDeclaration","isDeclaration","Temp","variableReference","resolvedVarAssignment","cont","indentIndex","previousWeavePoint","addContentToPreviousWeavePoint","hasSeenChoiceInSection","_unnamedGatherCount","_choiceCount","_rootContainer","_namedWeavePoints","looseEnds","gatherPointsToResolve","namedWeavePoints","w","weavePoint","existingWeavePoint","existingObj","_c","ConstructWeaveHierarchyFromIndentation","weaveIndentIdx","baseIndentIndex","innerWeaveStartIdx","innerWeaveObj","weaveContentCount","weaveContent","weave","DetermineBaseIndentationFromContent","AddRuntimeForWeavePoint","AddRuntimeForNestedWeave","AddGeneralRuntimeContent","PassLooseEndsToAncestors","AddRuntimeForGather","gather","autoEnter","gatherContainer","rootContainer","looseEndWeavePoint","looseEnd","looseWeavePoint","WeavePointHasLooseEnd","closestInnerWeaveAncestor","closestOuterWeaveAncestor","nested","weaveAncestor","received","ReceiveLooseEnd","receivingWeave","childWeaveLooseEnd","IsGlobalDeclaration","varAss","ContentThatFollowsWeavePoint","returned","parentWeave","laterObj","badTerminationHandler","lastParsedSignificantObject","looseEndFlow","ValidateFlowOfObjectsTerminates","BadNestedTerminationHandler","terminatingObj","conditional","toLowerCase","objFlow","defaultObj","terminated","flowObj","d","innerDivert","CheckForWeavePointNamingCollisions","ancestorFlows","flow","weavePointName","otherContentWithName","lastObject","lastText","lastWeave","isNestedWeave","gatherPoint","_contentContainer","_conditionalDivert","_ownExpression","_innerWeave","isTrueBranch","matchingEquality","isInline","startsWith","duplicatesStackValue","needsEval","GenerateRuntimeForContent","DebugMetadata","endLineNumber","startCharacterNumber","endCharacterNumber","fileName","sourceName","Merge","newDebugMetadata","ExternalDeclaration","AddExternal","FlowDecl","Wrap","_objToWrap","Glue","glue","IncDecExpression","varIdentifier","isIncOrExpression","isInc","varResolveResult","incrementDecrementWord","IncludedFile","includedStory","InfixOperator","precedence","requireWhitespace","parentStory","stitchName","knotWithStitchName","stitch","itemIdentifierList","runtimeRawList","itemIdentifier","ListElementDefinition","indentifier","parentList","ListItem","Tag","tagText","threadAtGeneration","sourcePath","tags","originalThreadIndex","ListDefinitionsOrigin","lists","_lists","_allUnambiguousListValueCache","listOfLists","definition","JsonSerialisation","JArrayToRuntimeObjList","jArray","skipLast","jTok","JTokenToRuntimeObject","WriteDictionaryRuntimeObjs","writer","dictionary","WriteObjectStart","WritePropertyStart","WriteRuntimeObject","WritePropertyEnd","WriteObjectEnd","WriteListRuntimeObjs","WriteArrayStart","WriteArrayEnd","WriteIntDictionary","dict","WriteIntProperty","WriteRuntimeContainer","divTypeKey","WriteProperty","choicePoint","boolVal","WriteBool","WriteInt","floatVal","WriteFloat","strVal","Write","WriteStringStart","WriteStringInner","WriteStringEnd","WriteInkList","divTargetVal","varPtrVal","controlCmd","_controlCommandNames","readCountPath","tag","WriteChoice","JObjectToDictionaryRuntimeObjs","jObject","JObjectToIntDictionary","token","firstChar","propValue","varPtr","isDivert","divPushType","readCountVarRef","isVarAss","isGlobalVar","isNewDecl","listContent","rawList","namesAsObjs","nameToVal","JObjectToChoice","JArrayToContainer","toJson","me","removes","space","k","v","some","r","withoutName","hasNameProperty","hasTerminator","namedContainer","WriteNull","namedContentItem","namedSubContainer","jObj","WritePropertyNameStart","WritePropertyNameInner","WritePropertyNameEnd","ListDefinitionsToJToken","listDefJson","JTokenToListDefinitions","defsObj","allDefs","nameValueKey","nameValue","TOTAL_VALUES","CallStack","_threadCounter","_startOfRoot","storyContext","Reset","toCopy","_threads","otherThread","elements","callStack","depth","cs","callstack","currentElementIndex","currentThread","canPop","Thread","Element","SetJsonToken","jThreads","jThreadTok","jThreadObj","thread","WriteJson","WriteObject","PushThread","newThread","threadIndex","ForkThread","forkedThread","PopThread","canPopThread","elementIsEvaluateFromGame","FunctionEvaluationFromGame","externalEvaluationStackHeight","outputStreamLengthWithPushed","currentPointer","evaluationStackHeightWhenPushed","functionStartInOutputStream","CanPop","pop","GetTemporaryVariableWithName","varValue","temporaryVariables","SetTemporaryVariable","declareNew","contextElement","ContextForVariableNamed","ThreadWithIndex","filtered","callStackTrace","isCurrent","pointer","inExpressionEvaluation","previousPointer","jThreadCallstack","jElTok","currentContainerPathStr","jElementObj","pushPopType","currentContainerPathStrToken","threadPointerResult","temps","clear","prevContentObjPath","prevPath","PointerAtPath","resolvedPointer","VariablesState","listDefsOrigin","variableChangedEventCallbacks","patch","_batchObservingVariableChanges","_defaultGlobalVariables","_changedVariablesForBatchObs","_globalVariables","_callStack","_listDefsOrigin","Proxy","$","variableChangedEvent","callback","batchObservingVariableChanges","varContents","TryGetGlobal","SetGlobal","ApplyPatch","namedVarKey","namedVarValue","globals","changedVariables","jToken","varValKey","varValValue","loadedToken","tokenInkObject","keyValKey","keyValValue","dontSaveDefaultValues","defaultVal","RuntimeObjectsEqual","obj1","obj2","GetVariableWithName","GetRawVariableWithName","ValueAtVariablePointer","TryGetDefaultVariableValue","GlobalVariableExistsWithName","variableValue","Assign","setGlobal","ResolveVariablePointer","existingPointer","SnapshotDefaultGlobals","AddChangedVariable","GetContextIndexOfVariableNamed","doubleRedirectionPointer","ObserveVariableChange","PRNG","seed","next","nextFloat","StatePatch","_changedVariables","_visitCounts","_turnIndices","_globals","visitCounts","turnIndices","TryGetVisitCount","SetVisitCount","SetTurnIndex","TryGetTurnIndex","SimpleJson","TextToDictionary","Reader","ToDictionary","TextToArray","ToArray","_rootObject","Writer","_currentPropertyName","_currentString","_stateStack","_collectionStack","_propertyNameStack","_jsonObject","StartNewObject","newObject","State","Property","currentCollection","currentPropertyName","propertyName","None","StateElement","innerOrContent","WriteFloatProperty","IncrementChildCount","childCount","PropertyName","escape","_addToCurrentObject","error","POSITIVE_INFINITY","NEGATIVE_INFINITY","currEl","Flow","outputStream","currentChoices","jChoiceThreadsObj","LoadFlowChoiceThreads","hasChoiceThreads","jChoiceThreads","foundActiveThread","jSavedChoiceThread","StoryState","kInkSaveStateVersion","kMinCompatibleLoadVersion","onDidLoadState","_currentErrors","_currentWarnings","divertedPointer","_currentTurnIndex","storySeed","previousRandom","didSafeExit","_currentText","_currentTags","_outputStreamTextDirty","_outputStreamTagsDirty","_patch","_aliveFlowNames","_namedFlows","kDefaultFlowName","_aliveFlowNamesDirty","_currentFlow","OutputStreamDirty","_evaluationStack","_variablesState","currentTurnIndex","timeSeed","Date","getTime","GoToStart","ToJson","indented","LoadJson","json","LoadJsonObj","VisitCountAtPathString","pathString","visitCountOut","VisitCountForContainer","containerPathStr","count2","IncrementVisitCountForContainer","currCount","RecordTurnIndexVisitToContainer","TurnsSinceForContainer","index2","callstackDepth","canContinue","generatedChoices","currentErrors","currentWarnings","variablesState","evaluationStack","currentPathString","hasError","hasWarning","currentText","inTag","outputObj","textContent","controlCommand","CleanOutputWhitespace","currentWhitespaceStart","startOfLine","charAt","currentTags","txt","currentFlowName","currentFlowIsDefaultFlow","aliveFlowNames","flowName","keys","mainContentContainer","SwitchFlow_Internal","SwitchToDefaultFlow_Internal","RemoveFlow_Internal","CopyAndStartPatching","namedFlowKey","namedFlowValue","RestoreAfterPatch","ApplyAnyPatch","ApplyCountChanges","newCount","isVisit","inkVersionCurrent","jSaveVersion","flowsObj","flowsObjDict","flowsObjDictEntries","entries","namedFlowObjKey","namedFlowObjValue","currFlowName","currentDivertTargetPath","divertPath","ResetErrors","ResetOutput","objs","PushToOutputStream","listText","TrySplittingHeadTailWhitespace","textObj","PushToOutputStreamIndividual","PopFromOutputStream","single","headFirstNewlineIdx","headLastNewlineIdx","tailLastNewlineIdx","tailFirstNewlineIdx","listTexts","innerStrStart","innerStrEnd","leadingSpaces","innerStrText","numSpaces","trailingSpaces","includeInOutput","TrimNewlinesFromOutputStream","functionTrimIndex","glueTrimIndex","o","trimIndex","RemoveExistingGlue","callStackElements","outputStreamEndsInNewline","outputStreamContainsContent","removeWhitespaceFrom","inStringEvaluation","PushEvaluationStack","n","PopEvaluationStack","numberOfObjects","PeekEvaluationStack","ForceEnd","TrimWhitespaceFromFunctionEnd","functionStartPoint","PopCallStack","popType","SetChosenPath","incrementingTurnIndex","newPointer","StartFunctionEvaluationFromGame","funcContainer","PassArgumentsToEvaluationStack","TryExitFunctionEvaluationFromGame","CompleteFunctionEvaluationFromGame","originalEvaluationStackHeight","returnedObj","poppedObj","returnVal","AddError","Stopwatch","startTime","ElapsedMilliseconds","Start","Stop","nVal","isFinite","inkVersionMinimumCompatible","onError","onDidContinue","onMakeChoice","onEvaluateFunction","onCompleteEvaluateFunction","onChoosePathString","_prevContainers","allowExternalFunctionFallbacks","_listDefinitions","_variableObservers","_hasValidatedExternals","_temporaryEvaluationContainer","_asyncContinueActive","_stateSnapshotAtLastNewline","_sawLookaheadUnsafeFunctionAfterNewline","_recursiveContinueCount","_asyncSaving","_profiler","_mainContentContainer","jsonString","_externals","rootObject","versionObj","formatFromFile","listDefsObj","rootToken","ResetState","choices","_state","IfAsyncWeCant","StartProfiling","EndProfiling","shouldReturn","VariableStateDidChangeEvent","bind","ResetGlobals","ResetCallstack","originalPointer","ChoosePath","ContinueInternal","SwitchFlow","RemoveFlow","SwitchToDefaultFlow","Continue","ContinueAsync","asyncContinueComplete","millisecsLimitAsync","ValidateExternalBindings","PreContinue","isAsyncTimeLimited","durationStopwatch","ContinueSingleStep","RestoreStateSnapshot","PostContinue","err","PreStep","Step","PostStep","TryFollowDefaultInvisibleChoice","PreSnapshot","change","CalculateNewlineOutputStateChange","OutputStateChange","ExtendedBeyondNewline","NewlineRemoved","DiscardSnapshot","StateSnapshot","PostSnapshot","prevText","currText","prevTagCount","currTagCount","newlineStillExists","NoChange","ContinueMaximally","KnotContainerWithName","pathLengthToUse","CopyStateForBackgroundThreadSave","stateToSave","BackgroundSaveComplete","shouldAddToStream","containerToEnter","VisitContainer","currentContentObj","isLogicOrFlowControl","PerformLogicAndFlowControl","ProcessChoice","contextIdx","NextContent","atStart","VisitChangedContainersDueToDivert","prevAncestor","currentChildOfContainer","currentContainerAncestor","allChildrenEnteredAtStart","enteringAtStart","PopChoiceStringAndTags","choiceOnlyStrVal","showChoice","conditionValue","IsTruthy","startText","choiceOnlyText","divTarget","currentDivert","intContent","errorMessage","CallExternalFunction","evalCommand","output","overrideTunnelReturnTarget","popped","names","expected","contentStackForTag","outputCountConsumed","command","choiceTag","contentStackForString","contentToRetain","rescuedTag","choiceCount","extraNote","eitherCount","maxInt","minInt","randomRange","resultSeed","nextRandom","chosenValue","shuffleIndex","NextSequenceShuffleIndex","listNameVal","generatedListValue","foundItem","targetList","listItemIndex","listEnumerator","randomItem","assignedVal","foundValue","func","funcParams","ChoosePathString","resetCallstack","funcDetail","activityStr","ChooseChoiceIndex","choiceIdx","choiceToChoose","HasFunction","EvaluateFunction","returnTextOutput","trim","outputStreamBefore","stringOutput","textOutput","EvaluateExpression","exprContainer","startCallStackHeight","evalStackHeight","funcName","numberOfArguments","funcDef","fallbackFunctionContainer","foundExternal","lookAheadSafe","valueObj","funcResult","function","returnObj","BindExternalFunctionGeneral","lookaheadSafe","TryCoerce","BindExternalFunction","coercedArgs","apply","UnbindExternalFunction","missingExternals","from","ObserveVariable","observer","ObserveVariables","variableNames","observers","RemoveVariableObserver","specificVariableName","variableObservers","newValueObj","globalTags","TagsAtStartOfFlowContainerWithPathString","TagsForContentAtPath","flowContainer","firstContent","BuildStringOfContainer","IncrementContentPointer","didPop","successfulIncrement","nextAncestor","indexInAncestor","invisibleChoices","numElementsIntVal","seqContainer","numElements","seqCount","loopIndex","iterationIndex","seqPathStr","sequenceHash","randomSeed","random","unpickedIndices","chosen","chosenIndex","currentDebugMetadata","errorTypeStr","lineNum","toplevelObjects","isInclude","_errorHandler","_hadError","_hadWarning","_dontFlattenContainers","_listDefs","ExportRuntime","constDecl","existingDefinition","variableInitialisation","runtimeLists","runtimeVarAss","runtimeStory","RuntimeStory","FlattenContainersIn","originalFoundList","itemInThisList","innerContainers","innerContainer","namedInnerContainer","TryFlattenContainer","parentContainer","Author","ResetError","namedFuncTarget","decl","NameConflictError","typeNameToPrint","typeNameOverride","IsReservedKeyword","knotOrFunction","hadWarning","topLevelContent","flowsFromOtherFiles","file","posOfObj","nonFlowContent","subStory","subStoryObj","StringExpression","isSingleString","otherStr","isStart","inChoice","DefaultFileHandler","rootPath","ResolveInkFilename","LoadInkFileContents","InkParser","filename","externalErrorHandler","rootParser","ParseStory","StatementsAtLevel","Top","_rootParser","SeparatedList","mainRule","separatorRule","firstElement","allElements","nextElementRuleId","nextElement","CreateDebugMetadata","stateAtStart","stateAtEnd","md","_filename","parsedObj","parsedListObjs","parsedListObj","OnStringParserError","fullMessage","_externalErrorHandler","Whitespace","IdentifierWithMetadata","ExtendIdentifierCharacterRanges","identifierCharSet","characterRanges","ListAllCharacterRanges","charRange","_parsingChoice","onceOnlyChoice","bullets","optionalName","BracketedName","ChoiceCondition","startTextAndLogic","MixedTextAndLogic","optionOnlyContent","EndTagIfNecessary","optionOnlyTextAndLogic","innerTextAndLogic","diverts","MultiDivert","emptyContent","divObj","div","conditions","ChoiceSingleCondition","ChoiceConditionsSpace","Newline","condExpr","DisallowIncrement","gatherDashCountObj","GatherDashes","gatherDashCount","ParseDashNotArrow","InnerConditionalContent","initialQueryExpression","ConditionExpression","alternatives","canBeInline","InlineConditionalBranches","MultilineConditionalBranches","soleContent","InnerBlock","elseBranch","SingleMultilineCondition","emptyTrueBranch","earlierBranchesHaveOwnExpression","isLast","alt","finalClause","trueBranch","MultilineWhitespace","multipleConditions","expr","ElseExpression","_nonTextPauseCharacters","_nonTextEndCharacters","_notTextEndCharactersChoice","_notTextEndCharactersString","TrimEndWhitespace","mixedTextAndLogicResults","terminateWithSpace","lastObjIdx","lastObj","LineOfMixedTextAndLogic","firstText","EndOfLine","SkipToNextLine","Spaced","ContentText","InlineLogicOrGlueOrStartTag","ContentTextAllowingEscapeChar","ContentTextNoEscape","gotEscapeChar","endChars","parsingStringExpression","pureTextContent","ParseDivertArrow","ParseThreadArrow","threadDivert","arrowsAndDiverts","ParseDivertArrowOrTunnelOnwards","DivertIdentifierWithArguments","tunnelOnwards","tunnelOnwardDivert","gatherDivert","targetComponents","DotSeparatedDivertPathComponents","optionalArguments","ExpressionFunctionCallArguments","SingleDivert","numArrows","_binaryOperators","_maxBinaryOpLength","TempDeclarationOrAssignment","ParseTempKeyword","isIncrement","isDecrement","ReturnStatement","minimumPrecedence","ExpressionUnary","infixOp","ParseInfixOperator","expectationMessage","multiaryExpr","ExpressionInfixRight","ExpressionDivertTarget","prefixOp","ExpressionNot","ExpressionList","ExpressionParen","ExpressionFunctionCall","ExpressionVariableName","ExpressionLiteral","postfixOp","ExpressionFloat","ExpressionInt","ExpressionBool","ExpressionString","intOrNull","floatOrNull","textAndLogic","iden","commas","innerExpr","memberNames","ListMember","identifier2","RegisterExpressionOperators","RegisterBinaryOperator","infix","_openFilenames","IncludeStatement","fullFilename","FilenameIsAlreadyOpen","AddOpenFilename","includedString","RemoveOpenFilename","KnotDefinition","knotDecl","KnotDeclaration","KnotStitchNoContentRecoveryRule","KnotTitleEquals","knotName","isFunc","parameterNames","BracketedKnotDeclArguments","multiEquals","StitchDefinition","StitchDeclaration","flowArgs","flowArguments","FlowDeclArgument","firstIden","divertArrow","secondIden","funcIdentifier","argNames","_identifierCharSet","LogicLine","funCall","VariableDeclaration","ListElementDefinitionSeparator","ListDeclaration","AnyWhitespace","needsToCloseParen","elementValue","elementValueNum","ConstDeclaration","InlineLogic","StartTag","RuntimeGlue","wasParsingString","wasTagActive","tagActive","logic","InnerLogic","explicitSeqType","SequenceTypeAnnotation","contentLists","InnerSequenceObjects","rules","InnerSequence","InnerExpression","isNumberCharsOnly","_sequenceTypeSymbols","seqType","parsedSeqType","annotation","SequenceTypeSymbolAnnotation","SequenceTypeWordAnnotation","sequenceAnnotations","symbolChar","sequenceTypes","SequenceTypeSingleWord","combinedSequenceType","word","InnerMultilineSequenceObjects","InnerInlineSequenceObjects","interleavedContentAndPipes","justHadContent","contentOrPipe","SingleMultilineSequenceElement","_statementRulesAtLevel","_statementBreakRulesAtLevel","StatementAtLevel","StatementsBreakForLevel","rulesAtLevel","statement","breakRules","breakRuleResult","GenerateStatementLevelRules","levels","breakingRules","Line","inlineRule","_inlineWhitespaceChars","EndOfFile","newlines","anyWhitespace","MultiSpaced","_fileHandler","fullRootInkPath","ParsingString","TagActive","outputContentList","LatinBasic","LatinExtendedA","LatinExtendedB","Greek","Cyrillic","Armenian","Hebrew","Arabic","Korean","inkSource","options","_errors","_warnings","_authorMessages","_parsedStory","_runtimeStory","_parser","_debugSourceRanges","Compile","OnError","parser","errors","parsedStory","RetrieveDebugSourceForLatestContent","range","debugSourceRanges","DebugMetadataForContentAtOffset","offset","currOffset","lastValidMetadata","_inputString","_options","warnings","authorMessages","fileHierarchy"],"mappings":"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"}